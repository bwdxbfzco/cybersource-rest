// Code generated by go-swagger; DO NOT EDIT.

package key_management_pgp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePGPReader is a Reader for the UpdatePGP structure.
type UpdatePGPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePGPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePGPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePGPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePGPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /kms/v2/keys-pgp/{keyId}] UpdatePGP", response, response.Code())
	}
}

// NewUpdatePGPOK creates a UpdatePGPOK with default headers values
func NewUpdatePGPOK() *UpdatePGPOK {
	return &UpdatePGPOK{}
}

/*
UpdatePGPOK describes a response with status code 200, with default header values.

Successful response.
*/
type UpdatePGPOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update p g p o k response has a 2xx status code
func (o *UpdatePGPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update p g p o k response has a 3xx status code
func (o *UpdatePGPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update p g p o k response has a 4xx status code
func (o *UpdatePGPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update p g p o k response has a 5xx status code
func (o *UpdatePGPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update p g p o k response a status code equal to that given
func (o *UpdatePGPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update p g p o k response
func (o *UpdatePGPOK) Code() int {
	return 200
}

func (o *UpdatePGPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPOK %s", 200, payload)
}

func (o *UpdatePGPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPOK %s", 200, payload)
}

func (o *UpdatePGPOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdatePGPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePGPBadRequest creates a UpdatePGPBadRequest with default headers values
func NewUpdatePGPBadRequest() *UpdatePGPBadRequest {
	return &UpdatePGPBadRequest{}
}

/*
UpdatePGPBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type UpdatePGPBadRequest struct {
	Payload *UpdatePGPBadRequestBody
}

// IsSuccess returns true when this update p g p bad request response has a 2xx status code
func (o *UpdatePGPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update p g p bad request response has a 3xx status code
func (o *UpdatePGPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update p g p bad request response has a 4xx status code
func (o *UpdatePGPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update p g p bad request response has a 5xx status code
func (o *UpdatePGPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update p g p bad request response a status code equal to that given
func (o *UpdatePGPBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update p g p bad request response
func (o *UpdatePGPBadRequest) Code() int {
	return 400
}

func (o *UpdatePGPBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPBadRequest %s", 400, payload)
}

func (o *UpdatePGPBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPBadRequest %s", 400, payload)
}

func (o *UpdatePGPBadRequest) GetPayload() *UpdatePGPBadRequestBody {
	return o.Payload
}

func (o *UpdatePGPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePGPBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePGPInternalServerError creates a UpdatePGPInternalServerError with default headers values
func NewUpdatePGPInternalServerError() *UpdatePGPInternalServerError {
	return &UpdatePGPInternalServerError{}
}

/*
UpdatePGPInternalServerError describes a response with status code 500, with default header values.

Unexpected system error or system timeout.
*/
type UpdatePGPInternalServerError struct {
	Payload *UpdatePGPInternalServerErrorBody
}

// IsSuccess returns true when this update p g p internal server error response has a 2xx status code
func (o *UpdatePGPInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update p g p internal server error response has a 3xx status code
func (o *UpdatePGPInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update p g p internal server error response has a 4xx status code
func (o *UpdatePGPInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update p g p internal server error response has a 5xx status code
func (o *UpdatePGPInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update p g p internal server error response a status code equal to that given
func (o *UpdatePGPInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update p g p internal server error response
func (o *UpdatePGPInternalServerError) Code() int {
	return 500
}

func (o *UpdatePGPInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPInternalServerError %s", 500, payload)
}

func (o *UpdatePGPInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-pgp/{keyId}][%d] updatePGPInternalServerError %s", 500, payload)
}

func (o *UpdatePGPInternalServerError) GetPayload() *UpdatePGPInternalServerErrorBody {
	return o.Payload
}

func (o *UpdatePGPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePGPInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdatePGPBadRequestBody update p g p bad request body
swagger:model UpdatePGPBadRequestBody
*/
type UpdatePGPBadRequestBody struct {

	// details
	Details []*UpdatePGPBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update p g p bad request body
func (o *UpdatePGPBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePGPBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePGPBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updatePGPBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update p g p bad request body based on the context it is used
func (o *UpdatePGPBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePGPBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePGPBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updatePGPBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePGPBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePGPBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdatePGPBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePGPBadRequestBodyDetailsItems0 update p g p bad request body details items0
swagger:model UpdatePGPBadRequestBodyDetailsItems0
*/
type UpdatePGPBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this update p g p bad request body details items0
func (o *UpdatePGPBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update p g p bad request body details items0 based on context it is used
func (o *UpdatePGPBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePGPBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePGPBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePGPBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePGPBody update p g p body
swagger:model UpdatePGPBody
*/
type UpdatePGPBody struct {

	// Organization Id
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Status can be active/inactive
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this update p g p body
func (o *UpdatePGPBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePGPBody) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("UpdatePGPKeysRequest"+"."+"organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePGPBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("UpdatePGPKeysRequest"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update p g p body based on context it is used
func (o *UpdatePGPBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePGPBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePGPBody) UnmarshalBinary(b []byte) error {
	var res UpdatePGPBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePGPInternalServerErrorBody update p g p internal server error body
swagger:model UpdatePGPInternalServerErrorBody
*/
type UpdatePGPInternalServerErrorBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted request.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update p g p internal server error body
func (o *UpdatePGPInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update p g p internal server error body based on context it is used
func (o *UpdatePGPInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePGPInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePGPInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdatePGPInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
