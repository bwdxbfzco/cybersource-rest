// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new plans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new plans API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new plans API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for plans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationHalJSON sets the Accept header to "application/hal+json".
func WithAcceptApplicationHalJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json"}
}

// WithAcceptApplicationHalJSONCharsetUTF8 sets the Accept header to "application/hal+json;charset=utf-8".
func WithAcceptApplicationHalJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json;charset=utf-8"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationJSONCharsetUTF8 sets the Accept header to "application/json;charset=utf-8".
func WithAcceptApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json;charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActivatePlan(params *ActivatePlanParams, opts ...ClientOption) (*ActivatePlanOK, error)

	CreatePlan(params *CreatePlanParams, opts ...ClientOption) (*CreatePlanCreated, error)

	DeactivatePlan(params *DeactivatePlanParams, opts ...ClientOption) (*DeactivatePlanOK, error)

	DeletePlan(params *DeletePlanParams, opts ...ClientOption) (*DeletePlanOK, error)

	GetPlan(params *GetPlanParams, opts ...ClientOption) (*GetPlanOK, error)

	GetPlanCode(params *GetPlanCodeParams, opts ...ClientOption) (*GetPlanCodeOK, error)

	GetPlans(params *GetPlansParams, opts ...ClientOption) (*GetPlansOK, error)

	UpdatePlan(params *UpdatePlanParams, opts ...ClientOption) (*UpdatePlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivatePlan activates a plan

Activate a Plan
*/
func (a *Client) ActivatePlan(params *ActivatePlanParams, opts ...ClientOption) (*ActivatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "activatePlan",
		Method:             "POST",
		PathPattern:        "/rbs/v1/plans/{id}/activate",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivatePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for activatePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePlan creates a plan

	The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer's payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).

The three key elements of *Cybersource* Recurring Billing are:

-  **Token**: stores customer billing, shipping, and payment details.

-  **Plan**: stores the billing schedule.

-  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.

The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management)
*/
func (a *Client) CreatePlan(params *CreatePlanParams, opts ...ClientOption) (*CreatePlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPlan",
		Method:             "POST",
		PathPattern:        "/rbs/v1/plans",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeactivatePlan deactivates a plan

Deactivate a Plan
*/
func (a *Client) DeactivatePlan(params *DeactivatePlanParams, opts ...ClientOption) (*DeactivatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeactivatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deactivatePlan",
		Method:             "POST",
		PathPattern:        "/rbs/v1/plans/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeactivatePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeactivatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deactivatePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeletePlan deletes a plan

	Delete a Plan is only allowed:

- plan status is in `DRAFT`
- plan status is in `ACTIVE`, and `INACTIVE` only allowed when no subscriptions attached to a plan in the lifetime of a plan
*/
func (a *Client) DeletePlan(params *DeletePlanParams, opts ...ClientOption) (*DeletePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePlan",
		Method:             "DELETE",
		PathPattern:        "/rbs/v1/plans/{id}",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlan gets a plan

Retrieve a Plan details by Plan Id.
*/
func (a *Client) GetPlan(params *GetPlanParams, opts ...ClientOption) (*GetPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlan",
		Method:             "GET",
		PathPattern:        "/rbs/v1/plans/{id}",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanCode gets a plan code

Get a Unique Plan Code
*/
func (a *Client) GetPlanCode(params *GetPlanCodeParams, opts ...ClientOption) (*GetPlanCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanCode",
		Method:             "GET",
		PathPattern:        "/rbs/v1/plans/code",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlans gets a list of plans

Retrieve Plans by Plan Code & Plan Status.
*/
func (a *Client) GetPlans(params *GetPlansParams, opts ...ClientOption) (*GetPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlans",
		Method:             "GET",
		PathPattern:        "/rbs/v1/plans",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdatePlan updates a plan

	Update a Plan

Plan in `DRAFT` status
- All updates are allowed on Plan with `DRAFT` status

Plan in `ACTIVE` status [Following fields are **Not Updatable**]
- `planInformation.billingPeriod`
- `planInformation.billingCycles` [Update is only allowed to **increase** billingCycles]
- `orderInformation.amountDetails.currency`
*/
func (a *Client) UpdatePlan(params *UpdatePlanParams, opts ...ClientOption) (*UpdatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePlan",
		Method:             "PATCH",
		PathPattern:        "/rbs/v1/plans/{id}",
		ProducesMediaTypes: []string{"application/json", "application/hal+json", "application/json;charset=utf-8", "application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
