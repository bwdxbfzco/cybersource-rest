// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePlanReader is a Reader for the CreatePlan structure.
type CreatePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePlanCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreatePlanBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rbs/v1/plans] createPlan", response, response.Code())
	}
}

// NewCreatePlanCreated creates a CreatePlanCreated with default headers values
func NewCreatePlanCreated() *CreatePlanCreated {
	return &CreatePlanCreated{}
}

/*
CreatePlanCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreatePlanCreated struct {
	Payload *CreatePlanCreatedBody
}

// IsSuccess returns true when this create plan created response has a 2xx status code
func (o *CreatePlanCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create plan created response has a 3xx status code
func (o *CreatePlanCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create plan created response has a 4xx status code
func (o *CreatePlanCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create plan created response has a 5xx status code
func (o *CreatePlanCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create plan created response a status code equal to that given
func (o *CreatePlanCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create plan created response
func (o *CreatePlanCreated) Code() int {
	return 201
}

func (o *CreatePlanCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanCreated %s", 201, payload)
}

func (o *CreatePlanCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanCreated %s", 201, payload)
}

func (o *CreatePlanCreated) GetPayload() *CreatePlanCreatedBody {
	return o.Payload
}

func (o *CreatePlanCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePlanCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePlanBadRequest creates a CreatePlanBadRequest with default headers values
func NewCreatePlanBadRequest() *CreatePlanBadRequest {
	return &CreatePlanBadRequest{}
}

/*
CreatePlanBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreatePlanBadRequest struct {
	Payload *CreatePlanBadRequestBody
}

// IsSuccess returns true when this create plan bad request response has a 2xx status code
func (o *CreatePlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create plan bad request response has a 3xx status code
func (o *CreatePlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create plan bad request response has a 4xx status code
func (o *CreatePlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create plan bad request response has a 5xx status code
func (o *CreatePlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create plan bad request response a status code equal to that given
func (o *CreatePlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create plan bad request response
func (o *CreatePlanBadRequest) Code() int {
	return 400
}

func (o *CreatePlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanBadRequest %s", 400, payload)
}

func (o *CreatePlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanBadRequest %s", 400, payload)
}

func (o *CreatePlanBadRequest) GetPayload() *CreatePlanBadRequestBody {
	return o.Payload
}

func (o *CreatePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePlanBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePlanBadGateway creates a CreatePlanBadGateway with default headers values
func NewCreatePlanBadGateway() *CreatePlanBadGateway {
	return &CreatePlanBadGateway{}
}

/*
CreatePlanBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreatePlanBadGateway struct {
	Payload *CreatePlanBadGatewayBody
}

// IsSuccess returns true when this create plan bad gateway response has a 2xx status code
func (o *CreatePlanBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create plan bad gateway response has a 3xx status code
func (o *CreatePlanBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create plan bad gateway response has a 4xx status code
func (o *CreatePlanBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create plan bad gateway response has a 5xx status code
func (o *CreatePlanBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create plan bad gateway response a status code equal to that given
func (o *CreatePlanBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create plan bad gateway response
func (o *CreatePlanBadGateway) Code() int {
	return 502
}

func (o *CreatePlanBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanBadGateway %s", 502, payload)
}

func (o *CreatePlanBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans][%d] createPlanBadGateway %s", 502, payload)
}

func (o *CreatePlanBadGateway) GetPayload() *CreatePlanBadGatewayBody {
	return o.Payload
}

func (o *CreatePlanBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePlanBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreatePlanBadGatewayBody create plan bad gateway body
swagger:model CreatePlanBadGatewayBody
*/
type CreatePlanBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create plan bad gateway body
func (o *CreatePlanBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create plan bad gateway body based on context it is used
func (o *CreatePlanBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanBadRequestBody create plan bad request body
swagger:model CreatePlanBadRequestBody
*/
type CreatePlanBadRequestBody struct {

	// details
	Details []*CreatePlanBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create plan bad request body
func (o *CreatePlanBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create plan bad request body based on the context it is used
func (o *CreatePlanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanBadRequestBodyDetailsItems0 create plan bad request body details items0
swagger:model CreatePlanBadRequestBodyDetailsItems0
*/
type CreatePlanBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create plan bad request body details items0
func (o *CreatePlanBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create plan bad request body details items0 based on context it is used
func (o *CreatePlanBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreatePlanBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanBody create plan body
// Example: {"orderInformation":{"amountDetails":{"billingAmount":"10","currency":"USD","setupFee":"2"}},"planInformation":{"billingCycles":{"total":"12"},"billingPeriod":{"length":"1","unit":"M"},"description":"New Gold Plan","name":"Gold Plan"}}
swagger:model CreatePlanBody
*/
type CreatePlanBody struct {

	// client reference information
	ClientReferenceInformation *CreatePlanParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// order information
	OrderInformation *CreatePlanParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// plan information
	PlanInformation *CreatePlanParamsBodyPlanInformation `json:"planInformation,omitempty"`
}

// Validate validates this create plan body
func (o *CreatePlanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan body based on the context it is used
func (o *CreatePlanBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanCreatedBody createPlanResponse
// Example: {"_links":{"self":{"href":"rbs/v1/plans/4963015972176007901546","method":"GET"}},"id":"4963015972176007901546","planInformation":{"code":"PLN1","status":"DRAFT"},"status":"COMPLETED","submitTimeUtc":"2020-06-28T19:48:06Z"}
swagger:model CreatePlanCreatedBody
*/
type CreatePlanCreatedBody struct {

	// links
	Links *CreatePlanCreatedBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// plan information
	PlanInformation *CreatePlanCreatedBodyPlanInformation `json:"planInformation,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create plan created body
func (o *CreatePlanCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanCreatedBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan created body based on the context it is used
func (o *CreatePlanCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanCreatedBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanCreatedBodyLinks create plan created body links
swagger:model CreatePlanCreatedBodyLinks
*/
type CreatePlanCreatedBodyLinks struct {

	// self
	Self *CreatePlanCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this create plan created body links
func (o *CreatePlanCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan created body links based on the context it is used
func (o *CreatePlanCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreatePlanCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanCreatedBodyLinksSelf create plan created body links self
swagger:model CreatePlanCreatedBodyLinksSelf
*/
type CreatePlanCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create plan created body links self
func (o *CreatePlanCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create plan created body links self based on context it is used
func (o *CreatePlanCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePlanCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanCreatedBodyPlanInformation create plan created body plan information
swagger:model CreatePlanCreatedBodyPlanInformation
*/
type CreatePlanCreatedBodyPlanInformation struct {

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create plan created body plan information
func (o *CreatePlanCreatedBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanCreated"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create plan created body plan information based on context it is used
func (o *CreatePlanCreatedBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanCreatedBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanCreatedBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res CreatePlanCreatedBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyClientReferenceInformation create plan params body client reference information
swagger:model CreatePlanParamsBodyClientReferenceInformation
*/
type CreatePlanParamsBodyClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Version of the CyberSource application or integration used for a transaction.
	//
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreatePlanParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create plan params body client reference information
func (o *CreatePlanParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan params body client reference information based on the context it is used
func (o *CreatePlanParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyClientReferenceInformationPartner create plan params body client reference information partner
swagger:model CreatePlanParamsBodyClientReferenceInformationPartner
*/
type CreatePlanParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create plan params body client reference information partner
func (o *CreatePlanParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create plan params body client reference information partner based on context it is used
func (o *CreatePlanParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyOrderInformation create plan params body order information
swagger:model CreatePlanParamsBodyOrderInformation
*/
type CreatePlanParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *CreatePlanParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this create plan params body order information
func (o *CreatePlanParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan params body order information based on the context it is used
func (o *CreatePlanParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyOrderInformationAmountDetails create plan params body order information amount details
swagger:model CreatePlanParamsBodyOrderInformationAmountDetails
*/
type CreatePlanParamsBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Required: true
	// Max Length: 19
	BillingAmount *string `json:"billingAmount"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this create plan params body order information amount details
func (o *CreatePlanParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {

	if err := validate.Required("createPlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount); err != nil {
		return err
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", *o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("createPlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", *o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create plan params body order information amount details based on context it is used
func (o *CreatePlanParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyPlanInformation create plan params body plan information
swagger:model CreatePlanParamsBodyPlanInformation
*/
type CreatePlanParamsBodyPlanInformation struct {

	// billing cycles
	BillingCycles *CreatePlanParamsBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	// Required: true
	BillingPeriod *CreatePlanParamsBodyPlanInformationBillingPeriod `json:"billingPeriod"`

	// Plan code is an optional field, If not provided system generates and assign one
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan description
	//
	// Max Length: 255
	Description string `json:"description,omitempty"`

	// Plan name
	//
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE` (default)
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create plan params body plan information
func (o *CreatePlanParamsBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) validateBillingPeriod(formats strfmt.Registry) error {

	if err := validate.Required("createPlanRequest"+"."+"planInformation"+"."+"billingPeriod", "body", o.BillingPeriod); err != nil {
		return err
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"planInformation"+"."+"description", "body", o.Description, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createPlanRequest"+"."+"planInformation"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("createPlanRequest"+"."+"planInformation"+"."+"name", "body", *o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create plan params body plan information based on the context it is used
func (o *CreatePlanParamsBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanParamsBodyPlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyPlanInformationBillingCycles Number of times customer is going to be billed
//
swagger:model CreatePlanParamsBodyPlanInformationBillingCycles
*/
type CreatePlanParamsBodyPlanInformationBillingCycles struct {

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this create plan params body plan information billing cycles
func (o *CreatePlanParamsBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create plan params body plan information billing cycles based on context it is used
func (o *CreatePlanParamsBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePlanParamsBodyPlanInformationBillingPeriod Billing Frequency
//
swagger:model CreatePlanParamsBodyPlanInformationBillingPeriod
*/
type CreatePlanParamsBodyPlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this create plan params body plan information billing period
func (o *CreatePlanParamsBodyPlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create plan params body plan information billing period based on context it is used
func (o *CreatePlanParamsBodyPlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanParamsBodyPlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res CreatePlanParamsBodyPlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
