// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivatePlanReader is a Reader for the ActivatePlan structure.
type ActivatePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActivatePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActivatePlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewActivatePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewActivatePlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewActivatePlanBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rbs/v1/plans/{id}/activate] activatePlan", response, response.Code())
	}
}

// NewActivatePlanOK creates a ActivatePlanOK with default headers values
func NewActivatePlanOK() *ActivatePlanOK {
	return &ActivatePlanOK{}
}

/*
ActivatePlanOK describes a response with status code 200, with default header values.

Successful response.
*/
type ActivatePlanOK struct {
	Payload *ActivatePlanOKBody
}

// IsSuccess returns true when this activate plan o k response has a 2xx status code
func (o *ActivatePlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this activate plan o k response has a 3xx status code
func (o *ActivatePlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate plan o k response has a 4xx status code
func (o *ActivatePlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this activate plan o k response has a 5xx status code
func (o *ActivatePlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this activate plan o k response a status code equal to that given
func (o *ActivatePlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the activate plan o k response
func (o *ActivatePlanOK) Code() int {
	return 200
}

func (o *ActivatePlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanOK %s", 200, payload)
}

func (o *ActivatePlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanOK %s", 200, payload)
}

func (o *ActivatePlanOK) GetPayload() *ActivatePlanOKBody {
	return o.Payload
}

func (o *ActivatePlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivatePlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivatePlanBadRequest creates a ActivatePlanBadRequest with default headers values
func NewActivatePlanBadRequest() *ActivatePlanBadRequest {
	return &ActivatePlanBadRequest{}
}

/*
ActivatePlanBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type ActivatePlanBadRequest struct {
	Payload *ActivatePlanBadRequestBody
}

// IsSuccess returns true when this activate plan bad request response has a 2xx status code
func (o *ActivatePlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate plan bad request response has a 3xx status code
func (o *ActivatePlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate plan bad request response has a 4xx status code
func (o *ActivatePlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate plan bad request response has a 5xx status code
func (o *ActivatePlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this activate plan bad request response a status code equal to that given
func (o *ActivatePlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the activate plan bad request response
func (o *ActivatePlanBadRequest) Code() int {
	return 400
}

func (o *ActivatePlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanBadRequest %s", 400, payload)
}

func (o *ActivatePlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanBadRequest %s", 400, payload)
}

func (o *ActivatePlanBadRequest) GetPayload() *ActivatePlanBadRequestBody {
	return o.Payload
}

func (o *ActivatePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivatePlanBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivatePlanNotFound creates a ActivatePlanNotFound with default headers values
func NewActivatePlanNotFound() *ActivatePlanNotFound {
	return &ActivatePlanNotFound{}
}

/*
ActivatePlanNotFound describes a response with status code 404, with default header values.

Not found.
*/
type ActivatePlanNotFound struct {
	Payload *ActivatePlanNotFoundBody
}

// IsSuccess returns true when this activate plan not found response has a 2xx status code
func (o *ActivatePlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate plan not found response has a 3xx status code
func (o *ActivatePlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate plan not found response has a 4xx status code
func (o *ActivatePlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate plan not found response has a 5xx status code
func (o *ActivatePlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this activate plan not found response a status code equal to that given
func (o *ActivatePlanNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the activate plan not found response
func (o *ActivatePlanNotFound) Code() int {
	return 404
}

func (o *ActivatePlanNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanNotFound %s", 404, payload)
}

func (o *ActivatePlanNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanNotFound %s", 404, payload)
}

func (o *ActivatePlanNotFound) GetPayload() *ActivatePlanNotFoundBody {
	return o.Payload
}

func (o *ActivatePlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivatePlanNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivatePlanBadGateway creates a ActivatePlanBadGateway with default headers values
func NewActivatePlanBadGateway() *ActivatePlanBadGateway {
	return &ActivatePlanBadGateway{}
}

/*
ActivatePlanBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type ActivatePlanBadGateway struct {
	Payload *ActivatePlanBadGatewayBody
}

// IsSuccess returns true when this activate plan bad gateway response has a 2xx status code
func (o *ActivatePlanBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate plan bad gateway response has a 3xx status code
func (o *ActivatePlanBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate plan bad gateway response has a 4xx status code
func (o *ActivatePlanBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this activate plan bad gateway response has a 5xx status code
func (o *ActivatePlanBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this activate plan bad gateway response a status code equal to that given
func (o *ActivatePlanBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the activate plan bad gateway response
func (o *ActivatePlanBadGateway) Code() int {
	return 502
}

func (o *ActivatePlanBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanBadGateway %s", 502, payload)
}

func (o *ActivatePlanBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/plans/{id}/activate][%d] activatePlanBadGateway %s", 502, payload)
}

func (o *ActivatePlanBadGateway) GetPayload() *ActivatePlanBadGatewayBody {
	return o.Payload
}

func (o *ActivatePlanBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivatePlanBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ActivatePlanBadGatewayBody activate plan bad gateway body
swagger:model ActivatePlanBadGatewayBody
*/
type ActivatePlanBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate plan bad gateway body
func (o *ActivatePlanBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate plan bad gateway body based on context it is used
func (o *ActivatePlanBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res ActivatePlanBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanBadRequestBody activate plan bad request body
swagger:model ActivatePlanBadRequestBody
*/
type ActivatePlanBadRequestBody struct {

	// details
	Details []*ActivatePlanBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate plan bad request body
func (o *ActivatePlanBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this activate plan bad request body based on the context it is used
func (o *ActivatePlanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ActivatePlanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanBadRequestBodyDetailsItems0 activate plan bad request body details items0
swagger:model ActivatePlanBadRequestBodyDetailsItems0
*/
type ActivatePlanBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this activate plan bad request body details items0
func (o *ActivatePlanBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate plan bad request body details items0 based on context it is used
func (o *ActivatePlanBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActivatePlanBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanNotFoundBody activate plan not found body
swagger:model ActivatePlanNotFoundBody
*/
type ActivatePlanNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate plan not found body
func (o *ActivatePlanNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate plan not found body based on context it is used
func (o *ActivatePlanNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ActivatePlanNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanOKBody activateDeactivatePlanResponse
swagger:model ActivatePlanOKBody
*/
type ActivatePlanOKBody struct {

	// links
	Links *ActivatePlanOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// plan information
	PlanInformation *ActivatePlanOKBodyPlanInformation `json:"planInformation,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate plan o k body
func (o *ActivatePlanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *ActivatePlanOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("activatePlanOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *ActivatePlanOKBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activate plan o k body based on the context it is used
func (o *ActivatePlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *ActivatePlanOKBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanOKBody) UnmarshalBinary(b []byte) error {
	var res ActivatePlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanOKBodyLinks activate plan o k body links
swagger:model ActivatePlanOKBodyLinks
*/
type ActivatePlanOKBodyLinks struct {

	// self
	Self *ActivatePlanOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this activate plan o k body links
func (o *ActivatePlanOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activate plan o k body links based on the context it is used
func (o *ActivatePlanOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activatePlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activatePlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res ActivatePlanOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanOKBodyLinksSelf activate plan o k body links self
swagger:model ActivatePlanOKBodyLinksSelf
*/
type ActivatePlanOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this activate plan o k body links self
func (o *ActivatePlanOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate plan o k body links self based on context it is used
func (o *ActivatePlanOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res ActivatePlanOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivatePlanOKBodyPlanInformation activate plan o k body plan information
swagger:model ActivatePlanOKBodyPlanInformation
*/
type ActivatePlanOKBodyPlanInformation struct {

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE`
	//  - `INACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this activate plan o k body plan information
func (o *ActivatePlanOKBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivatePlanOKBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("activatePlanOK"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this activate plan o k body plan information based on context it is used
func (o *ActivatePlanOKBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivatePlanOKBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivatePlanOKBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res ActivatePlanOKBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
