// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeletePlanReader is a Reader for the DeletePlan structure.
type DeletePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeletePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDeletePlanBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /rbs/v1/plans/{id}] deletePlan", response, response.Code())
	}
}

// NewDeletePlanOK creates a DeletePlanOK with default headers values
func NewDeletePlanOK() *DeletePlanOK {
	return &DeletePlanOK{}
}

/*
DeletePlanOK describes a response with status code 200, with default header values.

Successful response.
*/
type DeletePlanOK struct {
	Payload *DeletePlanOKBody
}

// IsSuccess returns true when this delete plan o k response has a 2xx status code
func (o *DeletePlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete plan o k response has a 3xx status code
func (o *DeletePlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete plan o k response has a 4xx status code
func (o *DeletePlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete plan o k response has a 5xx status code
func (o *DeletePlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete plan o k response a status code equal to that given
func (o *DeletePlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete plan o k response
func (o *DeletePlanOK) Code() int {
	return 200
}

func (o *DeletePlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanOK %s", 200, payload)
}

func (o *DeletePlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanOK %s", 200, payload)
}

func (o *DeletePlanOK) GetPayload() *DeletePlanOKBody {
	return o.Payload
}

func (o *DeletePlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeletePlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlanBadRequest creates a DeletePlanBadRequest with default headers values
func NewDeletePlanBadRequest() *DeletePlanBadRequest {
	return &DeletePlanBadRequest{}
}

/*
DeletePlanBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type DeletePlanBadRequest struct {
	Payload *DeletePlanBadRequestBody
}

// IsSuccess returns true when this delete plan bad request response has a 2xx status code
func (o *DeletePlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete plan bad request response has a 3xx status code
func (o *DeletePlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete plan bad request response has a 4xx status code
func (o *DeletePlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete plan bad request response has a 5xx status code
func (o *DeletePlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete plan bad request response a status code equal to that given
func (o *DeletePlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete plan bad request response
func (o *DeletePlanBadRequest) Code() int {
	return 400
}

func (o *DeletePlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanBadRequest %s", 400, payload)
}

func (o *DeletePlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanBadRequest %s", 400, payload)
}

func (o *DeletePlanBadRequest) GetPayload() *DeletePlanBadRequestBody {
	return o.Payload
}

func (o *DeletePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeletePlanBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlanNotFound creates a DeletePlanNotFound with default headers values
func NewDeletePlanNotFound() *DeletePlanNotFound {
	return &DeletePlanNotFound{}
}

/*
DeletePlanNotFound describes a response with status code 404, with default header values.

Not found.
*/
type DeletePlanNotFound struct {
	Payload *DeletePlanNotFoundBody
}

// IsSuccess returns true when this delete plan not found response has a 2xx status code
func (o *DeletePlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete plan not found response has a 3xx status code
func (o *DeletePlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete plan not found response has a 4xx status code
func (o *DeletePlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete plan not found response has a 5xx status code
func (o *DeletePlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete plan not found response a status code equal to that given
func (o *DeletePlanNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete plan not found response
func (o *DeletePlanNotFound) Code() int {
	return 404
}

func (o *DeletePlanNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanNotFound %s", 404, payload)
}

func (o *DeletePlanNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanNotFound %s", 404, payload)
}

func (o *DeletePlanNotFound) GetPayload() *DeletePlanNotFoundBody {
	return o.Payload
}

func (o *DeletePlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeletePlanNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePlanBadGateway creates a DeletePlanBadGateway with default headers values
func NewDeletePlanBadGateway() *DeletePlanBadGateway {
	return &DeletePlanBadGateway{}
}

/*
DeletePlanBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type DeletePlanBadGateway struct {
	Payload *DeletePlanBadGatewayBody
}

// IsSuccess returns true when this delete plan bad gateway response has a 2xx status code
func (o *DeletePlanBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete plan bad gateway response has a 3xx status code
func (o *DeletePlanBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete plan bad gateway response has a 4xx status code
func (o *DeletePlanBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete plan bad gateway response has a 5xx status code
func (o *DeletePlanBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this delete plan bad gateway response a status code equal to that given
func (o *DeletePlanBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the delete plan bad gateway response
func (o *DeletePlanBadGateway) Code() int {
	return 502
}

func (o *DeletePlanBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanBadGateway %s", 502, payload)
}

func (o *DeletePlanBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /rbs/v1/plans/{id}][%d] deletePlanBadGateway %s", 502, payload)
}

func (o *DeletePlanBadGateway) GetPayload() *DeletePlanBadGatewayBody {
	return o.Payload
}

func (o *DeletePlanBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeletePlanBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeletePlanBadGatewayBody delete plan bad gateway body
swagger:model DeletePlanBadGatewayBody
*/
type DeletePlanBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete plan bad gateway body
func (o *DeletePlanBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete plan bad gateway body based on context it is used
func (o *DeletePlanBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeletePlanBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeletePlanBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res DeletePlanBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeletePlanBadRequestBody delete plan bad request body
swagger:model DeletePlanBadRequestBody
*/
type DeletePlanBadRequestBody struct {

	// details
	Details []*DeletePlanBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete plan bad request body
func (o *DeletePlanBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeletePlanBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete plan bad request body based on the context it is used
func (o *DeletePlanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeletePlanBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deletePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deletePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeletePlanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeletePlanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeletePlanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeletePlanBadRequestBodyDetailsItems0 delete plan bad request body details items0
swagger:model DeletePlanBadRequestBodyDetailsItems0
*/
type DeletePlanBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete plan bad request body details items0
func (o *DeletePlanBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete plan bad request body details items0 based on context it is used
func (o *DeletePlanBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeletePlanBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeletePlanBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeletePlanBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeletePlanNotFoundBody delete plan not found body
swagger:model DeletePlanNotFoundBody
*/
type DeletePlanNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete plan not found body
func (o *DeletePlanNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete plan not found body based on context it is used
func (o *DeletePlanNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeletePlanNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeletePlanNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeletePlanNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeletePlanOKBody deletePlanResponse
swagger:model DeletePlanOKBody
*/
type DeletePlanOKBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete plan o k body
func (o *DeletePlanOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete plan o k body based on context it is used
func (o *DeletePlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeletePlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeletePlanOKBody) UnmarshalBinary(b []byte) error {
	var res DeletePlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
