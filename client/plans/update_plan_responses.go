// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePlanReader is a Reader for the UpdatePlan structure.
type UpdatePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewUpdatePlanBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /rbs/v1/plans/{id}] updatePlan", response, response.Code())
	}
}

// NewUpdatePlanOK creates a UpdatePlanOK with default headers values
func NewUpdatePlanOK() *UpdatePlanOK {
	return &UpdatePlanOK{}
}

/*
UpdatePlanOK describes a response with status code 200, with default header values.

Successful response.
*/
type UpdatePlanOK struct {
	Payload *UpdatePlanOKBody
}

// IsSuccess returns true when this update plan o k response has a 2xx status code
func (o *UpdatePlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update plan o k response has a 3xx status code
func (o *UpdatePlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plan o k response has a 4xx status code
func (o *UpdatePlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plan o k response has a 5xx status code
func (o *UpdatePlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update plan o k response a status code equal to that given
func (o *UpdatePlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update plan o k response
func (o *UpdatePlanOK) Code() int {
	return 200
}

func (o *UpdatePlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanOK %s", 200, payload)
}

func (o *UpdatePlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanOK %s", 200, payload)
}

func (o *UpdatePlanOK) GetPayload() *UpdatePlanOKBody {
	return o.Payload
}

func (o *UpdatePlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlanBadRequest creates a UpdatePlanBadRequest with default headers values
func NewUpdatePlanBadRequest() *UpdatePlanBadRequest {
	return &UpdatePlanBadRequest{}
}

/*
UpdatePlanBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type UpdatePlanBadRequest struct {
	Payload *UpdatePlanBadRequestBody
}

// IsSuccess returns true when this update plan bad request response has a 2xx status code
func (o *UpdatePlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plan bad request response has a 3xx status code
func (o *UpdatePlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plan bad request response has a 4xx status code
func (o *UpdatePlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update plan bad request response has a 5xx status code
func (o *UpdatePlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update plan bad request response a status code equal to that given
func (o *UpdatePlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update plan bad request response
func (o *UpdatePlanBadRequest) Code() int {
	return 400
}

func (o *UpdatePlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanBadRequest %s", 400, payload)
}

func (o *UpdatePlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanBadRequest %s", 400, payload)
}

func (o *UpdatePlanBadRequest) GetPayload() *UpdatePlanBadRequestBody {
	return o.Payload
}

func (o *UpdatePlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePlanBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlanBadGateway creates a UpdatePlanBadGateway with default headers values
func NewUpdatePlanBadGateway() *UpdatePlanBadGateway {
	return &UpdatePlanBadGateway{}
}

/*
UpdatePlanBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type UpdatePlanBadGateway struct {
	Payload *UpdatePlanBadGatewayBody
}

// IsSuccess returns true when this update plan bad gateway response has a 2xx status code
func (o *UpdatePlanBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plan bad gateway response has a 3xx status code
func (o *UpdatePlanBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plan bad gateway response has a 4xx status code
func (o *UpdatePlanBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plan bad gateway response has a 5xx status code
func (o *UpdatePlanBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this update plan bad gateway response a status code equal to that given
func (o *UpdatePlanBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the update plan bad gateway response
func (o *UpdatePlanBadGateway) Code() int {
	return 502
}

func (o *UpdatePlanBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanBadGateway %s", 502, payload)
}

func (o *UpdatePlanBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/plans/{id}][%d] updatePlanBadGateway %s", 502, payload)
}

func (o *UpdatePlanBadGateway) GetPayload() *UpdatePlanBadGatewayBody {
	return o.Payload
}

func (o *UpdatePlanBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdatePlanBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdatePlanBadGatewayBody update plan bad gateway body
swagger:model UpdatePlanBadGatewayBody
*/
type UpdatePlanBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update plan bad gateway body
func (o *UpdatePlanBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan bad gateway body based on context it is used
func (o *UpdatePlanBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res UpdatePlanBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanBadRequestBody update plan bad request body
swagger:model UpdatePlanBadRequestBody
*/
type UpdatePlanBadRequestBody struct {

	// details
	Details []*UpdatePlanBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update plan bad request body
func (o *UpdatePlanBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update plan bad request body based on the context it is used
func (o *UpdatePlanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updatePlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdatePlanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanBadRequestBodyDetailsItems0 update plan bad request body details items0
swagger:model UpdatePlanBadRequestBodyDetailsItems0
*/
type UpdatePlanBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this update plan bad request body details items0
func (o *UpdatePlanBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan bad request body details items0 based on context it is used
func (o *UpdatePlanBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePlanBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanBody update plan body
// Example: {"orderInformation":{"amountDetails":{"billingAmount":"11","currency":"USD","setupFee":"2"}},"planInformation":{"billingCycles":{"total":"11"},"billingPeriod":{"length":"2","unit":"W"},"description":"Updated Gold Plan","name":"Gold Plan NA"},"processingInformation":{"subscriptionBillingOptions":{"applyTo":"ALL"}}}
swagger:model UpdatePlanBody
*/
type UpdatePlanBody struct {

	// order information
	OrderInformation *UpdatePlanParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// plan information
	PlanInformation *UpdatePlanParamsBodyPlanInformation `json:"planInformation,omitempty"`

	// processing information
	ProcessingInformation *UpdatePlanParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this update plan body
func (o *UpdatePlanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plan body based on the context it is used
func (o *UpdatePlanBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanBody) UnmarshalBinary(b []byte) error {
	var res UpdatePlanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanOKBody updatePlanResponse
// Example: {"_links":{"self":{"href":"rbs/v1/plans/4963015972176007901546","method":"GET"}},"id":"4963015972176007901546","planInformation":{"code":"PLAN1","status":"ACTIVE"},"status":"COMPLETED","submitTimeUtc":"2020-06-30T19:48:06Z"}
swagger:model UpdatePlanOKBody
*/
type UpdatePlanOKBody struct {

	// links
	Links *UpdatePlanOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// plan information
	PlanInformation *UpdatePlanOKBodyPlanInformation `json:"planInformation,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update plan o k body
func (o *UpdatePlanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePlanOKBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plan o k body based on the context it is used
func (o *UpdatePlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanOKBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanOKBody) UnmarshalBinary(b []byte) error {
	var res UpdatePlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanOKBodyLinks update plan o k body links
swagger:model UpdatePlanOKBodyLinks
*/
type UpdatePlanOKBodyLinks struct {

	// self
	Self *UpdatePlanOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this update plan o k body links
func (o *UpdatePlanOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plan o k body links based on the context it is used
func (o *UpdatePlanOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res UpdatePlanOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanOKBodyLinksSelf update plan o k body links self
swagger:model UpdatePlanOKBodyLinksSelf
*/
type UpdatePlanOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this update plan o k body links self
func (o *UpdatePlanOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan o k body links self based on context it is used
func (o *UpdatePlanOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdatePlanOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanOKBodyPlanInformation update plan o k body plan information
swagger:model UpdatePlanOKBodyPlanInformation
*/
type UpdatePlanOKBodyPlanInformation struct {

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE`
	//  - `INACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this update plan o k body plan information
func (o *UpdatePlanOKBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanOKBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanOK"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update plan o k body plan information based on context it is used
func (o *UpdatePlanOKBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanOKBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanOKBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePlanOKBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyOrderInformation update plan params body order information
swagger:model UpdatePlanParamsBodyOrderInformation
*/
type UpdatePlanParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *UpdatePlanParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this update plan params body order information
func (o *UpdatePlanParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plan params body order information based on the context it is used
func (o *UpdatePlanParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyOrderInformationAmountDetails update plan params body order information amount details
swagger:model UpdatePlanParamsBodyOrderInformationAmountDetails
*/
type UpdatePlanParamsBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this update plan params body order information amount details
func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update plan params body order information amount details based on context it is used
func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyPlanInformation update plan params body plan information
swagger:model UpdatePlanParamsBodyPlanInformation
*/
type UpdatePlanParamsBodyPlanInformation struct {

	// billing cycles
	BillingCycles *UpdatePlanParamsBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	BillingPeriod *UpdatePlanParamsBodyPlanInformationBillingPeriod `json:"billingPeriod,omitempty"`

	// Plan code is an optional field, If not provided system generates and assign one
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan description
	//
	// Max Length: 255
	Description string `json:"description,omitempty"`

	// Plan name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// Updating to `DRAFT` is not allowed from `ACTIVE` and `INACTIVE` status.
	//
	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE`
	//  - `INACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this update plan params body plan information
func (o *UpdatePlanParamsBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) validateBillingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"planInformation"+"."+"description", "body", o.Description, 255); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePlanRequest"+"."+"planInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update plan params body plan information based on the context it is used
func (o *UpdatePlanParamsBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePlanParamsBodyPlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if swag.IsZero(o.BillingPeriod) { // not required
			return nil
		}

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyPlanInformationBillingCycles Number of times customer is going to be billed
//
swagger:model UpdatePlanParamsBodyPlanInformationBillingCycles
*/
type UpdatePlanParamsBodyPlanInformationBillingCycles struct {

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this update plan params body plan information billing cycles
func (o *UpdatePlanParamsBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan params body plan information billing cycles based on context it is used
func (o *UpdatePlanParamsBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyPlanInformationBillingPeriod Billing Frequency
//
swagger:model UpdatePlanParamsBodyPlanInformationBillingPeriod
*/
type UpdatePlanParamsBodyPlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this update plan params body plan information billing period
func (o *UpdatePlanParamsBodyPlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan params body plan information billing period based on context it is used
func (o *UpdatePlanParamsBodyPlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyPlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyPlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyProcessingInformation update plan params body processing information
swagger:model UpdatePlanParamsBodyProcessingInformation
*/
type UpdatePlanParamsBodyProcessingInformation struct {

	// subscription billing options
	SubscriptionBillingOptions *UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions `json:"subscriptionBillingOptions,omitempty"`
}

// Validate validates this update plan params body processing information
func (o *UpdatePlanParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscriptionBillingOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyProcessingInformation) validateSubscriptionBillingOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionBillingOptions) { // not required
		return nil
	}

	if o.SubscriptionBillingOptions != nil {
		if err := o.SubscriptionBillingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "processingInformation" + "." + "subscriptionBillingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "processingInformation" + "." + "subscriptionBillingOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plan params body processing information based on the context it is used
func (o *UpdatePlanParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubscriptionBillingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlanParamsBodyProcessingInformation) contextValidateSubscriptionBillingOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionBillingOptions != nil {

		if swag.IsZero(o.SubscriptionBillingOptions) { // not required
			return nil
		}

		if err := o.SubscriptionBillingOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePlanRequest" + "." + "processingInformation" + "." + "subscriptionBillingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatePlanRequest" + "." + "processingInformation" + "." + "subscriptionBillingOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions update plan params body processing information subscription billing options
swagger:model UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions
*/
type UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions struct {

	// Valid Values:
	// - `ALL` - Change applied to all Subscriptions (Existing + New)
	// - `NEW` - Change applied to New Subsciptions only
	//
	ApplyTo string `json:"applyTo,omitempty"`
}

// Validate validates this update plan params body processing information subscription billing options
func (o *UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plan params body processing information subscription billing options based on context it is used
func (o *UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions) UnmarshalBinary(b []byte) error {
	var res UpdatePlanParamsBodyProcessingInformationSubscriptionBillingOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
