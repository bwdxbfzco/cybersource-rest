// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPlanReader is a Reader for the GetPlan structure.
type GetPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetPlanBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /rbs/v1/plans/{id}] getPlan", response, response.Code())
	}
}

// NewGetPlanOK creates a GetPlanOK with default headers values
func NewGetPlanOK() *GetPlanOK {
	return &GetPlanOK{}
}

/*
GetPlanOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetPlanOK struct {
	Payload *GetPlanOKBody
}

// IsSuccess returns true when this get plan o k response has a 2xx status code
func (o *GetPlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get plan o k response has a 3xx status code
func (o *GetPlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan o k response has a 4xx status code
func (o *GetPlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get plan o k response has a 5xx status code
func (o *GetPlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan o k response a status code equal to that given
func (o *GetPlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get plan o k response
func (o *GetPlanOK) Code() int {
	return 200
}

func (o *GetPlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanOK %s", 200, payload)
}

func (o *GetPlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanOK %s", 200, payload)
}

func (o *GetPlanOK) GetPayload() *GetPlanOKBody {
	return o.Payload
}

func (o *GetPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanBadRequest creates a GetPlanBadRequest with default headers values
func NewGetPlanBadRequest() *GetPlanBadRequest {
	return &GetPlanBadRequest{}
}

/*
GetPlanBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type GetPlanBadRequest struct {
	Payload *GetPlanBadRequestBody
}

// IsSuccess returns true when this get plan bad request response has a 2xx status code
func (o *GetPlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan bad request response has a 3xx status code
func (o *GetPlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan bad request response has a 4xx status code
func (o *GetPlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan bad request response has a 5xx status code
func (o *GetPlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan bad request response a status code equal to that given
func (o *GetPlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get plan bad request response
func (o *GetPlanBadRequest) Code() int {
	return 400
}

func (o *GetPlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanBadRequest %s", 400, payload)
}

func (o *GetPlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanBadRequest %s", 400, payload)
}

func (o *GetPlanBadRequest) GetPayload() *GetPlanBadRequestBody {
	return o.Payload
}

func (o *GetPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPlanBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanNotFound creates a GetPlanNotFound with default headers values
func NewGetPlanNotFound() *GetPlanNotFound {
	return &GetPlanNotFound{}
}

/*
GetPlanNotFound describes a response with status code 404, with default header values.

Not found.
*/
type GetPlanNotFound struct {
	Payload *GetPlanNotFoundBody
}

// IsSuccess returns true when this get plan not found response has a 2xx status code
func (o *GetPlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan not found response has a 3xx status code
func (o *GetPlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan not found response has a 4xx status code
func (o *GetPlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get plan not found response has a 5xx status code
func (o *GetPlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get plan not found response a status code equal to that given
func (o *GetPlanNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get plan not found response
func (o *GetPlanNotFound) Code() int {
	return 404
}

func (o *GetPlanNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanNotFound %s", 404, payload)
}

func (o *GetPlanNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanNotFound %s", 404, payload)
}

func (o *GetPlanNotFound) GetPayload() *GetPlanNotFoundBody {
	return o.Payload
}

func (o *GetPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPlanNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanBadGateway creates a GetPlanBadGateway with default headers values
func NewGetPlanBadGateway() *GetPlanBadGateway {
	return &GetPlanBadGateway{}
}

/*
GetPlanBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetPlanBadGateway struct {
	Payload *GetPlanBadGatewayBody
}

// IsSuccess returns true when this get plan bad gateway response has a 2xx status code
func (o *GetPlanBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get plan bad gateway response has a 3xx status code
func (o *GetPlanBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get plan bad gateway response has a 4xx status code
func (o *GetPlanBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get plan bad gateway response has a 5xx status code
func (o *GetPlanBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get plan bad gateway response a status code equal to that given
func (o *GetPlanBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get plan bad gateway response
func (o *GetPlanBadGateway) Code() int {
	return 502
}

func (o *GetPlanBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanBadGateway %s", 502, payload)
}

func (o *GetPlanBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/plans/{id}][%d] getPlanBadGateway %s", 502, payload)
}

func (o *GetPlanBadGateway) GetPayload() *GetPlanBadGatewayBody {
	return o.Payload
}

func (o *GetPlanBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPlanBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetPlanBadGatewayBody get plan bad gateway body
swagger:model GetPlanBadGatewayBody
*/
type GetPlanBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get plan bad gateway body
func (o *GetPlanBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan bad gateway body based on context it is used
func (o *GetPlanBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetPlanBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanBadRequestBody get plan bad request body
swagger:model GetPlanBadRequestBody
*/
type GetPlanBadRequestBody struct {

	// details
	Details []*GetPlanBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get plan bad request body
func (o *GetPlanBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get plan bad request body based on the context it is used
func (o *GetPlanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPlanBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetPlanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanBadRequestBodyDetailsItems0 get plan bad request body details items0
swagger:model GetPlanBadRequestBodyDetailsItems0
*/
type GetPlanBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get plan bad request body details items0
func (o *GetPlanBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan bad request body details items0 based on context it is used
func (o *GetPlanBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPlanBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanNotFoundBody get plan not found body
swagger:model GetPlanNotFoundBody
*/
type GetPlanNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get plan not found body
func (o *GetPlanNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan not found body based on context it is used
func (o *GetPlanNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetPlanNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBody getPlanResponse
swagger:model GetPlanOKBody
*/
type GetPlanOKBody struct {

	// links
	Links *GetPlanOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *GetPlanOKBodyOrderInformation `json:"orderInformation,omitempty"`

	// plan information
	PlanInformation *GetPlanOKBodyPlanInformation `json:"planInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get plan o k body
func (o *GetPlanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get plan o k body based on the context it is used
func (o *GetPlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBody) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyLinks get plan o k body links
swagger:model GetPlanOKBodyLinks
*/
type GetPlanOKBodyLinks struct {

	// self
	Self *GetPlanOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get plan o k body links
func (o *GetPlanOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get plan o k body links based on the context it is used
func (o *GetPlanOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyLinksSelf get plan o k body links self
swagger:model GetPlanOKBodyLinksSelf
*/
type GetPlanOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get plan o k body links self
func (o *GetPlanOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan o k body links self based on context it is used
func (o *GetPlanOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyOrderInformation get plan o k body order information
swagger:model GetPlanOKBodyOrderInformation
*/
type GetPlanOKBodyOrderInformation struct {

	// amount details
	AmountDetails *GetPlanOKBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this get plan o k body order information
func (o *GetPlanOKBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get plan o k body order information based on the context it is used
func (o *GetPlanOKBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyOrderInformationAmountDetails get plan o k body order information amount details
swagger:model GetPlanOKBodyOrderInformationAmountDetails
*/
type GetPlanOKBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this get plan o k body order information amount details
func (o *GetPlanOKBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get plan o k body order information amount details based on context it is used
func (o *GetPlanOKBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyPlanInformation get plan o k body plan information
swagger:model GetPlanOKBodyPlanInformation
*/
type GetPlanOKBodyPlanInformation struct {

	// billing cycles
	BillingCycles *GetPlanOKBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	BillingPeriod *GetPlanOKBodyPlanInformationBillingPeriod `json:"billingPeriod,omitempty"`

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan description
	//
	// Max Length: 255
	Description string `json:"description,omitempty"`

	// Plan name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// Plan Status:
	//  - `DRAFT`
	//  - `ACTIVE`
	//  - `INACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get plan o k body plan information
func (o *GetPlanOKBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBodyPlanInformation) validateBillingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBodyPlanInformation) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"planInformation"+"."+"description", "body", o.Description, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBodyPlanInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("getPlanOK"+"."+"planInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get plan o k body plan information based on the context it is used
func (o *GetPlanOKBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetPlanOKBodyPlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if swag.IsZero(o.BillingPeriod) { // not required
			return nil
		}

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyPlanInformationBillingCycles get plan o k body plan information billing cycles
swagger:model GetPlanOKBodyPlanInformationBillingCycles
*/
type GetPlanOKBodyPlanInformationBillingCycles struct {

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this get plan o k body plan information billing cycles
func (o *GetPlanOKBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan o k body plan information billing cycles based on context it is used
func (o *GetPlanOKBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPlanOKBodyPlanInformationBillingPeriod Billing Frequency
//
swagger:model GetPlanOKBodyPlanInformationBillingPeriod
*/
type GetPlanOKBodyPlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this get plan o k body plan information billing period
func (o *GetPlanOKBodyPlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get plan o k body plan information billing period based on context it is used
func (o *GetPlanOKBodyPlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBodyPlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBodyPlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
