// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetBatchReportReader is a Reader for the GetBatchReport structure.
type GetBatchReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBatchReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBatchReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetBatchReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /accountupdater/v1/batches/{batchId}/report] getBatchReport", response, response.Code())
	}
}

// NewGetBatchReportOK creates a GetBatchReportOK with default headers values
func NewGetBatchReportOK() *GetBatchReportOK {
	return &GetBatchReportOK{}
}

/*
GetBatchReportOK describes a response with status code 200, with default header values.

The report for a batch.
*/
type GetBatchReportOK struct {
	Payload *GetBatchReportOKBody
}

// IsSuccess returns true when this get batch report o k response has a 2xx status code
func (o *GetBatchReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get batch report o k response has a 3xx status code
func (o *GetBatchReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch report o k response has a 4xx status code
func (o *GetBatchReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get batch report o k response has a 5xx status code
func (o *GetBatchReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch report o k response a status code equal to that given
func (o *GetBatchReportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get batch report o k response
func (o *GetBatchReportOK) Code() int {
	return 200
}

func (o *GetBatchReportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/report][%d] getBatchReportOK %s", 200, payload)
}

func (o *GetBatchReportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/report][%d] getBatchReportOK %s", 200, payload)
}

func (o *GetBatchReportOK) GetPayload() *GetBatchReportOKBody {
	return o.Payload
}

func (o *GetBatchReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchReportOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchReportForbidden creates a GetBatchReportForbidden with default headers values
func NewGetBatchReportForbidden() *GetBatchReportForbidden {
	return &GetBatchReportForbidden{}
}

/*
GetBatchReportForbidden describes a response with status code 403, with default header values.

Unable to perform action for supplied batch ID/merchant.
*/
type GetBatchReportForbidden struct {
	Payload *GetBatchReportForbiddenBody
}

// IsSuccess returns true when this get batch report forbidden response has a 2xx status code
func (o *GetBatchReportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch report forbidden response has a 3xx status code
func (o *GetBatchReportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch report forbidden response has a 4xx status code
func (o *GetBatchReportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch report forbidden response has a 5xx status code
func (o *GetBatchReportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch report forbidden response a status code equal to that given
func (o *GetBatchReportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get batch report forbidden response
func (o *GetBatchReportForbidden) Code() int {
	return 403
}

func (o *GetBatchReportForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/report][%d] getBatchReportForbidden %s", 403, payload)
}

func (o *GetBatchReportForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/report][%d] getBatchReportForbidden %s", 403, payload)
}

func (o *GetBatchReportForbidden) GetPayload() *GetBatchReportForbiddenBody {
	return o.Payload
}

func (o *GetBatchReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchReportForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetBatchReportForbiddenBody get batch report forbidden body
swagger:model GetBatchReportForbiddenBody
*/
type GetBatchReportForbiddenBody struct {

	// links
	Links *GetBatchReportForbiddenBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*GetBatchReportForbiddenBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this get batch report forbidden body
func (o *GetBatchReportForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportForbiddenBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportForbidden" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportForbidden" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportForbiddenBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchReportForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchReportForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batch report forbidden body based on the context it is used
func (o *GetBatchReportForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportForbiddenBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportForbidden" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportForbidden" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportForbiddenBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchReportForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchReportForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetBatchReportForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportForbiddenBodyFieldsItems0 get batch report forbidden body fields items0
swagger:model GetBatchReportForbiddenBodyFieldsItems0
*/
type GetBatchReportForbiddenBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this get batch report forbidden body fields items0
func (o *GetBatchReportForbiddenBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch report forbidden body fields items0 based on context it is used
func (o *GetBatchReportForbiddenBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchReportForbiddenBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportForbiddenBodyLinks get batch report forbidden body links
swagger:model GetBatchReportForbiddenBodyLinks
*/
type GetBatchReportForbiddenBodyLinks struct {

	// self
	Self *GetBatchReportForbiddenBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get batch report forbidden body links
func (o *GetBatchReportForbiddenBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportForbiddenBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportForbidden" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportForbidden" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch report forbidden body links based on the context it is used
func (o *GetBatchReportForbiddenBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportForbiddenBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportForbidden" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportForbidden" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetBatchReportForbiddenBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportForbiddenBodyLinksSelf get batch report forbidden body links self
swagger:model GetBatchReportForbiddenBodyLinksSelf
*/
type GetBatchReportForbiddenBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this get batch report forbidden body links self
func (o *GetBatchReportForbiddenBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch report forbidden body links self based on context it is used
func (o *GetBatchReportForbiddenBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportForbiddenBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetBatchReportForbiddenBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBody get batch report o k body
swagger:model GetBatchReportOKBody
*/
type GetBatchReportOKBody struct {

	// batch ca endpoints
	// Example: VISA,MASTERCARD
	BatchCaEndpoints string `json:"batchCaEndpoints,omitempty"`

	// ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
	// Example: 2018-05-22T14.38.57Z
	BatchCreatedDate string `json:"batchCreatedDate,omitempty"`

	// Unique identification number assigned to the submitted request.
	// Example: 16188390061150001062041064
	BatchID string `json:"batchId,omitempty"`

	// Valid Values:
	//   * SCHEDULER
	//   * TOKEN_API
	//   * CREDIT_CARD_FILE_UPLOAD
	//   * AMEX_REGSITRY
	//   * AMEX_REGISTRY_API
	//   * AMEX_MAINTENANCE
	//
	BatchSource string `json:"batchSource,omitempty"`

	// billing
	Billing *GetBatchReportOKBodyBilling `json:"billing,omitempty"`

	// Reference used by merchant to identify batch.
	// Example: TC50171_3
	// Max Length: 255
	MerchantReference string `json:"merchantReference,omitempty"`

	// records
	Records []*GetBatchReportOKBodyRecordsItems0 `json:"records"`

	// ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
	// Example: 2018-05-22T14.38.57Z
	ReportCreatedDate string `json:"reportCreatedDate,omitempty"`

	// totals
	Totals *GetBatchReportOKBodyTotals `json:"totals,omitempty"`

	// version
	// Example: 1.0
	Version string `json:"version,omitempty"`
}

// Validate validates this get batch report o k body
func (o *GetBatchReportOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantReference(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBody) validateBilling(formats strfmt.Registry) error {
	if swag.IsZero(o.Billing) { // not required
		return nil
	}

	if o.Billing != nil {
		if err := o.Billing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportOK" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportOK" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportOKBody) validateMerchantReference(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantReference) { // not required
		return nil
	}

	if err := validate.MaxLength("getBatchReportOK"+"."+"merchantReference", "body", o.MerchantReference, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBody) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(o.Records) { // not required
		return nil
	}

	for i := 0; i < len(o.Records); i++ {
		if swag.IsZero(o.Records[i]) { // not required
			continue
		}

		if o.Records[i] != nil {
			if err := o.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchReportOK" + "." + "records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchReportOK" + "." + "records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBatchReportOKBody) validateTotals(formats strfmt.Registry) error {
	if swag.IsZero(o.Totals) { // not required
		return nil
	}

	if o.Totals != nil {
		if err := o.Totals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportOK" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportOK" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch report o k body based on the context it is used
func (o *GetBatchReportOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBilling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBody) contextValidateBilling(ctx context.Context, formats strfmt.Registry) error {

	if o.Billing != nil {

		if swag.IsZero(o.Billing) { // not required
			return nil
		}

		if err := o.Billing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportOK" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportOK" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportOKBody) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Records); i++ {

		if o.Records[i] != nil {

			if swag.IsZero(o.Records[i]) { // not required
				return nil
			}

			if err := o.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchReportOK" + "." + "records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchReportOK" + "." + "records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBatchReportOKBody) contextValidateTotals(ctx context.Context, formats strfmt.Registry) error {

	if o.Totals != nil {

		if swag.IsZero(o.Totals) { // not required
			return nil
		}

		if err := o.Totals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchReportOK" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchReportOK" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBody) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyBilling get batch report o k body billing
swagger:model GetBatchReportOKBodyBilling
*/
type GetBatchReportOKBodyBilling struct {

	// acl
	// Example: 1
	ACL int64 `json:"acl,omitempty"`

	// cch
	// Example: 1
	Cch int64 `json:"cch,omitempty"`

	// nan
	// Example: 1
	Nan int64 `json:"nan,omitempty"`

	// ned
	// Example: 1
	Ned int64 `json:"ned,omitempty"`
}

// Validate validates this get batch report o k body billing
func (o *GetBatchReportOKBodyBilling) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch report o k body billing based on context it is used
func (o *GetBatchReportOKBodyBilling) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyBilling) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyBilling) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyBilling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyRecordsItems0 get batch report o k body records items0
swagger:model GetBatchReportOKBodyRecordsItems0
*/
type GetBatchReportOKBodyRecordsItems0 struct {

	// id
	// Example: 10000000
	ID string `json:"id,omitempty"`

	// response record
	ResponseRecord *GetBatchReportOKBodyRecordsItems0ResponseRecord `json:"responseRecord,omitempty"`

	// source record
	SourceRecord *GetBatchReportOKBodyRecordsItems0SourceRecord `json:"sourceRecord,omitempty"`
}

// Validate validates this get batch report o k body records items0
func (o *GetBatchReportOKBodyRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponseRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceRecord(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0) validateResponseRecord(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseRecord) { // not required
		return nil
	}

	if o.ResponseRecord != nil {
		if err := o.ResponseRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responseRecord")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responseRecord")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0) validateSourceRecord(formats strfmt.Registry) error {
	if swag.IsZero(o.SourceRecord) { // not required
		return nil
	}

	if o.SourceRecord != nil {
		if err := o.SourceRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRecord")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceRecord")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch report o k body records items0 based on the context it is used
func (o *GetBatchReportOKBodyRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponseRecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSourceRecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0) contextValidateResponseRecord(ctx context.Context, formats strfmt.Registry) error {

	if o.ResponseRecord != nil {

		if swag.IsZero(o.ResponseRecord) { // not required
			return nil
		}

		if err := o.ResponseRecord.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responseRecord")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responseRecord")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0) contextValidateSourceRecord(ctx context.Context, formats strfmt.Registry) error {

	if o.SourceRecord != nil {

		if swag.IsZero(o.SourceRecord) { // not required
			return nil
		}

		if err := o.SourceRecord.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceRecord")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceRecord")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyRecordsItems0ResponseRecord get batch report o k body records items0 response record
swagger:model GetBatchReportOKBodyRecordsItems0ResponseRecord
*/
type GetBatchReportOKBodyRecordsItems0ResponseRecord struct {

	// additional updates
	AdditionalUpdates []*GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0 `json:"additionalUpdates"`

	// card expiry month
	// Example: 12
	// Max Length: 2
	// Min Length: 2
	CardExpiryMonth string `json:"cardExpiryMonth,omitempty"`

	// card expiry year
	// Example: 2018
	// Max Length: 4
	// Min Length: 4
	CardExpiryYear string `json:"cardExpiryYear,omitempty"`

	// card number
	// Example: 511111XXXXXX6814
	CardNumber string `json:"cardNumber,omitempty"`

	// card type
	// Example: 002
	CardType string `json:"cardType,omitempty"`

	// Valid Values:
	//   * true
	//   * false
	//
	InstrumentIdentifierCreated string `json:"instrumentIdentifierCreated,omitempty"`

	// instrument identifier Id
	// Example: 7030000000000116236
	// Max Length: 32
	// Min Length: 12
	InstrumentIdentifierID string `json:"instrumentIdentifierId,omitempty"`

	// reason
	// Example: 800
	Reason string `json:"reason,omitempty"`

	// Valid Values:
	//   * NAN
	//   * NED
	//   * ACL
	//   * CCH
	//   * CUR
	//   * NUP
	//   * UNA
	//   * ERR
	//   * DEC
	//
	Response string `json:"response,omitempty"`

	// token
	// Example: C064DE56200B0DB0E053AF598E0A52AA
	// Max Length: 32
	// Min Length: 1
	Token string `json:"token,omitempty"`
}

// Validate validates this get batch report o k body records items0 response record
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdditionalUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardExpiryMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardExpiryYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifierID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) validateAdditionalUpdates(formats strfmt.Registry) error {
	if swag.IsZero(o.AdditionalUpdates) { // not required
		return nil
	}

	for i := 0; i < len(o.AdditionalUpdates); i++ {
		if swag.IsZero(o.AdditionalUpdates[i]) { // not required
			continue
		}

		if o.AdditionalUpdates[i] != nil {
			if err := o.AdditionalUpdates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responseRecord" + "." + "additionalUpdates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("responseRecord" + "." + "additionalUpdates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) validateCardExpiryMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.CardExpiryMonth) { // not required
		return nil
	}

	if err := validate.MinLength("responseRecord"+"."+"cardExpiryMonth", "body", o.CardExpiryMonth, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("responseRecord"+"."+"cardExpiryMonth", "body", o.CardExpiryMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) validateCardExpiryYear(formats strfmt.Registry) error {
	if swag.IsZero(o.CardExpiryYear) { // not required
		return nil
	}

	if err := validate.MinLength("responseRecord"+"."+"cardExpiryYear", "body", o.CardExpiryYear, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("responseRecord"+"."+"cardExpiryYear", "body", o.CardExpiryYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) validateInstrumentIdentifierID(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifierID) { // not required
		return nil
	}

	if err := validate.MinLength("responseRecord"+"."+"instrumentIdentifierId", "body", o.InstrumentIdentifierID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("responseRecord"+"."+"instrumentIdentifierId", "body", o.InstrumentIdentifierID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(o.Token) { // not required
		return nil
	}

	if err := validate.MinLength("responseRecord"+"."+"token", "body", o.Token, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("responseRecord"+"."+"token", "body", o.Token, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get batch report o k body records items0 response record based on the context it is used
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAdditionalUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) contextValidateAdditionalUpdates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AdditionalUpdates); i++ {

		if o.AdditionalUpdates[i] != nil {

			if swag.IsZero(o.AdditionalUpdates[i]) { // not required
				return nil
			}

			if err := o.AdditionalUpdates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responseRecord" + "." + "additionalUpdates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("responseRecord" + "." + "additionalUpdates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecord) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyRecordsItems0ResponseRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0 get batch report o k body records items0 response record additional updates items0
swagger:model GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0
*/
type GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0 struct {

	// creator
	// Example: mid
	Creator string `json:"creator,omitempty"`

	// customer Id
	// Example: C064DE56213D0DB0E053AF598E0A52AA
	// Max Length: 32
	// Min Length: 1
	CustomerID string `json:"customerId,omitempty"`

	// message
	// Example: This Payment Instrument contains the source card number, which is now closed. If required, you can update manually or through the AU REST API.
	Message string `json:"message,omitempty"`

	// payment instrument Id
	// Example: C064FBFEB64060AAE053AF598E0A3EE6
	// Max Length: 32
	// Min Length: 1
	PaymentInstrumentID string `json:"paymentInstrumentId,omitempty"`

	// Valid Values:
	//   * ACTIVE
	//   * CLOSED
	//
	State string `json:"state,omitempty"`
}

// Validate validates this get batch report o k body records items0 response record additional updates items0
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrumentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerID) { // not required
		return nil
	}

	if err := validate.MinLength("customerId", "body", o.CustomerID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("customerId", "body", o.CustomerID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) validatePaymentInstrumentID(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrumentID) { // not required
		return nil
	}

	if err := validate.MinLength("paymentInstrumentId", "body", o.PaymentInstrumentID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("paymentInstrumentId", "body", o.PaymentInstrumentID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get batch report o k body records items0 response record additional updates items0 based on context it is used
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyRecordsItems0ResponseRecordAdditionalUpdatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyRecordsItems0SourceRecord get batch report o k body records items0 source record
swagger:model GetBatchReportOKBodyRecordsItems0SourceRecord
*/
type GetBatchReportOKBodyRecordsItems0SourceRecord struct {

	// card expiry month
	// Example: 12
	// Max Length: 2
	// Min Length: 2
	CardExpiryMonth string `json:"cardExpiryMonth,omitempty"`

	// card expiry year
	// Example: 2018
	// Max Length: 4
	// Min Length: 4
	CardExpiryYear string `json:"cardExpiryYear,omitempty"`

	// card number
	// Example: 511111XXXXXX6814
	CardNumber string `json:"cardNumber,omitempty"`

	// card type
	// Example: 002
	CardType string `json:"cardType,omitempty"`

	// customer Id
	// Example: C064DE56200B0DB0E053AF598E0A52AA
	// Max Length: 32
	// Min Length: 1
	CustomerID string `json:"customerId,omitempty"`

	// instrument identifier Id
	// Example: 7030000000000116236
	// Max Length: 32
	// Min Length: 12
	InstrumentIdentifierID string `json:"instrumentIdentifierId,omitempty"`

	// payment instrument Id
	// Example: C064DD33CBD30901E053AF598E0AC6CC
	// Max Length: 32
	// Min Length: 1
	PaymentInstrumentID string `json:"paymentInstrumentId,omitempty"`

	// token
	// Example: C064DE56200B0DB0E053AF598E0A52AA
	// Max Length: 32
	// Min Length: 1
	Token string `json:"token,omitempty"`
}

// Validate validates this get batch report o k body records items0 source record
func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCardExpiryMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardExpiryYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifierID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validateCardExpiryMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.CardExpiryMonth) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"cardExpiryMonth", "body", o.CardExpiryMonth, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"cardExpiryMonth", "body", o.CardExpiryMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validateCardExpiryYear(formats strfmt.Registry) error {
	if swag.IsZero(o.CardExpiryYear) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"cardExpiryYear", "body", o.CardExpiryYear, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"cardExpiryYear", "body", o.CardExpiryYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerID) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"customerId", "body", o.CustomerID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"customerId", "body", o.CustomerID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validateInstrumentIdentifierID(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifierID) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"instrumentIdentifierId", "body", o.InstrumentIdentifierID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"instrumentIdentifierId", "body", o.InstrumentIdentifierID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validatePaymentInstrumentID(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrumentID) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"paymentInstrumentId", "body", o.PaymentInstrumentID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"paymentInstrumentId", "body", o.PaymentInstrumentID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(o.Token) { // not required
		return nil
	}

	if err := validate.MinLength("sourceRecord"+"."+"token", "body", o.Token, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceRecord"+"."+"token", "body", o.Token, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get batch report o k body records items0 source record based on context it is used
func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyRecordsItems0SourceRecord) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyRecordsItems0SourceRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchReportOKBodyTotals get batch report o k body totals
swagger:model GetBatchReportOKBodyTotals
*/
type GetBatchReportOKBodyTotals struct {

	// accepted records
	// Example: 1
	AcceptedRecords int64 `json:"acceptedRecords,omitempty"`

	// ca responses
	// Example: 1
	CaResponses int64 `json:"caResponses,omitempty"`

	// ca responses omitted
	// Example: 1
	CaResponsesOmitted int64 `json:"caResponsesOmitted,omitempty"`

	// rejected records
	// Example: 1
	RejectedRecords int64 `json:"rejectedRecords,omitempty"`

	// updated records
	// Example: 1
	UpdatedRecords int64 `json:"updatedRecords,omitempty"`
}

// Validate validates this get batch report o k body totals
func (o *GetBatchReportOKBodyTotals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch report o k body totals based on context it is used
func (o *GetBatchReportOKBodyTotals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchReportOKBodyTotals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchReportOKBodyTotals) UnmarshalBinary(b []byte) error {
	var res GetBatchReportOKBodyTotals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
