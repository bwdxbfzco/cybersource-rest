// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetBatchesListReader is a Reader for the GetBatchesList structure.
type GetBatchesListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBatchesListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBatchesListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBatchesListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetBatchesListUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /accountupdater/v1/batches] getBatchesList", response, response.Code())
	}
}

// NewGetBatchesListOK creates a GetBatchesListOK with default headers values
func NewGetBatchesListOK() *GetBatchesListOK {
	return &GetBatchesListOK{}
}

/*
GetBatchesListOK describes a response with status code 200, with default header values.

A list of batches have been returned.
*/
type GetBatchesListOK struct {
	Payload *GetBatchesListOKBody
}

// IsSuccess returns true when this get batches list o k response has a 2xx status code
func (o *GetBatchesListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get batches list o k response has a 3xx status code
func (o *GetBatchesListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batches list o k response has a 4xx status code
func (o *GetBatchesListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get batches list o k response has a 5xx status code
func (o *GetBatchesListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get batches list o k response a status code equal to that given
func (o *GetBatchesListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get batches list o k response
func (o *GetBatchesListOK) Code() int {
	return 200
}

func (o *GetBatchesListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListOK %s", 200, payload)
}

func (o *GetBatchesListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListOK %s", 200, payload)
}

func (o *GetBatchesListOK) GetPayload() *GetBatchesListOKBody {
	return o.Payload
}

func (o *GetBatchesListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchesListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchesListUnauthorized creates a GetBatchesListUnauthorized with default headers values
func NewGetBatchesListUnauthorized() *GetBatchesListUnauthorized {
	return &GetBatchesListUnauthorized{}
}

/*
GetBatchesListUnauthorized describes a response with status code 401, with default header values.

Not authorized to access resource.
*/
type GetBatchesListUnauthorized struct {
	Payload *GetBatchesListUnauthorizedBody
}

// IsSuccess returns true when this get batches list unauthorized response has a 2xx status code
func (o *GetBatchesListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batches list unauthorized response has a 3xx status code
func (o *GetBatchesListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batches list unauthorized response has a 4xx status code
func (o *GetBatchesListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batches list unauthorized response has a 5xx status code
func (o *GetBatchesListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get batches list unauthorized response a status code equal to that given
func (o *GetBatchesListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get batches list unauthorized response
func (o *GetBatchesListUnauthorized) Code() int {
	return 401
}

func (o *GetBatchesListUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListUnauthorized %s", 401, payload)
}

func (o *GetBatchesListUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListUnauthorized %s", 401, payload)
}

func (o *GetBatchesListUnauthorized) GetPayload() *GetBatchesListUnauthorizedBody {
	return o.Payload
}

func (o *GetBatchesListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchesListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchesListUnprocessableEntity creates a GetBatchesListUnprocessableEntity with default headers values
func NewGetBatchesListUnprocessableEntity() *GetBatchesListUnprocessableEntity {
	return &GetBatchesListUnprocessableEntity{}
}

/*
GetBatchesListUnprocessableEntity describes a response with status code 422, with default header values.

Failure to process request.
*/
type GetBatchesListUnprocessableEntity struct {
	Payload *GetBatchesListUnprocessableEntityBody
}

// IsSuccess returns true when this get batches list unprocessable entity response has a 2xx status code
func (o *GetBatchesListUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batches list unprocessable entity response has a 3xx status code
func (o *GetBatchesListUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batches list unprocessable entity response has a 4xx status code
func (o *GetBatchesListUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batches list unprocessable entity response has a 5xx status code
func (o *GetBatchesListUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get batches list unprocessable entity response a status code equal to that given
func (o *GetBatchesListUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get batches list unprocessable entity response
func (o *GetBatchesListUnprocessableEntity) Code() int {
	return 422
}

func (o *GetBatchesListUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListUnprocessableEntity %s", 422, payload)
}

func (o *GetBatchesListUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches][%d] getBatchesListUnprocessableEntity %s", 422, payload)
}

func (o *GetBatchesListUnprocessableEntity) GetPayload() *GetBatchesListUnprocessableEntityBody {
	return o.Payload
}

func (o *GetBatchesListUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchesListUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetBatchesListOKBody get batches list o k body
swagger:model GetBatchesListOKBody
*/
type GetBatchesListOKBody struct {

	// embedded
	Embedded *GetBatchesListOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links []*GetBatchesListOKBodyLinksItems0 `json:"_links"`

	// count
	// Example: 1
	Count int64 `json:"count,omitempty"`

	// limit
	// Example: 20
	Limit int64 `json:"limit,omitempty"`

	// object
	// Example: collection
	Object string `json:"object,omitempty"`

	// offset
	// Example: 0
	Offset int64 `json:"offset,omitempty"`

	// total
	// Example: 1
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get batches list o k body
func (o *GetBatchesListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBody) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListOK" + "." + "_links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListOK" + "." + "_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batches list o k body based on the context it is used
func (o *GetBatchesListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBody) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {

			if swag.IsZero(o.Links[i]) { // not required
				return nil
			}

			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListOK" + "." + "_links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListOK" + "." + "_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBody) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyEmbedded get batches list o k body embedded
swagger:model GetBatchesListOKBodyEmbedded
*/
type GetBatchesListOKBodyEmbedded struct {

	// batches
	Batches []*GetBatchesListOKBodyEmbeddedBatchesItems0 `json:"batches"`
}

// Validate validates this get batches list o k body embedded
func (o *GetBatchesListOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbedded) validateBatches(formats strfmt.Registry) error {
	if swag.IsZero(o.Batches) { // not required
		return nil
	}

	for i := 0; i < len(o.Batches); i++ {
		if swag.IsZero(o.Batches[i]) { // not required
			continue
		}

		if o.Batches[i] != nil {
			if err := o.Batches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListOK" + "." + "_embedded" + "." + "batches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListOK" + "." + "_embedded" + "." + "batches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batches list o k body embedded based on the context it is used
func (o *GetBatchesListOKBodyEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbedded) contextValidateBatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Batches); i++ {

		if o.Batches[i] != nil {

			if swag.IsZero(o.Batches[i]) { // not required
				return nil
			}

			if err := o.Batches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListOK" + "." + "_embedded" + "." + "batches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListOK" + "." + "_embedded" + "." + "batches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyEmbeddedBatchesItems0 get batches list o k body embedded batches items0
swagger:model GetBatchesListOKBodyEmbeddedBatchesItems0
*/
type GetBatchesListOKBodyEmbeddedBatchesItems0 struct {

	// links
	Links *GetBatchesListOKBodyEmbeddedBatchesItems0Links `json:"_links,omitempty"`

	// Valid Values:
	//   * VISA
	//   * MASTERCARD
	//   * AMEX
	//
	BatchCaEndpoints []string `json:"batchCaEndpoints"`

	// ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
	// Example: 2018-05-22T14.38.57Z
	BatchCreatedDate string `json:"batchCreatedDate,omitempty"`

	// Unique identification number assigned to the submitted request.
	// Example: 16188390061150001062041064
	BatchID string `json:"batchId,omitempty"`

	// ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
	// Example: 2018-05-22T14.38.57Z
	BatchModifiedDate string `json:"batchModifiedDate,omitempty"`

	// Valid Values:
	//   * SCHEDULER
	//   * TOKEN_API
	//   * CREDIT_CARD_FILE_UPLOAD
	//   * AMEX_REGSITRY
	//   * AMEX_REGISTRY_API
	//   * AMEX_REGISTRY_API_SYNC
	//   * AMEX_MAINTENANCE
	//
	BatchSource string `json:"batchSource,omitempty"`

	// Reference used by merchant to identify batch.
	// Example: TC50171_3
	// Max Length: 255
	MerchantReference string `json:"merchantReference,omitempty"`

	// Valid Values:
	//   * REJECTED
	//   * RECEIVED
	//   * VALIDATED
	//   * DECLINED
	//   * PROCESSING
	//   * COMPLETE
	//
	Status string `json:"status,omitempty"`

	// Valid Values:
	//   * SECURE_STORAGE
	//   * TMS
	//   * CYBERSOURCE
	//
	TokenSource string `json:"tokenSource,omitempty"`

	// totals
	Totals *GetBatchesListOKBodyEmbeddedBatchesItems0Totals `json:"totals,omitempty"`
}

// Validate validates this get batches list o k body embedded batches items0
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantReference(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) validateMerchantReference(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantReference) { // not required
		return nil
	}

	if err := validate.MaxLength("merchantReference", "body", o.MerchantReference, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) validateTotals(formats strfmt.Registry) error {
	if swag.IsZero(o.Totals) { // not required
		return nil
	}

	if o.Totals != nil {
		if err := o.Totals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batches list o k body embedded batches items0 based on the context it is used
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) contextValidateTotals(ctx context.Context, formats strfmt.Registry) error {

	if o.Totals != nil {

		if swag.IsZero(o.Totals) { // not required
			return nil
		}

		if err := o.Totals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyEmbeddedBatchesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyEmbeddedBatchesItems0Links get batches list o k body embedded batches items0 links
swagger:model GetBatchesListOKBodyEmbeddedBatchesItems0Links
*/
type GetBatchesListOKBodyEmbeddedBatchesItems0Links struct {

	// reports
	Reports []*GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0 `json:"reports"`
}

// Validate validates this get batches list o k body embedded batches items0 links
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) validateReports(formats strfmt.Registry) error {
	if swag.IsZero(o.Reports) { // not required
		return nil
	}

	for i := 0; i < len(o.Reports); i++ {
		if swag.IsZero(o.Reports[i]) { // not required
			continue
		}

		if o.Reports[i] != nil {
			if err := o.Reports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + "reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("_links" + "." + "reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batches list o k body embedded batches items0 links based on the context it is used
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) contextValidateReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reports); i++ {

		if o.Reports[i] != nil {

			if swag.IsZero(o.Reports[i]) { // not required
				return nil
			}

			if err := o.Reports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + "reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("_links" + "." + "reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Links) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyEmbeddedBatchesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0 Retrieve the generated report of a batch when available.
swagger:model GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0
*/
type GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0 struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches/16188390061150001062041064/report
	Href string `json:"href,omitempty"`
}

// Validate validates this get batches list o k body embedded batches items0 links reports items0
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list o k body embedded batches items0 links reports items0 based on context it is used
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyEmbeddedBatchesItems0LinksReportsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyEmbeddedBatchesItems0Totals get batches list o k body embedded batches items0 totals
swagger:model GetBatchesListOKBodyEmbeddedBatchesItems0Totals
*/
type GetBatchesListOKBodyEmbeddedBatchesItems0Totals struct {

	// accepted records
	// Example: 1
	AcceptedRecords int64 `json:"acceptedRecords,omitempty"`

	// ca responses
	// Example: 1
	CaResponses int64 `json:"caResponses,omitempty"`

	// ca responses omitted
	// Example: 1
	CaResponsesOmitted int64 `json:"caResponsesOmitted,omitempty"`

	// rejected records
	// Example: 1
	RejectedRecords int64 `json:"rejectedRecords,omitempty"`

	// updated records
	// Example: 1
	UpdatedRecords int64 `json:"updatedRecords,omitempty"`
}

// Validate validates this get batches list o k body embedded batches items0 totals
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Totals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list o k body embedded batches items0 totals based on context it is used
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Totals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Totals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyEmbeddedBatchesItems0Totals) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyEmbeddedBatchesItems0Totals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListOKBodyLinksItems0 get batches list o k body links items0
swagger:model GetBatchesListOKBodyLinksItems0
*/
type GetBatchesListOKBodyLinksItems0 struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches?offset=0\u0026limit=20
	Href string `json:"href,omitempty"`

	// Valid Values:
	//   * self
	//   * first
	//   * last
	//   * prev
	//   * next
	//
	Rel string `json:"rel,omitempty"`
}

// Validate validates this get batches list o k body links items0
func (o *GetBatchesListOKBodyLinksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list o k body links items0 based on context it is used
func (o *GetBatchesListOKBodyLinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListOKBodyLinksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListOKBodyLinksItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchesListOKBodyLinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnauthorizedBody get batches list unauthorized body
swagger:model GetBatchesListUnauthorizedBody
*/
type GetBatchesListUnauthorizedBody struct {

	// links
	Links *GetBatchesListUnauthorizedBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*GetBatchesListUnauthorizedBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this get batches list unauthorized body
func (o *GetBatchesListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnauthorizedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnauthorized" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnauthorized" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListUnauthorizedBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batches list unauthorized body based on the context it is used
func (o *GetBatchesListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnauthorizedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnauthorized" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnauthorized" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListUnauthorizedBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnauthorizedBodyFieldsItems0 get batches list unauthorized body fields items0
swagger:model GetBatchesListUnauthorizedBodyFieldsItems0
*/
type GetBatchesListUnauthorizedBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this get batches list unauthorized body fields items0
func (o *GetBatchesListUnauthorizedBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list unauthorized body fields items0 based on context it is used
func (o *GetBatchesListUnauthorizedBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnauthorizedBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnauthorizedBodyLinks get batches list unauthorized body links
swagger:model GetBatchesListUnauthorizedBodyLinks
*/
type GetBatchesListUnauthorizedBodyLinks struct {

	// self
	Self *GetBatchesListUnauthorizedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get batches list unauthorized body links
func (o *GetBatchesListUnauthorizedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnauthorizedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnauthorized" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnauthorized" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batches list unauthorized body links based on the context it is used
func (o *GetBatchesListUnauthorizedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnauthorizedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnauthorized" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnauthorized" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnauthorizedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnauthorizedBodyLinksSelf get batches list unauthorized body links self
swagger:model GetBatchesListUnauthorizedBodyLinksSelf
*/
type GetBatchesListUnauthorizedBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this get batches list unauthorized body links self
func (o *GetBatchesListUnauthorizedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list unauthorized body links self based on context it is used
func (o *GetBatchesListUnauthorizedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnauthorizedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnauthorizedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnprocessableEntityBody get batches list unprocessable entity body
swagger:model GetBatchesListUnprocessableEntityBody
*/
type GetBatchesListUnprocessableEntityBody struct {

	// links
	Links *GetBatchesListUnprocessableEntityBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*GetBatchesListUnprocessableEntityBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this get batches list unprocessable entity body
func (o *GetBatchesListUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnprocessableEntityBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListUnprocessableEntityBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batches list unprocessable entity body based on the context it is used
func (o *GetBatchesListUnprocessableEntityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnprocessableEntityBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchesListUnprocessableEntityBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnprocessableEntityBodyFieldsItems0 get batches list unprocessable entity body fields items0
swagger:model GetBatchesListUnprocessableEntityBodyFieldsItems0
*/
type GetBatchesListUnprocessableEntityBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this get batches list unprocessable entity body fields items0
func (o *GetBatchesListUnprocessableEntityBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list unprocessable entity body fields items0 based on context it is used
func (o *GetBatchesListUnprocessableEntityBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnprocessableEntityBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnprocessableEntityBodyLinks get batches list unprocessable entity body links
swagger:model GetBatchesListUnprocessableEntityBodyLinks
*/
type GetBatchesListUnprocessableEntityBodyLinks struct {

	// self
	Self *GetBatchesListUnprocessableEntityBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get batches list unprocessable entity body links
func (o *GetBatchesListUnprocessableEntityBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnprocessableEntityBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batches list unprocessable entity body links based on the context it is used
func (o *GetBatchesListUnprocessableEntityBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchesListUnprocessableEntityBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchesListUnprocessableEntity" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnprocessableEntityBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchesListUnprocessableEntityBodyLinksSelf get batches list unprocessable entity body links self
swagger:model GetBatchesListUnprocessableEntityBodyLinksSelf
*/
type GetBatchesListUnprocessableEntityBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this get batches list unprocessable entity body links self
func (o *GetBatchesListUnprocessableEntityBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batches list unprocessable entity body links self based on context it is used
func (o *GetBatchesListUnprocessableEntityBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchesListUnprocessableEntityBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetBatchesListUnprocessableEntityBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
