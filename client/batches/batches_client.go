// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new batches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new batches API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new batches API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for batches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationJSONCharsetUTF8 sets the Accept header to "application/json;charset=utf-8".
func WithAcceptApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json;charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetBatchReport(params *GetBatchReportParams, opts ...ClientOption) (*GetBatchReportOK, error)

	GetBatchStatus(params *GetBatchStatusParams, opts ...ClientOption) (*GetBatchStatusOK, error)

	GetBatchesList(params *GetBatchesListParams, opts ...ClientOption) (*GetBatchesListOK, error)

	PostBatch(params *PostBatchParams, opts ...ClientOption) (*PostBatchAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetBatchReport retrieves a batch report

	**Get Batch Report**<br>This resource accepts a batch id and returns:

- The batch status.
- The total number of accepted, rejected, updated records.
- The total number of card association responses.
- The billable quantities of:
  - New Account Numbers (NAN)
  - New Expiry Dates (NED)
  - Account Closures (ACL)
  - Contact Card Holders (CCH)

- Source record information including token ids, masked card number, expiration dates & card type.
- Response record information including response code, reason, token ids, masked card number, expiration dates & card type.
*/
func (a *Client) GetBatchReport(params *GetBatchReportParams, opts ...ClientOption) (*GetBatchReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBatchReport",
		Method:             "GET",
		PathPattern:        "/accountupdater/v1/batches/{batchId}/report",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBatchReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBatchReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetBatchStatus retrieves a batch status

	**Get Batch Status**<br>This resource accepts a batch id and returns:

- The batch status.
- The total number of accepted, rejected, updated records.
- The total number of card association responses.
- The billable quantities of:
  - New Account Numbers (NAN)
  - New Expiry Dates (NED)
  - Account Closures (ACL)
  - Contact Card Holders (CCH)
*/
func (a *Client) GetBatchStatus(params *GetBatchStatusParams, opts ...ClientOption) (*GetBatchStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBatchStatus",
		Method:             "GET",
		PathPattern:        "/accountupdater/v1/batches/{batchId}/status",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBatchStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBatchStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetBatchesList lists batches

	**List Batches**<br>This resource accepts a optional date range, record offset and limit, returning a paginated response of batches containing:

- The batch id.
- The batch status.
- The batch created / modified dates.
- The total number of accepted, rejected, updated records.
- The total number of card association responses.
*/
func (a *Client) GetBatchesList(params *GetBatchesListParams, opts ...ClientOption) (*GetBatchesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBatchesList",
		Method:             "GET",
		PathPattern:        "/accountupdater/v1/batches",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBatchesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBatchesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostBatch creates a batch

	**Create a Batch**<br>This resource accepts TMS tokens ids of a Customer, Payment Instrument or Instrument Identifier. <br> The card numbers for the supplied tokens ids are then sent to the relevant card associations to check for updates.<br>The following type of batches can be submitted:

-  **oneOff** batch containing tokens id for Visa or MasterCard card numbers.
- **amexRegistration** batch containing tokens id for Amex card numbers.

A batch id will be returned on a successful response which can be used to get the batch status and the batch report.
*/
func (a *Client) PostBatch(params *PostBatchParams, opts ...ClientOption) (*PostBatchAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postBatch",
		Method:             "POST",
		PathPattern:        "/accountupdater/v1/batches",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBatchAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
