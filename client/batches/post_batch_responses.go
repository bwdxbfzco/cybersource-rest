// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostBatchReader is a Reader for the PostBatch structure.
type PostBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostBatchAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostBatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostBatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostBatchUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostBatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /accountupdater/v1/batches] postBatch", response, response.Code())
	}
}

// NewPostBatchAccepted creates a PostBatchAccepted with default headers values
func NewPostBatchAccepted() *PostBatchAccepted {
	return &PostBatchAccepted{}
}

/*
PostBatchAccepted describes a response with status code 202, with default header values.

A new batch has been created.
*/
type PostBatchAccepted struct {
	Payload *PostBatchAcceptedBody
}

// IsSuccess returns true when this post batch accepted response has a 2xx status code
func (o *PostBatchAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post batch accepted response has a 3xx status code
func (o *PostBatchAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post batch accepted response has a 4xx status code
func (o *PostBatchAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post batch accepted response has a 5xx status code
func (o *PostBatchAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post batch accepted response a status code equal to that given
func (o *PostBatchAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the post batch accepted response
func (o *PostBatchAccepted) Code() int {
	return 202
}

func (o *PostBatchAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchAccepted %s", 202, payload)
}

func (o *PostBatchAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchAccepted %s", 202, payload)
}

func (o *PostBatchAccepted) GetPayload() *PostBatchAcceptedBody {
	return o.Payload
}

func (o *PostBatchAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBatchAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostBatchBadRequest creates a PostBatchBadRequest with default headers values
func NewPostBatchBadRequest() *PostBatchBadRequest {
	return &PostBatchBadRequest{}
}

/*
PostBatchBadRequest describes a response with status code 400, with default header values.

Bad request.
*/
type PostBatchBadRequest struct {
	Payload *PostBatchBadRequestBody
}

// IsSuccess returns true when this post batch bad request response has a 2xx status code
func (o *PostBatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post batch bad request response has a 3xx status code
func (o *PostBatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post batch bad request response has a 4xx status code
func (o *PostBatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post batch bad request response has a 5xx status code
func (o *PostBatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post batch bad request response a status code equal to that given
func (o *PostBatchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post batch bad request response
func (o *PostBatchBadRequest) Code() int {
	return 400
}

func (o *PostBatchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchBadRequest %s", 400, payload)
}

func (o *PostBatchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchBadRequest %s", 400, payload)
}

func (o *PostBatchBadRequest) GetPayload() *PostBatchBadRequestBody {
	return o.Payload
}

func (o *PostBatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBatchBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostBatchUnauthorized creates a PostBatchUnauthorized with default headers values
func NewPostBatchUnauthorized() *PostBatchUnauthorized {
	return &PostBatchUnauthorized{}
}

/*
PostBatchUnauthorized describes a response with status code 401, with default header values.

Not authorized to access resource.
*/
type PostBatchUnauthorized struct {
	Payload *PostBatchUnauthorizedBody
}

// IsSuccess returns true when this post batch unauthorized response has a 2xx status code
func (o *PostBatchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post batch unauthorized response has a 3xx status code
func (o *PostBatchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post batch unauthorized response has a 4xx status code
func (o *PostBatchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post batch unauthorized response has a 5xx status code
func (o *PostBatchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post batch unauthorized response a status code equal to that given
func (o *PostBatchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post batch unauthorized response
func (o *PostBatchUnauthorized) Code() int {
	return 401
}

func (o *PostBatchUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnauthorized %s", 401, payload)
}

func (o *PostBatchUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnauthorized %s", 401, payload)
}

func (o *PostBatchUnauthorized) GetPayload() *PostBatchUnauthorizedBody {
	return o.Payload
}

func (o *PostBatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBatchUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostBatchUnsupportedMediaType creates a PostBatchUnsupportedMediaType with default headers values
func NewPostBatchUnsupportedMediaType() *PostBatchUnsupportedMediaType {
	return &PostBatchUnsupportedMediaType{}
}

/*
PostBatchUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported media type provided.
*/
type PostBatchUnsupportedMediaType struct {
	Payload *PostBatchUnsupportedMediaTypeBody
}

// IsSuccess returns true when this post batch unsupported media type response has a 2xx status code
func (o *PostBatchUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post batch unsupported media type response has a 3xx status code
func (o *PostBatchUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post batch unsupported media type response has a 4xx status code
func (o *PostBatchUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post batch unsupported media type response has a 5xx status code
func (o *PostBatchUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post batch unsupported media type response a status code equal to that given
func (o *PostBatchUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the post batch unsupported media type response
func (o *PostBatchUnsupportedMediaType) Code() int {
	return 415
}

func (o *PostBatchUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnsupportedMediaType %s", 415, payload)
}

func (o *PostBatchUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnsupportedMediaType %s", 415, payload)
}

func (o *PostBatchUnsupportedMediaType) GetPayload() *PostBatchUnsupportedMediaTypeBody {
	return o.Payload
}

func (o *PostBatchUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBatchUnsupportedMediaTypeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostBatchUnprocessableEntity creates a PostBatchUnprocessableEntity with default headers values
func NewPostBatchUnprocessableEntity() *PostBatchUnprocessableEntity {
	return &PostBatchUnprocessableEntity{}
}

/*
PostBatchUnprocessableEntity describes a response with status code 422, with default header values.

Failure to process request.
*/
type PostBatchUnprocessableEntity struct {
	Payload *PostBatchUnprocessableEntityBody
}

// IsSuccess returns true when this post batch unprocessable entity response has a 2xx status code
func (o *PostBatchUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post batch unprocessable entity response has a 3xx status code
func (o *PostBatchUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post batch unprocessable entity response has a 4xx status code
func (o *PostBatchUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post batch unprocessable entity response has a 5xx status code
func (o *PostBatchUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post batch unprocessable entity response a status code equal to that given
func (o *PostBatchUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post batch unprocessable entity response
func (o *PostBatchUnprocessableEntity) Code() int {
	return 422
}

func (o *PostBatchUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnprocessableEntity %s", 422, payload)
}

func (o *PostBatchUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /accountupdater/v1/batches][%d] postBatchUnprocessableEntity %s", 422, payload)
}

func (o *PostBatchUnprocessableEntity) GetPayload() *PostBatchUnprocessableEntityBody {
	return o.Payload
}

func (o *PostBatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBatchUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostBatchAcceptedBody post batch accepted body
swagger:model PostBatchAcceptedBody
*/
type PostBatchAcceptedBody struct {

	// links
	Links *PostBatchAcceptedBodyLinks `json:"_links,omitempty"`

	// Unique identification number assigned to the submitted request.
	// Example: 16188390061150001062041064
	BatchID string `json:"batchId,omitempty"`

	// batch item count
	// Example: 1
	BatchItemCount int64 `json:"batchItemCount,omitempty"`
}

// Validate validates this post batch accepted body
func (o *PostBatchAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchAcceptedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchAccepted" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchAccepted" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post batch accepted body based on the context it is used
func (o *PostBatchAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchAcceptedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchAccepted" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchAccepted" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PostBatchAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchAcceptedBodyLinks post batch accepted body links
swagger:model PostBatchAcceptedBodyLinks
*/
type PostBatchAcceptedBodyLinks struct {

	// self
	Self *PostBatchAcceptedBodyLinksSelf `json:"self,omitempty"`

	// status
	Status []*PostBatchAcceptedBodyLinksStatusItems0 `json:"status"`
}

// Validate validates this post batch accepted body links
func (o *PostBatchAcceptedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchAcceptedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchAccepted" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchAccepted" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchAcceptedBodyLinks) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	for i := 0; i < len(o.Status); i++ {
		if swag.IsZero(o.Status[i]) { // not required
			continue
		}

		if o.Status[i] != nil {
			if err := o.Status[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchAccepted" + "." + "_links" + "." + "status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchAccepted" + "." + "_links" + "." + "status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch accepted body links based on the context it is used
func (o *PostBatchAcceptedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchAcceptedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchAccepted" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchAccepted" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchAcceptedBodyLinks) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Status); i++ {

		if o.Status[i] != nil {

			if swag.IsZero(o.Status[i]) { // not required
				return nil
			}

			if err := o.Status[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchAccepted" + "." + "_links" + "." + "status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchAccepted" + "." + "_links" + "." + "status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostBatchAcceptedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchAcceptedBodyLinksSelf post batch accepted body links self
swagger:model PostBatchAcceptedBodyLinksSelf
*/
type PostBatchAcceptedBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch accepted body links self
func (o *PostBatchAcceptedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch accepted body links self based on context it is used
func (o *PostBatchAcceptedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostBatchAcceptedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchAcceptedBodyLinksStatusItems0 post batch accepted body links status items0
swagger:model PostBatchAcceptedBodyLinksStatusItems0
*/
type PostBatchAcceptedBodyLinksStatusItems0 struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches/16188390061150001062041064/status
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch accepted body links status items0
func (o *PostBatchAcceptedBodyLinksStatusItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch accepted body links status items0 based on context it is used
func (o *PostBatchAcceptedBodyLinksStatusItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinksStatusItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchAcceptedBodyLinksStatusItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchAcceptedBodyLinksStatusItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchBadRequestBody post batch bad request body
swagger:model PostBatchBadRequestBody
*/
type PostBatchBadRequestBody struct {

	// links
	Links *PostBatchBadRequestBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*PostBatchBadRequestBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this post batch bad request body
func (o *PostBatchBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBadRequestBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchBadRequest" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchBadRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchBadRequestBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchBadRequest" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchBadRequest" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch bad request body based on the context it is used
func (o *PostBatchBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBadRequestBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchBadRequest" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchBadRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchBadRequestBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchBadRequest" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchBadRequest" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostBatchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchBadRequestBodyFieldsItems0 post batch bad request body fields items0
swagger:model PostBatchBadRequestBodyFieldsItems0
*/
type PostBatchBadRequestBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this post batch bad request body fields items0
func (o *PostBatchBadRequestBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch bad request body fields items0 based on context it is used
func (o *PostBatchBadRequestBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchBadRequestBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchBadRequestBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchBadRequestBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchBadRequestBodyLinks post batch bad request body links
swagger:model PostBatchBadRequestBodyLinks
*/
type PostBatchBadRequestBodyLinks struct {

	// self
	Self *PostBatchBadRequestBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this post batch bad request body links
func (o *PostBatchBadRequestBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBadRequestBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchBadRequest" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchBadRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post batch bad request body links based on the context it is used
func (o *PostBatchBadRequestBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBadRequestBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchBadRequest" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchBadRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchBadRequestBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchBadRequestBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostBatchBadRequestBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchBadRequestBodyLinksSelf post batch bad request body links self
swagger:model PostBatchBadRequestBodyLinksSelf
*/
type PostBatchBadRequestBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch bad request body links self
func (o *PostBatchBadRequestBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch bad request body links self based on context it is used
func (o *PostBatchBadRequestBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchBadRequestBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchBadRequestBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostBatchBadRequestBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchBody post batch body
swagger:model PostBatchBody
*/
type PostBatchBody struct {

	// included
	// Required: true
	Included *PostBatchParamsBodyIncluded `json:"included"`

	// Reference used by merchant to identify batch.
	// Example: TC50171_3
	// Max Length: 255
	MerchantReference string `json:"merchantReference,omitempty"`

	// Email used to notify the batch status.
	// Example: test@cybs.com
	// Required: true
	// Format: email
	NotificationEmail *strfmt.Email `json:"notificationEmail"`

	// Valid Values:
	//   * oneOff
	//   * amexRegistration
	//
	Type *string `json:"type,omitempty"`
}

// Validate validates this post batch body
func (o *PostBatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIncluded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantReference(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotificationEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBody) validateIncluded(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"included", "body", o.Included); err != nil {
		return err
	}

	if o.Included != nil {
		if err := o.Included.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "included")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "included")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchBody) validateMerchantReference(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantReference) { // not required
		return nil
	}

	if err := validate.MaxLength("Body"+"."+"merchantReference", "body", o.MerchantReference, 255); err != nil {
		return err
	}

	return nil
}

func (o *PostBatchBody) validateNotificationEmail(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"notificationEmail", "body", o.NotificationEmail); err != nil {
		return err
	}

	if err := validate.FormatOf("Body"+"."+"notificationEmail", "body", "email", o.NotificationEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post batch body based on the context it is used
func (o *PostBatchBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIncluded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchBody) contextValidateIncluded(ctx context.Context, formats strfmt.Registry) error {

	if o.Included != nil {

		if err := o.Included.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "included")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "included")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchBody) UnmarshalBinary(b []byte) error {
	var res PostBatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchParamsBodyIncluded post batch params body included
swagger:model PostBatchParamsBodyIncluded
*/
type PostBatchParamsBodyIncluded struct {

	// tokens
	Tokens []*PostBatchParamsBodyIncludedTokensItems0 `json:"tokens"`
}

// Validate validates this post batch params body included
func (o *PostBatchParamsBodyIncluded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTokens(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchParamsBodyIncluded) validateTokens(formats strfmt.Registry) error {
	if swag.IsZero(o.Tokens) { // not required
		return nil
	}

	for i := 0; i < len(o.Tokens); i++ {
		if swag.IsZero(o.Tokens[i]) { // not required
			continue
		}

		if o.Tokens[i] != nil {
			if err := o.Tokens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "included" + "." + "tokens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "included" + "." + "tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch params body included based on the context it is used
func (o *PostBatchParamsBodyIncluded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTokens(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchParamsBodyIncluded) contextValidateTokens(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tokens); i++ {

		if o.Tokens[i] != nil {

			if swag.IsZero(o.Tokens[i]) { // not required
				return nil
			}

			if err := o.Tokens[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "included" + "." + "tokens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "included" + "." + "tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchParamsBodyIncluded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchParamsBodyIncluded) UnmarshalBinary(b []byte) error {
	var res PostBatchParamsBodyIncluded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchParamsBodyIncludedTokensItems0 post batch params body included tokens items0
swagger:model PostBatchParamsBodyIncludedTokensItems0
*/
type PostBatchParamsBodyIncludedTokensItems0 struct {

	// expiration month
	// Example: 12
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// expiration year
	// Example: 2020
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// id
	// Example: 7030000000000116236
	// Required: true
	// Max Length: 32
	// Min Length: 1
	ID *string `json:"id"`
}

// Validate validates this post batch params body included tokens items0
func (o *PostBatchParamsBodyIncludedTokensItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchParamsBodyIncludedTokensItems0) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *PostBatchParamsBodyIncludedTokensItems0) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *PostBatchParamsBodyIncludedTokensItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post batch params body included tokens items0 based on context it is used
func (o *PostBatchParamsBodyIncludedTokensItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchParamsBodyIncludedTokensItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchParamsBodyIncludedTokensItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchParamsBodyIncludedTokensItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnauthorizedBody post batch unauthorized body
swagger:model PostBatchUnauthorizedBody
*/
type PostBatchUnauthorizedBody struct {

	// links
	Links *PostBatchUnauthorizedBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*PostBatchUnauthorizedBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this post batch unauthorized body
func (o *PostBatchUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnauthorizedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnauthorized" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnauthorized" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnauthorizedBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch unauthorized body based on the context it is used
func (o *PostBatchUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnauthorizedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnauthorized" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnauthorized" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnauthorizedBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostBatchUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnauthorizedBodyFieldsItems0 post batch unauthorized body fields items0
swagger:model PostBatchUnauthorizedBodyFieldsItems0
*/
type PostBatchUnauthorizedBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this post batch unauthorized body fields items0
func (o *PostBatchUnauthorizedBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unauthorized body fields items0 based on context it is used
func (o *PostBatchUnauthorizedBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchUnauthorizedBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnauthorizedBodyLinks post batch unauthorized body links
swagger:model PostBatchUnauthorizedBodyLinks
*/
type PostBatchUnauthorizedBodyLinks struct {

	// self
	Self *PostBatchUnauthorizedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this post batch unauthorized body links
func (o *PostBatchUnauthorizedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnauthorizedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnauthorized" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnauthorized" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post batch unauthorized body links based on the context it is used
func (o *PostBatchUnauthorizedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnauthorizedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnauthorized" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnauthorized" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostBatchUnauthorizedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnauthorizedBodyLinksSelf post batch unauthorized body links self
swagger:model PostBatchUnauthorizedBodyLinksSelf
*/
type PostBatchUnauthorizedBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch unauthorized body links self
func (o *PostBatchUnauthorizedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unauthorized body links self based on context it is used
func (o *PostBatchUnauthorizedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnauthorizedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostBatchUnauthorizedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnprocessableEntityBody post batch unprocessable entity body
swagger:model PostBatchUnprocessableEntityBody
*/
type PostBatchUnprocessableEntityBody struct {

	// links
	Links *PostBatchUnprocessableEntityBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*PostBatchUnprocessableEntityBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this post batch unprocessable entity body
func (o *PostBatchUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnprocessableEntityBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnprocessableEntity" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnprocessableEntity" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnprocessableEntityBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch unprocessable entity body based on the context it is used
func (o *PostBatchUnprocessableEntityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnprocessableEntityBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnprocessableEntity" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnprocessableEntity" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnprocessableEntityBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnprocessableEntity" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res PostBatchUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnprocessableEntityBodyFieldsItems0 post batch unprocessable entity body fields items0
swagger:model PostBatchUnprocessableEntityBodyFieldsItems0
*/
type PostBatchUnprocessableEntityBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this post batch unprocessable entity body fields items0
func (o *PostBatchUnprocessableEntityBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unprocessable entity body fields items0 based on context it is used
func (o *PostBatchUnprocessableEntityBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchUnprocessableEntityBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnprocessableEntityBodyLinks post batch unprocessable entity body links
swagger:model PostBatchUnprocessableEntityBodyLinks
*/
type PostBatchUnprocessableEntityBodyLinks struct {

	// self
	Self *PostBatchUnprocessableEntityBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this post batch unprocessable entity body links
func (o *PostBatchUnprocessableEntityBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnprocessableEntityBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnprocessableEntity" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnprocessableEntity" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post batch unprocessable entity body links based on the context it is used
func (o *PostBatchUnprocessableEntityBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnprocessableEntityBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnprocessableEntity" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnprocessableEntity" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostBatchUnprocessableEntityBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnprocessableEntityBodyLinksSelf post batch unprocessable entity body links self
swagger:model PostBatchUnprocessableEntityBodyLinksSelf
*/
type PostBatchUnprocessableEntityBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch unprocessable entity body links self
func (o *PostBatchUnprocessableEntityBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unprocessable entity body links self based on context it is used
func (o *PostBatchUnprocessableEntityBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnprocessableEntityBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostBatchUnprocessableEntityBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnsupportedMediaTypeBody post batch unsupported media type body
swagger:model PostBatchUnsupportedMediaTypeBody
*/
type PostBatchUnsupportedMediaTypeBody struct {

	// links
	Links *PostBatchUnsupportedMediaTypeBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*PostBatchUnsupportedMediaTypeBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this post batch unsupported media type body
func (o *PostBatchUnsupportedMediaTypeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnsupportedMediaTypeBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnsupportedMediaTypeBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post batch unsupported media type body based on the context it is used
func (o *PostBatchUnsupportedMediaTypeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnsupportedMediaTypeBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostBatchUnsupportedMediaTypeBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBody) UnmarshalBinary(b []byte) error {
	var res PostBatchUnsupportedMediaTypeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnsupportedMediaTypeBodyFieldsItems0 post batch unsupported media type body fields items0
swagger:model PostBatchUnsupportedMediaTypeBodyFieldsItems0
*/
type PostBatchUnsupportedMediaTypeBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this post batch unsupported media type body fields items0
func (o *PostBatchUnsupportedMediaTypeBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unsupported media type body fields items0 based on context it is used
func (o *PostBatchUnsupportedMediaTypeBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PostBatchUnsupportedMediaTypeBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnsupportedMediaTypeBodyLinks post batch unsupported media type body links
swagger:model PostBatchUnsupportedMediaTypeBodyLinks
*/
type PostBatchUnsupportedMediaTypeBodyLinks struct {

	// self
	Self *PostBatchUnsupportedMediaTypeBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this post batch unsupported media type body links
func (o *PostBatchUnsupportedMediaTypeBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnsupportedMediaTypeBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post batch unsupported media type body links based on the context it is used
func (o *PostBatchUnsupportedMediaTypeBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBatchUnsupportedMediaTypeBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBatchUnsupportedMediaType" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBatchUnsupportedMediaType" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostBatchUnsupportedMediaTypeBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostBatchUnsupportedMediaTypeBodyLinksSelf post batch unsupported media type body links self
swagger:model PostBatchUnsupportedMediaTypeBodyLinksSelf
*/
type PostBatchUnsupportedMediaTypeBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this post batch unsupported media type body links self
func (o *PostBatchUnsupportedMediaTypeBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post batch unsupported media type body links self based on context it is used
func (o *PostBatchUnsupportedMediaTypeBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBatchUnsupportedMediaTypeBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostBatchUnsupportedMediaTypeBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
