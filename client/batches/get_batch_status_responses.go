// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetBatchStatusReader is a Reader for the GetBatchStatus structure.
type GetBatchStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBatchStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBatchStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetBatchStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /accountupdater/v1/batches/{batchId}/status] getBatchStatus", response, response.Code())
	}
}

// NewGetBatchStatusOK creates a GetBatchStatusOK with default headers values
func NewGetBatchStatusOK() *GetBatchStatusOK {
	return &GetBatchStatusOK{}
}

/*
GetBatchStatusOK describes a response with status code 200, with default header values.

The status of a batch.
*/
type GetBatchStatusOK struct {
	Payload *GetBatchStatusOKBody
}

// IsSuccess returns true when this get batch status o k response has a 2xx status code
func (o *GetBatchStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get batch status o k response has a 3xx status code
func (o *GetBatchStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch status o k response has a 4xx status code
func (o *GetBatchStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get batch status o k response has a 5xx status code
func (o *GetBatchStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch status o k response a status code equal to that given
func (o *GetBatchStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get batch status o k response
func (o *GetBatchStatusOK) Code() int {
	return 200
}

func (o *GetBatchStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/status][%d] getBatchStatusOK %s", 200, payload)
}

func (o *GetBatchStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/status][%d] getBatchStatusOK %s", 200, payload)
}

func (o *GetBatchStatusOK) GetPayload() *GetBatchStatusOKBody {
	return o.Payload
}

func (o *GetBatchStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchStatusForbidden creates a GetBatchStatusForbidden with default headers values
func NewGetBatchStatusForbidden() *GetBatchStatusForbidden {
	return &GetBatchStatusForbidden{}
}

/*
GetBatchStatusForbidden describes a response with status code 403, with default header values.

Unable to perform action for supplied batch ID/merchant.
*/
type GetBatchStatusForbidden struct {
	Payload *GetBatchStatusForbiddenBody
}

// IsSuccess returns true when this get batch status forbidden response has a 2xx status code
func (o *GetBatchStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch status forbidden response has a 3xx status code
func (o *GetBatchStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch status forbidden response has a 4xx status code
func (o *GetBatchStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch status forbidden response has a 5xx status code
func (o *GetBatchStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch status forbidden response a status code equal to that given
func (o *GetBatchStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get batch status forbidden response
func (o *GetBatchStatusForbidden) Code() int {
	return 403
}

func (o *GetBatchStatusForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/status][%d] getBatchStatusForbidden %s", 403, payload)
}

func (o *GetBatchStatusForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /accountupdater/v1/batches/{batchId}/status][%d] getBatchStatusForbidden %s", 403, payload)
}

func (o *GetBatchStatusForbidden) GetPayload() *GetBatchStatusForbiddenBody {
	return o.Payload
}

func (o *GetBatchStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBatchStatusForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetBatchStatusForbiddenBody get batch status forbidden body
swagger:model GetBatchStatusForbiddenBody
*/
type GetBatchStatusForbiddenBody struct {

	// links
	Links *GetBatchStatusForbiddenBodyLinks `json:"_links,omitempty"`

	// Valid Values:
	//   * FORBIDDEN_RESPONSE
	//   * VALIDATION_ERROR
	//   * UNSUPPORTED_MEDIA_TYPE
	//   * MALFORMED_PAYLOAD_ERROR
	//   * SERVER_ERROR
	//
	Code string `json:"code,omitempty"`

	// correlation Id
	// Example: c7b74452a7314f9ca28197d1084447a5
	CorrelationID string `json:"correlationId,omitempty"`

	// detail
	// Example: One or more fields failed validation
	Detail string `json:"detail,omitempty"`

	// fields
	Fields []*GetBatchStatusForbiddenBodyFieldsItems0 `json:"fields"`

	// Valid Values:
	//   * cybsapi.forbidden.response
	//   * cybsapi.validation.error
	//   * cybsapi.media.notsupported
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Field validation error
	Message string `json:"message,omitempty"`
}

// Validate validates this get batch status forbidden body
func (o *GetBatchStatusForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusForbiddenBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusForbidden" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusForbidden" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusForbiddenBody) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchStatusForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchStatusForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get batch status forbidden body based on the context it is used
func (o *GetBatchStatusForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusForbiddenBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusForbidden" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusForbidden" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusForbiddenBody) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fields); i++ {

		if o.Fields[i] != nil {

			if swag.IsZero(o.Fields[i]) { // not required
				return nil
			}

			if err := o.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchStatusForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchStatusForbidden" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusForbiddenBodyFieldsItems0 get batch status forbidden body fields items0
swagger:model GetBatchStatusForbiddenBodyFieldsItems0
*/
type GetBatchStatusForbiddenBodyFieldsItems0 struct {

	// Valid Values:
	//   * cybsapi.ondemand.batch.email.null
	//
	LocalizationKey string `json:"localizationKey,omitempty"`

	// message
	// Example: Email Address is invalid
	Message string `json:"message,omitempty"`

	// path
	// Example: notificationEmail
	Path string `json:"path,omitempty"`
}

// Validate validates this get batch status forbidden body fields items0
func (o *GetBatchStatusForbiddenBodyFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status forbidden body fields items0 based on context it is used
func (o *GetBatchStatusForbiddenBodyFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyFieldsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyFieldsItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusForbiddenBodyFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusForbiddenBodyLinks get batch status forbidden body links
swagger:model GetBatchStatusForbiddenBodyLinks
*/
type GetBatchStatusForbiddenBodyLinks struct {

	// self
	Self *GetBatchStatusForbiddenBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get batch status forbidden body links
func (o *GetBatchStatusForbiddenBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusForbiddenBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusForbidden" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusForbidden" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch status forbidden body links based on the context it is used
func (o *GetBatchStatusForbiddenBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusForbiddenBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusForbidden" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusForbidden" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusForbiddenBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusForbiddenBodyLinksSelf get batch status forbidden body links self
swagger:model GetBatchStatusForbiddenBodyLinksSelf
*/
type GetBatchStatusForbiddenBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches
	Href string `json:"href,omitempty"`
}

// Validate validates this get batch status forbidden body links self
func (o *GetBatchStatusForbiddenBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status forbidden body links self based on context it is used
func (o *GetBatchStatusForbiddenBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusForbiddenBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusForbiddenBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBody get batch status o k body
swagger:model GetBatchStatusOKBody
*/
type GetBatchStatusOKBody struct {

	// links
	Links *GetBatchStatusOKBodyLinks `json:"_links,omitempty"`

	// batch ca endpoints
	// Example: VISA,MASTERCARD
	BatchCaEndpoints string `json:"batchCaEndpoints,omitempty"`

	// ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
	// Example: 2018-05-22T14.38.57Z
	BatchCreatedDate string `json:"batchCreatedDate,omitempty"`

	// Unique identification number assigned to the submitted request.
	// Example: 16188390061150001062041064
	BatchID string `json:"batchId,omitempty"`

	// Valid Values:
	//   * SCHEDULER
	//   * TOKEN_API
	//   * CREDIT_CARD_FILE_UPLOAD
	//   * AMEX_REGSITRY
	//   * AMEX_REGISTRY_API
	//   * AMEX_MAINTENANCE
	//
	BatchSource string `json:"batchSource,omitempty"`

	// billing
	Billing *GetBatchStatusOKBodyBilling `json:"billing,omitempty"`

	// description
	// Example: Your batch has been received, and is being checked for errors.
	Description string `json:"description,omitempty"`

	// Reference used by merchant to identify batch.
	// Example: TC50171_3
	// Max Length: 255
	MerchantReference string `json:"merchantReference,omitempty"`

	// Valid Values:
	//   * REJECTED
	//   * RECEIVED
	//   * VALIDATED
	//   * DECLINED
	//   * PROCESSING
	//   * COMPLETED
	//
	Status string `json:"status,omitempty"`

	// totals
	Totals *GetBatchStatusOKBodyTotals `json:"totals,omitempty"`
}

// Validate validates this get batch status o k body
func (o *GetBatchStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantReference(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusOKBody) validateBilling(formats strfmt.Registry) error {
	if swag.IsZero(o.Billing) { // not required
		return nil
	}

	if o.Billing != nil {
		if err := o.Billing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusOKBody) validateMerchantReference(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantReference) { // not required
		return nil
	}

	if err := validate.MaxLength("getBatchStatusOK"+"."+"merchantReference", "body", o.MerchantReference, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetBatchStatusOKBody) validateTotals(formats strfmt.Registry) error {
	if swag.IsZero(o.Totals) { // not required
		return nil
	}

	if o.Totals != nil {
		if err := o.Totals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch status o k body based on the context it is used
func (o *GetBatchStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBilling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusOKBody) contextValidateBilling(ctx context.Context, formats strfmt.Registry) error {

	if o.Billing != nil {

		if swag.IsZero(o.Billing) { // not required
			return nil
		}

		if err := o.Billing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

func (o *GetBatchStatusOKBody) contextValidateTotals(ctx context.Context, formats strfmt.Registry) error {

	if o.Totals != nil {

		if swag.IsZero(o.Totals) { // not required
			return nil
		}

		if err := o.Totals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBodyBilling get batch status o k body billing
swagger:model GetBatchStatusOKBodyBilling
*/
type GetBatchStatusOKBodyBilling struct {

	// acl
	// Example: 1
	ACL int64 `json:"acl,omitempty"`

	// cch
	// Example: 1
	Cch int64 `json:"cch,omitempty"`

	// nan
	// Example: 1
	Nan int64 `json:"nan,omitempty"`

	// ned
	// Example: 1
	Ned int64 `json:"ned,omitempty"`
}

// Validate validates this get batch status o k body billing
func (o *GetBatchStatusOKBodyBilling) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status o k body billing based on context it is used
func (o *GetBatchStatusOKBodyBilling) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBodyBilling) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBodyBilling) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBodyBilling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBodyLinks get batch status o k body links
swagger:model GetBatchStatusOKBodyLinks
*/
type GetBatchStatusOKBodyLinks struct {

	// report
	Report []*GetBatchStatusOKBodyLinksReportItems0 `json:"report"`

	// self
	Self *GetBatchStatusOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get batch status o k body links
func (o *GetBatchStatusOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusOKBodyLinks) validateReport(formats strfmt.Registry) error {
	if swag.IsZero(o.Report) { // not required
		return nil
	}

	for i := 0; i < len(o.Report); i++ {
		if swag.IsZero(o.Report[i]) { // not required
			continue
		}

		if o.Report[i] != nil {
			if err := o.Report[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "report" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "report" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBatchStatusOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get batch status o k body links based on the context it is used
func (o *GetBatchStatusOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBatchStatusOKBodyLinks) contextValidateReport(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Report); i++ {

		if o.Report[i] != nil {

			if swag.IsZero(o.Report[i]) { // not required
				return nil
			}

			if err := o.Report[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "report" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "report" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetBatchStatusOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBatchStatusOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBodyLinksReportItems0 get batch status o k body links report items0
swagger:model GetBatchStatusOKBodyLinksReportItems0
*/
type GetBatchStatusOKBodyLinksReportItems0 struct {

	// href
	// Example: https://apitest.cybersource.com/accountupdater/v1/batches/16188390061150001062041064/report
	Href string `json:"href,omitempty"`
}

// Validate validates this get batch status o k body links report items0
func (o *GetBatchStatusOKBodyLinksReportItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status o k body links report items0 based on context it is used
func (o *GetBatchStatusOKBodyLinksReportItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinksReportItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinksReportItems0) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBodyLinksReportItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBodyLinksSelf get batch status o k body links self
swagger:model GetBatchStatusOKBodyLinksSelf
*/
type GetBatchStatusOKBodyLinksSelf struct {

	// href
	// Example: https://api.cybersource.com/accountupdater/v1/batches/16188390061150001062041064/status
	Href string `json:"href,omitempty"`
}

// Validate validates this get batch status o k body links self
func (o *GetBatchStatusOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status o k body links self based on context it is used
func (o *GetBatchStatusOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetBatchStatusOKBodyTotals get batch status o k body totals
swagger:model GetBatchStatusOKBodyTotals
*/
type GetBatchStatusOKBodyTotals struct {

	// accepted records
	// Example: 1
	AcceptedRecords int64 `json:"acceptedRecords,omitempty"`

	// ca responses
	// Example: 1
	CaResponses int64 `json:"caResponses,omitempty"`

	// ca responses omitted
	// Example: 1
	CaResponsesOmitted int64 `json:"caResponsesOmitted,omitempty"`

	// rejected records
	// Example: 1
	RejectedRecords int64 `json:"rejectedRecords,omitempty"`

	// updated records
	// Example: 1
	UpdatedRecords int64 `json:"updatedRecords,omitempty"`
}

// Validate validates this get batch status o k body totals
func (o *GetBatchStatusOKBodyTotals) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get batch status o k body totals based on context it is used
func (o *GetBatchStatusOKBodyTotals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBatchStatusOKBodyTotals) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBatchStatusOKBodyTotals) UnmarshalBinary(b []byte) error {
	var res GetBatchStatusOKBodyTotals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
