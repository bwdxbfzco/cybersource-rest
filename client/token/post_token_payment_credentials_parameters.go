// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostTokenPaymentCredentialsParams creates a new PostTokenPaymentCredentialsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostTokenPaymentCredentialsParams() *PostTokenPaymentCredentialsParams {
	return &PostTokenPaymentCredentialsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostTokenPaymentCredentialsParamsWithTimeout creates a new PostTokenPaymentCredentialsParams object
// with the ability to set a timeout on a request.
func NewPostTokenPaymentCredentialsParamsWithTimeout(timeout time.Duration) *PostTokenPaymentCredentialsParams {
	return &PostTokenPaymentCredentialsParams{
		timeout: timeout,
	}
}

// NewPostTokenPaymentCredentialsParamsWithContext creates a new PostTokenPaymentCredentialsParams object
// with the ability to set a context for a request.
func NewPostTokenPaymentCredentialsParamsWithContext(ctx context.Context) *PostTokenPaymentCredentialsParams {
	return &PostTokenPaymentCredentialsParams{
		Context: ctx,
	}
}

// NewPostTokenPaymentCredentialsParamsWithHTTPClient creates a new PostTokenPaymentCredentialsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostTokenPaymentCredentialsParamsWithHTTPClient(client *http.Client) *PostTokenPaymentCredentialsParams {
	return &PostTokenPaymentCredentialsParams{
		HTTPClient: client,
	}
}

/*
PostTokenPaymentCredentialsParams contains all the parameters to send to the API endpoint

	for the post token payment credentials operation.

	Typically these are written to a http.Request.
*/
type PostTokenPaymentCredentialsParams struct {

	// PostPaymentCredentialsRequest.
	PostPaymentCredentialsRequest PostTokenPaymentCredentialsBody

	/* ProfileID.

	   The Id of a profile containing user specific TMS configuration.
	*/
	ProfileID *string

	/* TokenID.

	   The Id of a token representing a Customer, Payment Instrument or Instrument Identifier.
	*/
	TokenID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post token payment credentials params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTokenPaymentCredentialsParams) WithDefaults() *PostTokenPaymentCredentialsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post token payment credentials params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTokenPaymentCredentialsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithTimeout(timeout time.Duration) *PostTokenPaymentCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithContext(ctx context.Context) *PostTokenPaymentCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithHTTPClient(client *http.Client) *PostTokenPaymentCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPostPaymentCredentialsRequest adds the postPaymentCredentialsRequest to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithPostPaymentCredentialsRequest(postPaymentCredentialsRequest PostTokenPaymentCredentialsBody) *PostTokenPaymentCredentialsParams {
	o.SetPostPaymentCredentialsRequest(postPaymentCredentialsRequest)
	return o
}

// SetPostPaymentCredentialsRequest adds the postPaymentCredentialsRequest to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetPostPaymentCredentialsRequest(postPaymentCredentialsRequest PostTokenPaymentCredentialsBody) {
	o.PostPaymentCredentialsRequest = postPaymentCredentialsRequest
}

// WithProfileID adds the profileID to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithProfileID(profileID *string) *PostTokenPaymentCredentialsParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetProfileID(profileID *string) {
	o.ProfileID = profileID
}

// WithTokenID adds the tokenID to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) WithTokenID(tokenID string) *PostTokenPaymentCredentialsParams {
	o.SetTokenID(tokenID)
	return o
}

// SetTokenID adds the tokenId to the post token payment credentials params
func (o *PostTokenPaymentCredentialsParams) SetTokenID(tokenID string) {
	o.TokenID = tokenID
}

// WriteToRequest writes these params to a swagger request
func (o *PostTokenPaymentCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.PostPaymentCredentialsRequest); err != nil {
		return err
	}

	if o.ProfileID != nil {

		// header param profile-id
		if err := r.SetHeaderParam("profile-id", *o.ProfileID); err != nil {
			return err
		}
	}

	// path param tokenId
	if err := r.SetPathParam("tokenId", o.TokenID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
