// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTokenPaymentCredentialsReader is a Reader for the PostTokenPaymentCredentials structure.
type PostTokenPaymentCredentialsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTokenPaymentCredentialsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostTokenPaymentCredentialsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTokenPaymentCredentialsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostTokenPaymentCredentialsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostTokenPaymentCredentialsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostTokenPaymentCredentialsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTokenPaymentCredentialsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /tms/v2/tokens/{tokenId}/payment-credentials] postTokenPaymentCredentials", response, response.Code())
	}
}

// NewPostTokenPaymentCredentialsCreated creates a PostTokenPaymentCredentialsCreated with default headers values
func NewPostTokenPaymentCredentialsCreated() *PostTokenPaymentCredentialsCreated {
	return &PostTokenPaymentCredentialsCreated{}
}

/*
	PostTokenPaymentCredentialsCreated describes a response with status code 201, with default header values.

	A base64 encoded JSON Web Encryption (JWE) response containing encrypted Payment Credentials.

Example:
{
"kid":"a0eb65d572e556fddb68eb3a4078555605f7b283",
"cty":"json",
"typ":"JWT",
"enc":"A256GCM",
"alg":"RSA-OAEP-256"
}
[Encrypted Instrument Identifier Payment Credentials]

The encrypted Payment Credentials will contain the network token and cryptogram or dynamic CVV.
*/
type PostTokenPaymentCredentialsCreated struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload string
}

// IsSuccess returns true when this post token payment credentials created response has a 2xx status code
func (o *PostTokenPaymentCredentialsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post token payment credentials created response has a 3xx status code
func (o *PostTokenPaymentCredentialsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials created response has a 4xx status code
func (o *PostTokenPaymentCredentialsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post token payment credentials created response has a 5xx status code
func (o *PostTokenPaymentCredentialsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post token payment credentials created response a status code equal to that given
func (o *PostTokenPaymentCredentialsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post token payment credentials created response
func (o *PostTokenPaymentCredentialsCreated) Code() int {
	return 201
}

func (o *PostTokenPaymentCredentialsCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsCreated %s", 201, payload)
}

func (o *PostTokenPaymentCredentialsCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsCreated %s", 201, payload)
}

func (o *PostTokenPaymentCredentialsCreated) GetPayload() string {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenPaymentCredentialsBadRequest creates a PostTokenPaymentCredentialsBadRequest with default headers values
func NewPostTokenPaymentCredentialsBadRequest() *PostTokenPaymentCredentialsBadRequest {
	return &PostTokenPaymentCredentialsBadRequest{}
}

/*
PostTokenPaymentCredentialsBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type PostTokenPaymentCredentialsBadRequest struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostTokenPaymentCredentialsBadRequestBody
}

// IsSuccess returns true when this post token payment credentials bad request response has a 2xx status code
func (o *PostTokenPaymentCredentialsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post token payment credentials bad request response has a 3xx status code
func (o *PostTokenPaymentCredentialsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials bad request response has a 4xx status code
func (o *PostTokenPaymentCredentialsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post token payment credentials bad request response has a 5xx status code
func (o *PostTokenPaymentCredentialsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post token payment credentials bad request response a status code equal to that given
func (o *PostTokenPaymentCredentialsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post token payment credentials bad request response
func (o *PostTokenPaymentCredentialsBadRequest) Code() int {
	return 400
}

func (o *PostTokenPaymentCredentialsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsBadRequest %s", 400, payload)
}

func (o *PostTokenPaymentCredentialsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsBadRequest %s", 400, payload)
}

func (o *PostTokenPaymentCredentialsBadRequest) GetPayload() *PostTokenPaymentCredentialsBadRequestBody {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostTokenPaymentCredentialsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenPaymentCredentialsForbidden creates a PostTokenPaymentCredentialsForbidden with default headers values
func NewPostTokenPaymentCredentialsForbidden() *PostTokenPaymentCredentialsForbidden {
	return &PostTokenPaymentCredentialsForbidden{}
}

/*
PostTokenPaymentCredentialsForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type PostTokenPaymentCredentialsForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostTokenPaymentCredentialsForbiddenBody
}

// IsSuccess returns true when this post token payment credentials forbidden response has a 2xx status code
func (o *PostTokenPaymentCredentialsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post token payment credentials forbidden response has a 3xx status code
func (o *PostTokenPaymentCredentialsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials forbidden response has a 4xx status code
func (o *PostTokenPaymentCredentialsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post token payment credentials forbidden response has a 5xx status code
func (o *PostTokenPaymentCredentialsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post token payment credentials forbidden response a status code equal to that given
func (o *PostTokenPaymentCredentialsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post token payment credentials forbidden response
func (o *PostTokenPaymentCredentialsForbidden) Code() int {
	return 403
}

func (o *PostTokenPaymentCredentialsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsForbidden %s", 403, payload)
}

func (o *PostTokenPaymentCredentialsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsForbidden %s", 403, payload)
}

func (o *PostTokenPaymentCredentialsForbidden) GetPayload() *PostTokenPaymentCredentialsForbiddenBody {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostTokenPaymentCredentialsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenPaymentCredentialsNotFound creates a PostTokenPaymentCredentialsNotFound with default headers values
func NewPostTokenPaymentCredentialsNotFound() *PostTokenPaymentCredentialsNotFound {
	return &PostTokenPaymentCredentialsNotFound{}
}

/*
PostTokenPaymentCredentialsNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type PostTokenPaymentCredentialsNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostTokenPaymentCredentialsNotFoundBody
}

// IsSuccess returns true when this post token payment credentials not found response has a 2xx status code
func (o *PostTokenPaymentCredentialsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post token payment credentials not found response has a 3xx status code
func (o *PostTokenPaymentCredentialsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials not found response has a 4xx status code
func (o *PostTokenPaymentCredentialsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post token payment credentials not found response has a 5xx status code
func (o *PostTokenPaymentCredentialsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post token payment credentials not found response a status code equal to that given
func (o *PostTokenPaymentCredentialsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post token payment credentials not found response
func (o *PostTokenPaymentCredentialsNotFound) Code() int {
	return 404
}

func (o *PostTokenPaymentCredentialsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsNotFound %s", 404, payload)
}

func (o *PostTokenPaymentCredentialsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsNotFound %s", 404, payload)
}

func (o *PostTokenPaymentCredentialsNotFound) GetPayload() *PostTokenPaymentCredentialsNotFoundBody {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostTokenPaymentCredentialsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenPaymentCredentialsGone creates a PostTokenPaymentCredentialsGone with default headers values
func NewPostTokenPaymentCredentialsGone() *PostTokenPaymentCredentialsGone {
	return &PostTokenPaymentCredentialsGone{}
}

/*
PostTokenPaymentCredentialsGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type PostTokenPaymentCredentialsGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostTokenPaymentCredentialsGoneBody
}

// IsSuccess returns true when this post token payment credentials gone response has a 2xx status code
func (o *PostTokenPaymentCredentialsGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post token payment credentials gone response has a 3xx status code
func (o *PostTokenPaymentCredentialsGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials gone response has a 4xx status code
func (o *PostTokenPaymentCredentialsGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this post token payment credentials gone response has a 5xx status code
func (o *PostTokenPaymentCredentialsGone) IsServerError() bool {
	return false
}

// IsCode returns true when this post token payment credentials gone response a status code equal to that given
func (o *PostTokenPaymentCredentialsGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the post token payment credentials gone response
func (o *PostTokenPaymentCredentialsGone) Code() int {
	return 410
}

func (o *PostTokenPaymentCredentialsGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsGone %s", 410, payload)
}

func (o *PostTokenPaymentCredentialsGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsGone %s", 410, payload)
}

func (o *PostTokenPaymentCredentialsGone) GetPayload() *PostTokenPaymentCredentialsGoneBody {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostTokenPaymentCredentialsGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTokenPaymentCredentialsInternalServerError creates a PostTokenPaymentCredentialsInternalServerError with default headers values
func NewPostTokenPaymentCredentialsInternalServerError() *PostTokenPaymentCredentialsInternalServerError {
	return &PostTokenPaymentCredentialsInternalServerError{}
}

/*
PostTokenPaymentCredentialsInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type PostTokenPaymentCredentialsInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostTokenPaymentCredentialsInternalServerErrorBody
}

// IsSuccess returns true when this post token payment credentials internal server error response has a 2xx status code
func (o *PostTokenPaymentCredentialsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post token payment credentials internal server error response has a 3xx status code
func (o *PostTokenPaymentCredentialsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post token payment credentials internal server error response has a 4xx status code
func (o *PostTokenPaymentCredentialsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post token payment credentials internal server error response has a 5xx status code
func (o *PostTokenPaymentCredentialsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post token payment credentials internal server error response a status code equal to that given
func (o *PostTokenPaymentCredentialsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post token payment credentials internal server error response
func (o *PostTokenPaymentCredentialsInternalServerError) Code() int {
	return 500
}

func (o *PostTokenPaymentCredentialsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsInternalServerError %s", 500, payload)
}

func (o *PostTokenPaymentCredentialsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /tms/v2/tokens/{tokenId}/payment-credentials][%d] postTokenPaymentCredentialsInternalServerError %s", 500, payload)
}

func (o *PostTokenPaymentCredentialsInternalServerError) GetPayload() *PostTokenPaymentCredentialsInternalServerErrorBody {
	return o.Payload
}

func (o *PostTokenPaymentCredentialsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostTokenPaymentCredentialsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostTokenPaymentCredentialsBadRequestBody post token payment credentials bad request body
swagger:model PostTokenPaymentCredentialsBadRequestBody
*/
type PostTokenPaymentCredentialsBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*PostTokenPaymentCredentialsBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post token payment credentials bad request body
func (o *PostTokenPaymentCredentialsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials bad request body based on the context it is used
func (o *PostTokenPaymentCredentialsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postTokenPaymentCredentialsBadRequest"+"."+"errors", "body", []*PostTokenPaymentCredentialsBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsBadRequestBodyErrorsItems0 post token payment credentials bad request body errors items0
swagger:model PostTokenPaymentCredentialsBadRequestBodyErrorsItems0
*/
type PostTokenPaymentCredentialsBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - invalidHeaders
	//   - missingHeaders
	//   - invalidFields
	//   - missingFields
	//   - unsupportedPaymentMethodModification
	//   - invalidCombination
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post token payment credentials bad request body errors items0
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials bad request body errors items0 based on the context it is used
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0 post token payment credentials bad request body errors items0 details items0
swagger:model PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0
*/
type PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post token payment credentials bad request body errors items0 details items0
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post token payment credentials bad request body errors items0 details items0 based on the context it is used
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsBody post token payment credentials body
swagger:model PostTokenPaymentCredentialsBody
*/
type PostTokenPaymentCredentialsBody struct {

	// The type of payment credentials to be returned.
	// By default, payment credentials include network token and cryptogram or dynamic CVV.
	// If "NETWORK_TOKEN" is supplied then only network token will be returned and cryptogram or dynamic CVV will be excluded.
	//
	// Possible Values:
	//   - NETWORK_TOKEN
	//
	PaymentCredentialType string `json:"paymentCredentialType,omitempty"`
}

// Validate validates this post token payment credentials body
func (o *PostTokenPaymentCredentialsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post token payment credentials body based on context it is used
func (o *PostTokenPaymentCredentialsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsForbiddenBody post token payment credentials forbidden body
swagger:model PostTokenPaymentCredentialsForbiddenBody
*/
type PostTokenPaymentCredentialsForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*PostTokenPaymentCredentialsForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post token payment credentials forbidden body
func (o *PostTokenPaymentCredentialsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials forbidden body based on the context it is used
func (o *PostTokenPaymentCredentialsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postTokenPaymentCredentialsForbidden"+"."+"errors", "body", []*PostTokenPaymentCredentialsForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsForbiddenBodyErrorsItems0 post token payment credentials forbidden body errors items0
swagger:model PostTokenPaymentCredentialsForbiddenBodyErrorsItems0
*/
type PostTokenPaymentCredentialsForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post token payment credentials forbidden body errors items0
func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post token payment credentials forbidden body errors items0 based on the context it is used
func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsGoneBody post token payment credentials gone body
swagger:model PostTokenPaymentCredentialsGoneBody
*/
type PostTokenPaymentCredentialsGoneBody struct {

	// errors
	// Read Only: true
	Errors []*PostTokenPaymentCredentialsGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post token payment credentials gone body
func (o *PostTokenPaymentCredentialsGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials gone body based on the context it is used
func (o *PostTokenPaymentCredentialsGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postTokenPaymentCredentialsGone"+"."+"errors", "body", []*PostTokenPaymentCredentialsGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsGoneBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsGoneBodyErrorsItems0 post token payment credentials gone body errors items0
swagger:model PostTokenPaymentCredentialsGoneBodyErrorsItems0
*/
type PostTokenPaymentCredentialsGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post token payment credentials gone body errors items0
func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post token payment credentials gone body errors items0 based on the context it is used
func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsInternalServerErrorBody post token payment credentials internal server error body
swagger:model PostTokenPaymentCredentialsInternalServerErrorBody
*/
type PostTokenPaymentCredentialsInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post token payment credentials internal server error body
func (o *PostTokenPaymentCredentialsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials internal server error body based on the context it is used
func (o *PostTokenPaymentCredentialsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postTokenPaymentCredentialsInternalServerError"+"."+"errors", "body", []*PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0 post token payment credentials internal server error body errors items0
swagger:model PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0
*/
type PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post token payment credentials internal server error body errors items0
func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post token payment credentials internal server error body errors items0 based on the context it is used
func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsNotFoundBody post token payment credentials not found body
swagger:model PostTokenPaymentCredentialsNotFoundBody
*/
type PostTokenPaymentCredentialsNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*PostTokenPaymentCredentialsNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post token payment credentials not found body
func (o *PostTokenPaymentCredentialsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post token payment credentials not found body based on the context it is used
func (o *PostTokenPaymentCredentialsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postTokenPaymentCredentialsNotFound"+"."+"errors", "body", []*PostTokenPaymentCredentialsNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokenPaymentCredentialsNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTokenPaymentCredentialsNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTokenPaymentCredentialsNotFoundBodyErrorsItems0 post token payment credentials not found body errors items0
swagger:model PostTokenPaymentCredentialsNotFoundBodyErrorsItems0
*/
type PostTokenPaymentCredentialsNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post token payment credentials not found body errors items0
func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post token payment credentials not found body errors items0 based on the context it is used
func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenPaymentCredentialsNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostTokenPaymentCredentialsNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
