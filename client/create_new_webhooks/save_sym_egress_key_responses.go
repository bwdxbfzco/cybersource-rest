// Code generated by go-swagger; DO NOT EDIT.

package create_new_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaveSymEgressKeyReader is a Reader for the SaveSymEgressKey structure.
type SaveSymEgressKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveSymEgressKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSaveSymEgressKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSaveSymEgressKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSaveSymEgressKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewSaveSymEgressKeyBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/egress/v2/keys-sym] saveSymEgressKey", response, response.Code())
	}
}

// NewSaveSymEgressKeyCreated creates a SaveSymEgressKeyCreated with default headers values
func NewSaveSymEgressKeyCreated() *SaveSymEgressKeyCreated {
	return &SaveSymEgressKeyCreated{}
}

/*
SaveSymEgressKeyCreated describes a response with status code 201, with default header values.

Successful Response
*/
type SaveSymEgressKeyCreated struct {
	Payload *SaveSymEgressKeyCreatedBody
}

// IsSuccess returns true when this save sym egress key created response has a 2xx status code
func (o *SaveSymEgressKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save sym egress key created response has a 3xx status code
func (o *SaveSymEgressKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save sym egress key created response has a 4xx status code
func (o *SaveSymEgressKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this save sym egress key created response has a 5xx status code
func (o *SaveSymEgressKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this save sym egress key created response a status code equal to that given
func (o *SaveSymEgressKeyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the save sym egress key created response
func (o *SaveSymEgressKeyCreated) Code() int {
	return 201
}

func (o *SaveSymEgressKeyCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyCreated %s", 201, payload)
}

func (o *SaveSymEgressKeyCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyCreated %s", 201, payload)
}

func (o *SaveSymEgressKeyCreated) GetPayload() *SaveSymEgressKeyCreatedBody {
	return o.Payload
}

func (o *SaveSymEgressKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SaveSymEgressKeyCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveSymEgressKeyBadRequest creates a SaveSymEgressKeyBadRequest with default headers values
func NewSaveSymEgressKeyBadRequest() *SaveSymEgressKeyBadRequest {
	return &SaveSymEgressKeyBadRequest{}
}

/*
SaveSymEgressKeyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SaveSymEgressKeyBadRequest struct {
}

// IsSuccess returns true when this save sym egress key bad request response has a 2xx status code
func (o *SaveSymEgressKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save sym egress key bad request response has a 3xx status code
func (o *SaveSymEgressKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save sym egress key bad request response has a 4xx status code
func (o *SaveSymEgressKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this save sym egress key bad request response has a 5xx status code
func (o *SaveSymEgressKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this save sym egress key bad request response a status code equal to that given
func (o *SaveSymEgressKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the save sym egress key bad request response
func (o *SaveSymEgressKeyBadRequest) Code() int {
	return 400
}

func (o *SaveSymEgressKeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyBadRequest", 400)
}

func (o *SaveSymEgressKeyBadRequest) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyBadRequest", 400)
}

func (o *SaveSymEgressKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveSymEgressKeyUnauthorized creates a SaveSymEgressKeyUnauthorized with default headers values
func NewSaveSymEgressKeyUnauthorized() *SaveSymEgressKeyUnauthorized {
	return &SaveSymEgressKeyUnauthorized{}
}

/*
SaveSymEgressKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type SaveSymEgressKeyUnauthorized struct {
}

// IsSuccess returns true when this save sym egress key unauthorized response has a 2xx status code
func (o *SaveSymEgressKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save sym egress key unauthorized response has a 3xx status code
func (o *SaveSymEgressKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save sym egress key unauthorized response has a 4xx status code
func (o *SaveSymEgressKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this save sym egress key unauthorized response has a 5xx status code
func (o *SaveSymEgressKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this save sym egress key unauthorized response a status code equal to that given
func (o *SaveSymEgressKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the save sym egress key unauthorized response
func (o *SaveSymEgressKeyUnauthorized) Code() int {
	return 401
}

func (o *SaveSymEgressKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyUnauthorized", 401)
}

func (o *SaveSymEgressKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyUnauthorized", 401)
}

func (o *SaveSymEgressKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveSymEgressKeyBadGateway creates a SaveSymEgressKeyBadGateway with default headers values
func NewSaveSymEgressKeyBadGateway() *SaveSymEgressKeyBadGateway {
	return &SaveSymEgressKeyBadGateway{}
}

/*
SaveSymEgressKeyBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout
*/
type SaveSymEgressKeyBadGateway struct {
}

// IsSuccess returns true when this save sym egress key bad gateway response has a 2xx status code
func (o *SaveSymEgressKeyBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save sym egress key bad gateway response has a 3xx status code
func (o *SaveSymEgressKeyBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save sym egress key bad gateway response has a 4xx status code
func (o *SaveSymEgressKeyBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this save sym egress key bad gateway response has a 5xx status code
func (o *SaveSymEgressKeyBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this save sym egress key bad gateway response a status code equal to that given
func (o *SaveSymEgressKeyBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the save sym egress key bad gateway response
func (o *SaveSymEgressKeyBadGateway) Code() int {
	return 502
}

func (o *SaveSymEgressKeyBadGateway) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyBadGateway", 502)
}

func (o *SaveSymEgressKeyBadGateway) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-sym][%d] saveSymEgressKeyBadGateway", 502)
}

func (o *SaveSymEgressKeyBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SaveSymEgressKeyBody save sym egress key body
swagger:model SaveSymEgressKeyBody
*/
type SaveSymEgressKeyBody struct {

	// client reference information
	ClientReferenceInformation *SaveSymEgressKeyParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// Client request action.
	//
	// Required: true
	ClientRequestAction *string `json:"clientRequestAction"`

	// key information
	// Required: true
	KeyInformation *SaveSymEgressKeyParamsBodyKeyInformation `json:"keyInformation"`
}

// Validate validates this save sym egress key body
func (o *SaveSymEgressKeyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientRequestAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveSymEgressKey" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveSymEgressKey" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveSymEgressKeyBody) validateClientRequestAction(formats strfmt.Registry) error {

	if err := validate.Required("SaveSymEgressKey"+"."+"clientRequestAction", "body", o.ClientRequestAction); err != nil {
		return err
	}

	return nil
}

func (o *SaveSymEgressKeyBody) validateKeyInformation(formats strfmt.Registry) error {

	if err := validate.Required("SaveSymEgressKey"+"."+"keyInformation", "body", o.KeyInformation); err != nil {
		return err
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveSymEgressKey" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveSymEgressKey" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this save sym egress key body based on the context it is used
func (o *SaveSymEgressKeyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveSymEgressKey" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveSymEgressKey" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveSymEgressKeyBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveSymEgressKey" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveSymEgressKey" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyBody) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyCreatedBody Egress Key Information Response
//
swagger:model SaveSymEgressKeyCreatedBody
*/
type SaveSymEgressKeyCreatedBody struct {

	// client reference information
	ClientReferenceInformation *SaveSymEgressKeyCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation *SaveSymEgressKeyCreatedBodyKeyInformation `json:"keyInformation,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this save sym egress key created body
func (o *SaveSymEgressKeyCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveSymEgressKeyCreatedBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this save sym egress key created body based on the context it is used
func (o *SaveSymEgressKeyCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveSymEgressKeyCreatedBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if swag.IsZero(o.KeyInformation) { // not required
			return nil
		}

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBody) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyCreatedBodyClientReferenceInformation Object for client references.
swagger:model SaveSymEgressKeyCreatedBodyClientReferenceInformation
*/
type SaveSymEgressKeyCreatedBodyClientReferenceInformation struct {

	// Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this save sym egress key created body client reference information
func (o *SaveSymEgressKeyCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("saveSymEgressKeyCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this save sym egress key created body client reference information based on context it is used
func (o *SaveSymEgressKeyCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyCreatedBodyKeyInformation Egress Key Information
//
swagger:model SaveSymEgressKeyCreatedBodyKeyInformation
*/
type SaveSymEgressKeyCreatedBodyKeyInformation struct {

	// Client key Id
	//
	ClientKeyID string `json:"clientKeyId,omitempty"`

	// error information
	ErrorInformation *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// Type of the key
	//
	KeyType string `json:"keyType,omitempty"`

	// Message in case of failed key
	//
	Message string `json:"message,omitempty"`

	// Organization Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Provider name
	//
	Provider string `json:"provider,omitempty"`

	// The status of the key
	//
	Status string `json:"status,omitempty"`

	// Tenant name
	//
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this save sym egress key created body key information
func (o *SaveSymEgressKeyCreatedBodyKeyInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBodyKeyInformation) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this save sym egress key created body key information based on the context it is used
func (o *SaveSymEgressKeyCreatedBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBodyKeyInformation) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyCreatedBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation save sym egress key created body key information error information
swagger:model SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation
*/
type SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation struct {

	// details
	Details []*SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this save sym egress key created body key information error information
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this save sym egress key created body key information error information based on the context it is used
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saveSymEgressKeyCreated" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyCreatedBodyKeyInformationErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0 save sym egress key created body key information error information details items0
swagger:model SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0
*/
type SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this save sym egress key created body key information error information details items0
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this save sym egress key created body key information error information details items0 based on context it is used
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyCreatedBodyKeyInformationErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyParamsBodyClientReferenceInformation Object for client references.
swagger:model SaveSymEgressKeyParamsBodyClientReferenceInformation
*/
type SaveSymEgressKeyParamsBodyClientReferenceInformation struct {

	// Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this save sym egress key params body client reference information
func (o *SaveSymEgressKeyParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveSymEgressKeyParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("SaveSymEgressKey"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this save sym egress key params body client reference information based on context it is used
func (o *SaveSymEgressKeyParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveSymEgressKeyParamsBodyKeyInformation Egress Key Information Request
//
swagger:model SaveSymEgressKeyParamsBodyKeyInformation
*/
type SaveSymEgressKeyParamsBodyKeyInformation struct {

	// Client key Id
	//
	ClientKeyID string `json:"clientKeyId,omitempty"`

	// Key expiry duration in days
	//
	ExpiryDuration string `json:"expiryDuration,omitempty"`

	// Value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// Type of the key
	//
	KeyType string `json:"keyType,omitempty"`

	// Organization Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Provider name
	//
	Provider string `json:"provider,omitempty"`

	// The status of the key
	//
	Status string `json:"status,omitempty"`

	// Tenant name
	//
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this save sym egress key params body key information
func (o *SaveSymEgressKeyParamsBodyKeyInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this save sym egress key params body key information based on context it is used
func (o *SaveSymEgressKeyParamsBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveSymEgressKeyParamsBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveSymEgressKeyParamsBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res SaveSymEgressKeyParamsBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
