// Code generated by go-swagger; DO NOT EDIT.

package create_new_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new create new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new create new webhooks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new create new webhooks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for create new webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationJSONCharsetUTF8 sets the Accept header to "application/json;charset=utf-8".
func WithAcceptApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json;charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWebhookSubscription(params *CreateWebhookSubscriptionParams, opts ...ClientOption) (*CreateWebhookSubscriptionCreated, error)

	FindProductsToSubscribe(params *FindProductsToSubscribeParams, opts ...ClientOption) (*FindProductsToSubscribeOK, error)

	SaveSymEgressKey(params *SaveSymEgressKeyParams, opts ...ClientOption) (*SaveSymEgressKeyCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateWebhookSubscription creates a webhook

	Create a new webhook subscription. Before creating a webhook, ensure that a security key has been created at the top of this developer center section.

You will not need to pass us back the key during the creation of the webhook, but you will receive an error if you did not already create a key or store one on file.
*/
func (a *Client) CreateWebhookSubscription(params *CreateWebhookSubscriptionParams, opts ...ClientOption) (*CreateWebhookSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWebhookSubscription",
		Method:             "POST",
		PathPattern:        "/notification-subscriptions/v1/webhooks",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWebhookSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWebhookSubscriptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWebhookSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindProductsToSubscribe finds products you can subscribe to

Retrieve a list of products and event types that your account is eligible for. These products and events are the ones that you may subscribe to in the next step of creating webhooks.
*/
func (a *Client) FindProductsToSubscribe(params *FindProductsToSubscribeParams, opts ...ClientOption) (*FindProductsToSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindProductsToSubscribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findProductsToSubscribe",
		Method:             "GET",
		PathPattern:        "/notification-subscriptions/v1/products/{organizationId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindProductsToSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindProductsToSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findProductsToSubscribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SaveSymEgressKey creates webhook security keys

	Create security keys that CyberSource will use internally to connect to your servers and validate messages using a digital signature.

Select the CREATE example for CyberSource to generate the key on our server and maintain it for you as well. Remeber to save the key in the API response, so that you can use it to validate messages later.
*/
func (a *Client) SaveSymEgressKey(params *SaveSymEgressKeyParams, opts ...ClientOption) (*SaveSymEgressKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveSymEgressKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveSymEgressKey",
		Method:             "POST",
		PathPattern:        "/kms/egress/v2/keys-sym",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveSymEgressKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveSymEgressKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveSymEgressKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
