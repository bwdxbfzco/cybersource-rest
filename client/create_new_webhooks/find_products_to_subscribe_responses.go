// Code generated by go-swagger; DO NOT EDIT.

package create_new_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FindProductsToSubscribeReader is a Reader for the FindProductsToSubscribe structure.
type FindProductsToSubscribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindProductsToSubscribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindProductsToSubscribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindProductsToSubscribeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindProductsToSubscribeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFindProductsToSubscribeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /notification-subscriptions/v1/products/{organizationId}] findProductsToSubscribe", response, response.Code())
	}
}

// NewFindProductsToSubscribeOK creates a FindProductsToSubscribeOK with default headers values
func NewFindProductsToSubscribeOK() *FindProductsToSubscribeOK {
	return &FindProductsToSubscribeOK{}
}

/*
FindProductsToSubscribeOK describes a response with status code 200, with default header values.

OK
*/
type FindProductsToSubscribeOK struct {
	Payload []*FindProductsToSubscribeOKBodyItems0
}

// IsSuccess returns true when this find products to subscribe o k response has a 2xx status code
func (o *FindProductsToSubscribeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find products to subscribe o k response has a 3xx status code
func (o *FindProductsToSubscribeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find products to subscribe o k response has a 4xx status code
func (o *FindProductsToSubscribeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find products to subscribe o k response has a 5xx status code
func (o *FindProductsToSubscribeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find products to subscribe o k response a status code equal to that given
func (o *FindProductsToSubscribeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find products to subscribe o k response
func (o *FindProductsToSubscribeOK) Code() int {
	return 200
}

func (o *FindProductsToSubscribeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeOK %s", 200, payload)
}

func (o *FindProductsToSubscribeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeOK %s", 200, payload)
}

func (o *FindProductsToSubscribeOK) GetPayload() []*FindProductsToSubscribeOKBodyItems0 {
	return o.Payload
}

func (o *FindProductsToSubscribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindProductsToSubscribeUnauthorized creates a FindProductsToSubscribeUnauthorized with default headers values
func NewFindProductsToSubscribeUnauthorized() *FindProductsToSubscribeUnauthorized {
	return &FindProductsToSubscribeUnauthorized{}
}

/*
FindProductsToSubscribeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FindProductsToSubscribeUnauthorized struct {
}

// IsSuccess returns true when this find products to subscribe unauthorized response has a 2xx status code
func (o *FindProductsToSubscribeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find products to subscribe unauthorized response has a 3xx status code
func (o *FindProductsToSubscribeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find products to subscribe unauthorized response has a 4xx status code
func (o *FindProductsToSubscribeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find products to subscribe unauthorized response has a 5xx status code
func (o *FindProductsToSubscribeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find products to subscribe unauthorized response a status code equal to that given
func (o *FindProductsToSubscribeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the find products to subscribe unauthorized response
func (o *FindProductsToSubscribeUnauthorized) Code() int {
	return 401
}

func (o *FindProductsToSubscribeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeUnauthorized", 401)
}

func (o *FindProductsToSubscribeUnauthorized) String() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeUnauthorized", 401)
}

func (o *FindProductsToSubscribeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindProductsToSubscribeNotFound creates a FindProductsToSubscribeNotFound with default headers values
func NewFindProductsToSubscribeNotFound() *FindProductsToSubscribeNotFound {
	return &FindProductsToSubscribeNotFound{}
}

/*
FindProductsToSubscribeNotFound describes a response with status code 404, with default header values.

Not found
*/
type FindProductsToSubscribeNotFound struct {
}

// IsSuccess returns true when this find products to subscribe not found response has a 2xx status code
func (o *FindProductsToSubscribeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find products to subscribe not found response has a 3xx status code
func (o *FindProductsToSubscribeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find products to subscribe not found response has a 4xx status code
func (o *FindProductsToSubscribeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this find products to subscribe not found response has a 5xx status code
func (o *FindProductsToSubscribeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this find products to subscribe not found response a status code equal to that given
func (o *FindProductsToSubscribeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the find products to subscribe not found response
func (o *FindProductsToSubscribeNotFound) Code() int {
	return 404
}

func (o *FindProductsToSubscribeNotFound) Error() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeNotFound", 404)
}

func (o *FindProductsToSubscribeNotFound) String() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeNotFound", 404)
}

func (o *FindProductsToSubscribeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindProductsToSubscribeInternalServerError creates a FindProductsToSubscribeInternalServerError with default headers values
func NewFindProductsToSubscribeInternalServerError() *FindProductsToSubscribeInternalServerError {
	return &FindProductsToSubscribeInternalServerError{}
}

/*
FindProductsToSubscribeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type FindProductsToSubscribeInternalServerError struct {
}

// IsSuccess returns true when this find products to subscribe internal server error response has a 2xx status code
func (o *FindProductsToSubscribeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find products to subscribe internal server error response has a 3xx status code
func (o *FindProductsToSubscribeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find products to subscribe internal server error response has a 4xx status code
func (o *FindProductsToSubscribeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this find products to subscribe internal server error response has a 5xx status code
func (o *FindProductsToSubscribeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this find products to subscribe internal server error response a status code equal to that given
func (o *FindProductsToSubscribeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the find products to subscribe internal server error response
func (o *FindProductsToSubscribeInternalServerError) Code() int {
	return 500
}

func (o *FindProductsToSubscribeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeInternalServerError", 500)
}

func (o *FindProductsToSubscribeInternalServerError) String() string {
	return fmt.Sprintf("[GET /notification-subscriptions/v1/products/{organizationId}][%d] findProductsToSubscribeInternalServerError", 500)
}

func (o *FindProductsToSubscribeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
FindProductsToSubscribeOKBodyItems0 find products to subscribe o k body items0
swagger:model FindProductsToSubscribeOKBodyItems0
*/
type FindProductsToSubscribeOKBodyItems0 struct {

	// event types
	EventTypes []*FindProductsToSubscribeOKBodyItems0EventTypesItems0 `json:"eventTypes"`

	// Product ID.
	ProductID string `json:"productId,omitempty"`

	// Product Name.
	ProductName string `json:"productName,omitempty"`
}

// Validate validates this find products to subscribe o k body items0
func (o *FindProductsToSubscribeOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindProductsToSubscribeOKBodyItems0) validateEventTypes(formats strfmt.Registry) error {
	if swag.IsZero(o.EventTypes) { // not required
		return nil
	}

	for i := 0; i < len(o.EventTypes); i++ {
		if swag.IsZero(o.EventTypes[i]) { // not required
			continue
		}

		if o.EventTypes[i] != nil {
			if err := o.EventTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this find products to subscribe o k body items0 based on the context it is used
func (o *FindProductsToSubscribeOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEventTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindProductsToSubscribeOKBodyItems0) contextValidateEventTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.EventTypes); i++ {

		if o.EventTypes[i] != nil {

			if swag.IsZero(o.EventTypes[i]) { // not required
				return nil
			}

			if err := o.EventTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FindProductsToSubscribeOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindProductsToSubscribeOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res FindProductsToSubscribeOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FindProductsToSubscribeOKBodyItems0EventTypesItems0 find products to subscribe o k body items0 event types items0
// Example: {"eventName":"payments.credits.accepted","payloadEncryption":true}
swagger:model FindProductsToSubscribeOKBodyItems0EventTypesItems0
*/
type FindProductsToSubscribeOKBodyItems0EventTypesItems0 struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// event name
	EventName string `json:"eventName,omitempty"`

	// frequency
	Frequency *int64 `json:"frequency,omitempty"`

	// payload encryption
	PayloadEncryption *bool `json:"payloadEncryption,omitempty"`

	// time sensitivity
	TimeSensitivity *bool `json:"timeSensitivity,omitempty"`
}

// Validate validates this find products to subscribe o k body items0 event types items0
func (o *FindProductsToSubscribeOKBodyItems0EventTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this find products to subscribe o k body items0 event types items0 based on context it is used
func (o *FindProductsToSubscribeOKBodyItems0EventTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FindProductsToSubscribeOKBodyItems0EventTypesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FindProductsToSubscribeOKBodyItems0EventTypesItems0) UnmarshalBinary(b []byte) error {
	var res FindProductsToSubscribeOKBodyItems0EventTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
