// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchInstrumentIdentifierParams creates a new PatchInstrumentIdentifierParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchInstrumentIdentifierParams() *PatchInstrumentIdentifierParams {
	return &PatchInstrumentIdentifierParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchInstrumentIdentifierParamsWithTimeout creates a new PatchInstrumentIdentifierParams object
// with the ability to set a timeout on a request.
func NewPatchInstrumentIdentifierParamsWithTimeout(timeout time.Duration) *PatchInstrumentIdentifierParams {
	return &PatchInstrumentIdentifierParams{
		timeout: timeout,
	}
}

// NewPatchInstrumentIdentifierParamsWithContext creates a new PatchInstrumentIdentifierParams object
// with the ability to set a context for a request.
func NewPatchInstrumentIdentifierParamsWithContext(ctx context.Context) *PatchInstrumentIdentifierParams {
	return &PatchInstrumentIdentifierParams{
		Context: ctx,
	}
}

// NewPatchInstrumentIdentifierParamsWithHTTPClient creates a new PatchInstrumentIdentifierParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchInstrumentIdentifierParamsWithHTTPClient(client *http.Client) *PatchInstrumentIdentifierParams {
	return &PatchInstrumentIdentifierParams{
		HTTPClient: client,
	}
}

/*
PatchInstrumentIdentifierParams contains all the parameters to send to the API endpoint

	for the patch instrument identifier operation.

	Typically these are written to a http.Request.
*/
type PatchInstrumentIdentifierParams struct {

	/* IfMatch.

	   Contains an ETag value from a GET request to make the request conditional.
	*/
	IfMatch *string

	/* InstrumentIdentifierID.

	   The Id of an Instrument Identifier.
	*/
	InstrumentIdentifierID string

	/* PatchInstrumentIdentifierRequest.

	   Specify the previous transaction Id to update.
	*/
	PatchInstrumentIdentifierRequest PatchInstrumentIdentifierBody

	/* ProfileID.

	   The Id of a profile containing user specific TMS configuration.
	*/
	ProfileID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch instrument identifier params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchInstrumentIdentifierParams) WithDefaults() *PatchInstrumentIdentifierParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch instrument identifier params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchInstrumentIdentifierParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithTimeout(timeout time.Duration) *PatchInstrumentIdentifierParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithContext(ctx context.Context) *PatchInstrumentIdentifierParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithHTTPClient(client *http.Client) *PatchInstrumentIdentifierParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithIfMatch(ifMatch *string) *PatchInstrumentIdentifierParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithInstrumentIdentifierID adds the instrumentIdentifierID to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithInstrumentIdentifierID(instrumentIdentifierID string) *PatchInstrumentIdentifierParams {
	o.SetInstrumentIdentifierID(instrumentIdentifierID)
	return o
}

// SetInstrumentIdentifierID adds the instrumentIdentifierId to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetInstrumentIdentifierID(instrumentIdentifierID string) {
	o.InstrumentIdentifierID = instrumentIdentifierID
}

// WithPatchInstrumentIdentifierRequest adds the patchInstrumentIdentifierRequest to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithPatchInstrumentIdentifierRequest(patchInstrumentIdentifierRequest PatchInstrumentIdentifierBody) *PatchInstrumentIdentifierParams {
	o.SetPatchInstrumentIdentifierRequest(patchInstrumentIdentifierRequest)
	return o
}

// SetPatchInstrumentIdentifierRequest adds the patchInstrumentIdentifierRequest to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetPatchInstrumentIdentifierRequest(patchInstrumentIdentifierRequest PatchInstrumentIdentifierBody) {
	o.PatchInstrumentIdentifierRequest = patchInstrumentIdentifierRequest
}

// WithProfileID adds the profileID to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) WithProfileID(profileID *string) *PatchInstrumentIdentifierParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the patch instrument identifier params
func (o *PatchInstrumentIdentifierParams) SetProfileID(profileID *string) {
	o.ProfileID = profileID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchInstrumentIdentifierParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param instrumentIdentifierId
	if err := r.SetPathParam("instrumentIdentifierId", o.InstrumentIdentifierID); err != nil {
		return err
	}
	if err := r.SetBodyParam(o.PatchInstrumentIdentifierRequest); err != nil {
		return err
	}

	if o.ProfileID != nil {

		// header param profile-id
		if err := r.SetHeaderParam("profile-id", *o.ProfileID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
