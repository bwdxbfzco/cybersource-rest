// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteInstrumentIdentifierReader is a Reader for the DeleteInstrumentIdentifier structure.
type DeleteInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteInstrumentIdentifierNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteInstrumentIdentifierConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewDeleteInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}] deleteInstrumentIdentifier", response, response.Code())
	}
}

// NewDeleteInstrumentIdentifierNoContent creates a DeleteInstrumentIdentifierNoContent with default headers values
func NewDeleteInstrumentIdentifierNoContent() *DeleteInstrumentIdentifierNoContent {
	return &DeleteInstrumentIdentifierNoContent{}
}

/*
DeleteInstrumentIdentifierNoContent describes a response with status code 204, with default header values.

The request is fulfilled but does not need to return a body
*/
type DeleteInstrumentIdentifierNoContent struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

// IsSuccess returns true when this delete instrument identifier no content response has a 2xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete instrument identifier no content response has a 3xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier no content response has a 4xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete instrument identifier no content response has a 5xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier no content response a status code equal to that given
func (o *DeleteInstrumentIdentifierNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete instrument identifier no content response
func (o *DeleteInstrumentIdentifierNoContent) Code() int {
	return 204
}

func (o *DeleteInstrumentIdentifierNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierNoContent", 204)
}

func (o *DeleteInstrumentIdentifierNoContent) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierNoContent", 204)
}

func (o *DeleteInstrumentIdentifierNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	return nil
}

// NewDeleteInstrumentIdentifierForbidden creates a DeleteInstrumentIdentifierForbidden with default headers values
func NewDeleteInstrumentIdentifierForbidden() *DeleteInstrumentIdentifierForbidden {
	return &DeleteInstrumentIdentifierForbidden{}
}

/*
DeleteInstrumentIdentifierForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type DeleteInstrumentIdentifierForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierForbiddenBody
}

// IsSuccess returns true when this delete instrument identifier forbidden response has a 2xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier forbidden response has a 3xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier forbidden response has a 4xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier forbidden response has a 5xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier forbidden response a status code equal to that given
func (o *DeleteInstrumentIdentifierForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete instrument identifier forbidden response
func (o *DeleteInstrumentIdentifierForbidden) Code() int {
	return 403
}

func (o *DeleteInstrumentIdentifierForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierForbidden %s", 403, payload)
}

func (o *DeleteInstrumentIdentifierForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierForbidden %s", 403, payload)
}

func (o *DeleteInstrumentIdentifierForbidden) GetPayload() *DeleteInstrumentIdentifierForbiddenBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierNotFound creates a DeleteInstrumentIdentifierNotFound with default headers values
func NewDeleteInstrumentIdentifierNotFound() *DeleteInstrumentIdentifierNotFound {
	return &DeleteInstrumentIdentifierNotFound{}
}

/*
DeleteInstrumentIdentifierNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type DeleteInstrumentIdentifierNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierNotFoundBody
}

// IsSuccess returns true when this delete instrument identifier not found response has a 2xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier not found response has a 3xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier not found response has a 4xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier not found response has a 5xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier not found response a status code equal to that given
func (o *DeleteInstrumentIdentifierNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete instrument identifier not found response
func (o *DeleteInstrumentIdentifierNotFound) Code() int {
	return 404
}

func (o *DeleteInstrumentIdentifierNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierNotFound %s", 404, payload)
}

func (o *DeleteInstrumentIdentifierNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierNotFound %s", 404, payload)
}

func (o *DeleteInstrumentIdentifierNotFound) GetPayload() *DeleteInstrumentIdentifierNotFoundBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierConflict creates a DeleteInstrumentIdentifierConflict with default headers values
func NewDeleteInstrumentIdentifierConflict() *DeleteInstrumentIdentifierConflict {
	return &DeleteInstrumentIdentifierConflict{}
}

/*
DeleteInstrumentIdentifierConflict describes a response with status code 409, with default header values.

Conflict. The token is linked to a Payment Instrument.
*/
type DeleteInstrumentIdentifierConflict struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierConflictBody
}

// IsSuccess returns true when this delete instrument identifier conflict response has a 2xx status code
func (o *DeleteInstrumentIdentifierConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier conflict response has a 3xx status code
func (o *DeleteInstrumentIdentifierConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier conflict response has a 4xx status code
func (o *DeleteInstrumentIdentifierConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier conflict response has a 5xx status code
func (o *DeleteInstrumentIdentifierConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier conflict response a status code equal to that given
func (o *DeleteInstrumentIdentifierConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete instrument identifier conflict response
func (o *DeleteInstrumentIdentifierConflict) Code() int {
	return 409
}

func (o *DeleteInstrumentIdentifierConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierConflict %s", 409, payload)
}

func (o *DeleteInstrumentIdentifierConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierConflict %s", 409, payload)
}

func (o *DeleteInstrumentIdentifierConflict) GetPayload() *DeleteInstrumentIdentifierConflictBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierGone creates a DeleteInstrumentIdentifierGone with default headers values
func NewDeleteInstrumentIdentifierGone() *DeleteInstrumentIdentifierGone {
	return &DeleteInstrumentIdentifierGone{}
}

/*
DeleteInstrumentIdentifierGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type DeleteInstrumentIdentifierGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierGoneBody
}

// IsSuccess returns true when this delete instrument identifier gone response has a 2xx status code
func (o *DeleteInstrumentIdentifierGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier gone response has a 3xx status code
func (o *DeleteInstrumentIdentifierGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier gone response has a 4xx status code
func (o *DeleteInstrumentIdentifierGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier gone response has a 5xx status code
func (o *DeleteInstrumentIdentifierGone) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier gone response a status code equal to that given
func (o *DeleteInstrumentIdentifierGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the delete instrument identifier gone response
func (o *DeleteInstrumentIdentifierGone) Code() int {
	return 410
}

func (o *DeleteInstrumentIdentifierGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierGone %s", 410, payload)
}

func (o *DeleteInstrumentIdentifierGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierGone %s", 410, payload)
}

func (o *DeleteInstrumentIdentifierGone) GetPayload() *DeleteInstrumentIdentifierGoneBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierFailedDependency creates a DeleteInstrumentIdentifierFailedDependency with default headers values
func NewDeleteInstrumentIdentifierFailedDependency() *DeleteInstrumentIdentifierFailedDependency {
	return &DeleteInstrumentIdentifierFailedDependency{}
}

/*
DeleteInstrumentIdentifierFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type DeleteInstrumentIdentifierFailedDependency struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierFailedDependencyBody
}

// IsSuccess returns true when this delete instrument identifier failed dependency response has a 2xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier failed dependency response has a 3xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier failed dependency response has a 4xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier failed dependency response has a 5xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier failed dependency response a status code equal to that given
func (o *DeleteInstrumentIdentifierFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the delete instrument identifier failed dependency response
func (o *DeleteInstrumentIdentifierFailedDependency) Code() int {
	return 424
}

func (o *DeleteInstrumentIdentifierFailedDependency) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierFailedDependency %s", 424, payload)
}

func (o *DeleteInstrumentIdentifierFailedDependency) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierFailedDependency %s", 424, payload)
}

func (o *DeleteInstrumentIdentifierFailedDependency) GetPayload() *DeleteInstrumentIdentifierFailedDependencyBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierInternalServerError creates a DeleteInstrumentIdentifierInternalServerError with default headers values
func NewDeleteInstrumentIdentifierInternalServerError() *DeleteInstrumentIdentifierInternalServerError {
	return &DeleteInstrumentIdentifierInternalServerError{}
}

/*
DeleteInstrumentIdentifierInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type DeleteInstrumentIdentifierInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierInternalServerErrorBody
}

// IsSuccess returns true when this delete instrument identifier internal server error response has a 2xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier internal server error response has a 3xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier internal server error response has a 4xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete instrument identifier internal server error response has a 5xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete instrument identifier internal server error response a status code equal to that given
func (o *DeleteInstrumentIdentifierInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete instrument identifier internal server error response
func (o *DeleteInstrumentIdentifierInternalServerError) Code() int {
	return 500
}

func (o *DeleteInstrumentIdentifierInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierInternalServerError %s", 500, payload)
}

func (o *DeleteInstrumentIdentifierInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierId}][%d] deleteInstrumentIdentifierInternalServerError %s", 500, payload)
}

func (o *DeleteInstrumentIdentifierInternalServerError) GetPayload() *DeleteInstrumentIdentifierInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteInstrumentIdentifierInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteInstrumentIdentifierConflictBody delete instrument identifier conflict body
swagger:model DeleteInstrumentIdentifierConflictBody
*/
type DeleteInstrumentIdentifierConflictBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierConflictBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier conflict body
func (o *DeleteInstrumentIdentifierConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierConflict" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierConflict" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier conflict body based on the context it is used
func (o *DeleteInstrumentIdentifierConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierConflict"+"."+"errors", "body", []*DeleteInstrumentIdentifierConflictBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierConflict" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierConflict" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierConflictBodyErrorsItems0 delete instrument identifier conflict body errors items0
swagger:model DeleteInstrumentIdentifierConflictBodyErrorsItems0
*/
type DeleteInstrumentIdentifierConflictBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - instrumentIdentifierDeletionError
	//   - tokenIdConflict
	//   - conflict
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier conflict body errors items0
func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier conflict body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierFailedDependencyBody delete instrument identifier failed dependency body
swagger:model DeleteInstrumentIdentifierFailedDependencyBody
*/
type DeleteInstrumentIdentifierFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier failed dependency body
func (o *DeleteInstrumentIdentifierFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier failed dependency body based on the context it is used
func (o *DeleteInstrumentIdentifierFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierFailedDependency"+"."+"errors", "body", []*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 delete instrument identifier failed dependency body errors items0
swagger:model DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0
*/
type DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier failed dependency body errors items0
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier failed dependency body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierForbiddenBody delete instrument identifier forbidden body
swagger:model DeleteInstrumentIdentifierForbiddenBody
*/
type DeleteInstrumentIdentifierForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier forbidden body
func (o *DeleteInstrumentIdentifierForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier forbidden body based on the context it is used
func (o *DeleteInstrumentIdentifierForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierForbidden"+"."+"errors", "body", []*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 delete instrument identifier forbidden body errors items0
swagger:model DeleteInstrumentIdentifierForbiddenBodyErrorsItems0
*/
type DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier forbidden body errors items0
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier forbidden body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierGoneBody delete instrument identifier gone body
swagger:model DeleteInstrumentIdentifierGoneBody
*/
type DeleteInstrumentIdentifierGoneBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier gone body
func (o *DeleteInstrumentIdentifierGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier gone body based on the context it is used
func (o *DeleteInstrumentIdentifierGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierGone"+"."+"errors", "body", []*DeleteInstrumentIdentifierGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierGoneBodyErrorsItems0 delete instrument identifier gone body errors items0
swagger:model DeleteInstrumentIdentifierGoneBodyErrorsItems0
*/
type DeleteInstrumentIdentifierGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier gone body errors items0
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier gone body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierInternalServerErrorBody delete instrument identifier internal server error body
swagger:model DeleteInstrumentIdentifierInternalServerErrorBody
*/
type DeleteInstrumentIdentifierInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier internal server error body
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier internal server error body based on the context it is used
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierInternalServerError"+"."+"errors", "body", []*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 delete instrument identifier internal server error body errors items0
swagger:model DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0
*/
type DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier internal server error body errors items0
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier internal server error body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierNotFoundBody delete instrument identifier not found body
swagger:model DeleteInstrumentIdentifierNotFoundBody
*/
type DeleteInstrumentIdentifierNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier not found body
func (o *DeleteInstrumentIdentifierNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete instrument identifier not found body based on the context it is used
func (o *DeleteInstrumentIdentifierNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteInstrumentIdentifierNotFound"+"."+"errors", "body", []*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 delete instrument identifier not found body errors items0
swagger:model DeleteInstrumentIdentifierNotFoundBodyErrorsItems0
*/
type DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier not found body errors items0
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete instrument identifier not found body errors items0 based on the context it is used
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
