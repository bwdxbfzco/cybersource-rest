// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInstrumentIdentifierPaymentInstrumentsListReader is a Reader for the GetInstrumentIdentifierPaymentInstrumentsList structure.
type GetInstrumentIdentifierPaymentInstrumentsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentIdentifierPaymentInstrumentsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInstrumentIdentifierPaymentInstrumentsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments] getInstrumentIdentifierPaymentInstrumentsList", response, response.Code())
	}
}

// NewGetInstrumentIdentifierPaymentInstrumentsListOK creates a GetInstrumentIdentifierPaymentInstrumentsListOK with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListOK() *GetInstrumentIdentifierPaymentInstrumentsListOK {
	return &GetInstrumentIdentifierPaymentInstrumentsListOK{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOK describes a response with status code 200, with default header values.

Returns all existing Payment Instruments associated with the supplied Id.
*/
type GetInstrumentIdentifierPaymentInstrumentsListOK struct {

	/* The total number of Payment Instruments associated with the Customer or Instrument Identifier.
	 */
	XTotalCount string

	/* A globally-unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListOKBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list o k response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get instrument identifier payment instruments list o k response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list o k response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get instrument identifier payment instruments list o k response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list o k response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get instrument identifier payment instruments list o k response
func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) Code() int {
	return 200
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListOK %s", 200, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListOK %s", 200, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListOKBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		o.XTotalCount = hdrXTotalCount
	}

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListBadRequest creates a GetInstrumentIdentifierPaymentInstrumentsListBadRequest with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListBadRequest() *GetInstrumentIdentifierPaymentInstrumentsListBadRequest {
	return &GetInstrumentIdentifierPaymentInstrumentsListBadRequest{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type GetInstrumentIdentifierPaymentInstrumentsListBadRequest struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list bad request response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list bad request response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list bad request response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get instrument identifier payment instruments list bad request response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list bad request response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get instrument identifier payment instruments list bad request response
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) Code() int {
	return 400
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListBadRequest %s", 400, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListBadRequest %s", 400, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListForbidden creates a GetInstrumentIdentifierPaymentInstrumentsListForbidden with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListForbidden() *GetInstrumentIdentifierPaymentInstrumentsListForbidden {
	return &GetInstrumentIdentifierPaymentInstrumentsListForbidden{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type GetInstrumentIdentifierPaymentInstrumentsListForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list forbidden response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list forbidden response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list forbidden response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get instrument identifier payment instruments list forbidden response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list forbidden response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get instrument identifier payment instruments list forbidden response
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) Code() int {
	return 403
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListForbidden %s", 403, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListForbidden %s", 403, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListNotFound creates a GetInstrumentIdentifierPaymentInstrumentsListNotFound with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListNotFound() *GetInstrumentIdentifierPaymentInstrumentsListNotFound {
	return &GetInstrumentIdentifierPaymentInstrumentsListNotFound{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type GetInstrumentIdentifierPaymentInstrumentsListNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list not found response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list not found response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list not found response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get instrument identifier payment instruments list not found response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list not found response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get instrument identifier payment instruments list not found response
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) Code() int {
	return 404
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListNotFound %s", 404, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListNotFound %s", 404, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListGone creates a GetInstrumentIdentifierPaymentInstrumentsListGone with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListGone() *GetInstrumentIdentifierPaymentInstrumentsListGone {
	return &GetInstrumentIdentifierPaymentInstrumentsListGone{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type GetInstrumentIdentifierPaymentInstrumentsListGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListGoneBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list gone response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list gone response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list gone response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this get instrument identifier payment instruments list gone response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list gone response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the get instrument identifier payment instruments list gone response
func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) Code() int {
	return 410
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListGone %s", 410, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListGone %s", 410, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListGoneBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListFailedDependency creates a GetInstrumentIdentifierPaymentInstrumentsListFailedDependency with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListFailedDependency() *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency {
	return &GetInstrumentIdentifierPaymentInstrumentsListFailedDependency{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetInstrumentIdentifierPaymentInstrumentsListFailedDependency struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list failed dependency response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list failed dependency response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list failed dependency response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this get instrument identifier payment instruments list failed dependency response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this get instrument identifier payment instruments list failed dependency response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the get instrument identifier payment instruments list failed dependency response
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) Code() int {
	return 424
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListFailedDependency %s", 424, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListFailedDependency %s", 424, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierPaymentInstrumentsListInternalServerError creates a GetInstrumentIdentifierPaymentInstrumentsListInternalServerError with default headers values
func NewGetInstrumentIdentifierPaymentInstrumentsListInternalServerError() *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError {
	return &GetInstrumentIdentifierPaymentInstrumentsListInternalServerError{}
}

/*
GetInstrumentIdentifierPaymentInstrumentsListInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type GetInstrumentIdentifierPaymentInstrumentsListInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody
}

// IsSuccess returns true when this get instrument identifier payment instruments list internal server error response has a 2xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get instrument identifier payment instruments list internal server error response has a 3xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get instrument identifier payment instruments list internal server error response has a 4xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get instrument identifier payment instruments list internal server error response has a 5xx status code
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get instrument identifier payment instruments list internal server error response a status code equal to that given
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get instrument identifier payment instruments list internal server error response
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) Code() int {
	return 500
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListInternalServerError %s", 500, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments][%d] getInstrumentIdentifierPaymentInstrumentsListInternalServerError %s", 500, payload)
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) GetPayload() *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody get instrument identifier payment instruments list bad request body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list bad request body
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list bad request body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListBadRequest"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0 get instrument identifier payment instruments list bad request body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - invalidHeaders
	//   - missingHeaders
	//   - invalidFields
	//   - missingFields
	//   - unsupportedPaymentMethodModification
	//   - invalidCombination
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list bad request body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list bad request body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0 get instrument identifier payment instruments list bad request body errors items0 details items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list bad request body errors items0 details items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list bad request body errors items0 details items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody get instrument identifier payment instruments list failed dependency body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list failed dependency body
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list failed dependency body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListFailedDependency"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0 get instrument identifier payment instruments list failed dependency body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list failed dependency body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list failed dependency body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody get instrument identifier payment instruments list forbidden body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list forbidden body
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list forbidden body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListForbidden"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0 get instrument identifier payment instruments list forbidden body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list forbidden body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list forbidden body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListGoneBody get instrument identifier payment instruments list gone body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListGoneBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListGoneBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list gone body
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list gone body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListGone"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0 get instrument identifier payment instruments list gone body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list gone body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list gone body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody get instrument identifier payment instruments list internal server error body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list internal server error body
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list internal server error body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListInternalServerError"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0 get instrument identifier payment instruments list internal server error body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list internal server error body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list internal server error body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody get instrument identifier payment instruments list not found body
swagger:model GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier payment instruments list not found body
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list not found body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListNotFound"+"."+"errors", "body", []*GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0 get instrument identifier payment instruments list not found body errors items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list not found body errors items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list not found body errors items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBody PaymentInstrumentList
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBody
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBody struct {

	// embedded
	Embedded *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks `json:"_links,omitempty"`

	// The number of Payment Instruments returned in the array.
	// Example: 1
	// Read Only: true
	Count int64 `json:"count,omitempty"`

	// The limit parameter supplied in the request.
	// Example: 20
	// Read Only: true
	Limit int64 `json:"limit,omitempty"`

	// The offset parameter supplied in the request.
	// Example: 0
	// Read Only: true
	Offset int64 `json:"offset,omitempty"`

	// The total number of Payment Instruments associated with the Customer or Instrument Identifier.
	// Example: 1
	// Read Only: true
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOffset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"count", "body", int64(o.Count)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"limit", "body", int64(o.Limit)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateOffset(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"offset", "body", int64(o.Offset)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"total", "body", int64(o.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded Payment Instrument Resources.
//
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded struct {

	// payment instruments
	// Read Only: true
	PaymentInstruments []*GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0 `json:"paymentInstruments"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	for i := 0; i < len(o.PaymentInstruments); i++ {
		if swag.IsZero(o.PaymentInstruments[i]) { // not required
			continue
		}

		if o.PaymentInstruments[i] != nil {
			if err := o.PaymentInstruments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_embedded"+"."+"paymentInstruments", "body", []*GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0(o.PaymentInstruments)); err != nil {
		return err
	}

	for i := 0; i < len(o.PaymentInstruments); i++ {

		if o.PaymentInstruments[i] != nil {

			if swag.IsZero(o.PaymentInstruments[i]) { // not required
				return nil
			}

			if err := o.PaymentInstruments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0 get instrument identifier payment instruments list o k body embedded payment instruments items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0 struct {

	// embedded
	Embedded *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded `json:"_embedded,omitempty"`

	// links
	Links *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links `json:"_links,omitempty"`

	// bank account
	BankAccount *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card `json:"card,omitempty"`

	// Flag that indicates whether customer payment instrument is the dafault.
	// Possible Values:
	//  - `true`: Payment instrument is customer's default.
	//  - `false`: Payment instrument is not customer's default.
	//
	Default bool `json:"default,omitempty"`

	// The Id of the Payment Instrument Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation `json:"merchantInformation,omitempty"`

	// metadata
	Metadata *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata `json:"metadata,omitempty"`

	// The type.
	//
	// Possible Values:
	// - paymentInstrument
	//
	// Example: paymentInstrument
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Possible Values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// The type of Payment Instrument.
	// Possible Values:
	// - cardHash
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateBankAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBankAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateBankAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.BankAccount != nil {

		if swag.IsZero(o.BankAccount) { // not required
			return nil
		}

		if err := o.BankAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "object", "body", string(o.Object)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount get instrument identifier payment instruments list o k body embedded payment instruments items0 bank account
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount struct {

	// Account type.
	//
	// Possible Values:
	//  - checking : C
	//  - general ledger : G This value is supported only on Wells Fargo ACH
	//  - savings : S (U.S. dollars only)
	//  - corporate checking : X (U.S. dollars only)
	//
	// Max Length: 18
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 bank account
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccount"+"."+"type", "body", o.Type, 18); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 bank account based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo get instrument identifier payment instruments list o k body embedded payment instruments items0 bill to
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer's company.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's phone number.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 bill to
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateCompany(formats strfmt.Registry) error {
	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"company", "body", o.Company, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 bill to based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation struct {

	// Company's tax identifier. This is only used for eCheck service.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer. Format: YYYY-MM-DD
	//
	// Example: 1960-12-30
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// personal identification
	PersonalIdentification []*GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {
	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"companyTaxID", "body", o.CompanyTaxID, 9); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("buyerInformation"+"."+"dateOfBirth", "body", "date", o.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PersonalIdentification); i++ {

		if o.PersonalIdentification[i] != nil {

			if swag.IsZero(o.PersonalIdentification[i]) { // not required
				return nil
			}

			if err := o.PersonalIdentification[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Possible Values:
	//   - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {
	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0 based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIssuedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) contextValidateIssuedBy(ctx context.Context, formats strfmt.Registry) error {

	if o.IssuedBy != nil {

		if swag.IsZero(o.IssuedBy) { // not required
			return nil
		}

		if err := o.IssuedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0 issued by
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// The State or province where the customer's driver's license was issued.
	//
	// Use the two-character State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0 issued by
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("issuedBy"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 buyer information personal identification items0 issued by based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card get instrument identifier payment instruments list o k body embedded payment instruments items0 card
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Hash value representing the card.
	//
	// Read Only: true
	// Max Length: 34
	// Min Length: 32
	Hash string `json:"hash,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`.
	// Possible Values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// tokenized information
	TokenizedInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation `json:"tokenizedInformation,omitempty"`

	// Value that indicates the card type. Possible Values v2 : v1:
	//   * 001 : visa
	//   * 002 : mastercard - Eurocard—European regional brand of Mastercard
	//   * 003 : american express
	//   * 004 : discover
	//   * 005 : diners club
	//   * 006 : carte blanche
	//   * 007 : jcb
	//   * 008 : optima
	//   * 011 : twinpay credit
	//   * 012 : twinpay debit
	//   * 013 : walmart
	//   * 014 : enRoute
	//   * 015 : lowes consumer
	//   * 016 : home depot consumer
	//   * 017 : mbna
	//   * 018 : dicks sportswear
	//   * 019 : casual corner
	//   * 020 : sears
	//   * 021 : jal
	//   * 023 : disney
	//   * 024 : maestro uk domestic
	//   * 025 : sams club consumer
	//   * 026 : sams club business
	//   * 028 : bill me later
	//   * 029 : bebe
	//   * 030 : restoration hardware
	//   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * 032 : solo
	//   * 033 : visa electron
	//   * 034 : dankort
	//   * 035 : laser
	//   * 036 : carte bleue — formerly Cartes Bancaires
	//   * 037 : carta si
	//   * 038 : pinless debit
	//   * 039 : encoded account
	//   * 040 : uatp
	//   * 041 : household
	//   * 042 : maestro international
	//   * 043 : ge money uk
	//   * 044 : korean cards
	//   * 045 : style
	//   * 046 : jcrew
	//   * 047 : payease china processing ewallet
	//   * 048 : payease china processing bank transfer
	//   * 049 : meijer private label
	//   * 050 : hipercard — supported only by the Comercio Latino processor.
	//   * 051 : aura — supported only by the Comercio Latino processor.
	//   * 052 : redecard
	//   * 054 : elo — supported only by the Comercio Latino processor.
	//   * 055 : capital one private label
	//   * 056 : synchrony private label
	//   * 057 : costco private label
	//   * 060 : mada
	//   * 062 : china union pay
	//   * 063 : falabella private label
	//
	Type string `json:"type,omitempty"`

	// 'Payment Instrument was created / updated as part of a pinless debit transaction.'
	//
	// Example: pinless debit
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 card
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(o.Hash) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"hash", "body", o.Hash, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"hash", "body", o.Hash, 34); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateIssueNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"issueNumber", "body", o.IssueNumber, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateStartMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"startMonth", "body", o.StartMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateStartYear(formats strfmt.Registry) error {
	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"startYear", "body", o.StartYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) validateTokenizedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedInformation) { // not required
		return nil
	}

	if o.TokenizedInformation != nil {
		if err := o.TokenizedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card" + "." + "tokenizedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 card based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "card"+"."+"hash", "body", string(o.Hash)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) contextValidateTokenizedInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedInformation != nil {

		if swag.IsZero(o.TokenizedInformation) { // not required
			return nil
		}

		if err := o.TokenizedInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card" + "." + "tokenizedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation get instrument identifier payment instruments list o k body embedded payment instruments items0 card tokenized information
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation struct {

	// Value that identifies your business and indicates that the cardholder's account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider's database.
	//
	// **Note** This field is supported only through **VisaNet** and **FDC Nashville Global**.
	//
	// Max Length: 11
	RequestorID string `json:"requestorID,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it
	// specifies the entity that provided you with information about the token.
	//
	// Set the value for this field to 1. An application on the customer's mobile device provided the token data.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 card tokenized information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) validateRequestorID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"tokenizedInformation"+"."+"requestorID", "body", o.RequestorID, 11); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"tokenizedInformation"+"."+"transactionType", "body", o.TransactionType, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 card tokenized information based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0CardTokenizedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded Additional resources for the Payment Instrument.
//
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded struct {

	// instrument identifier
	InstrumentIdentifier *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Embedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier tmsEmbeddedInstrumentIdentifier
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier struct {

	// links
	Links *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo `json:"billTo,omitempty"`

	// card
	Card *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard `json:"card,omitempty"`

	// The Id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// The type.
	//
	// Possible Values:
	// - instrumentIdentifier
	//
	// Example: instrumentIdentifier
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Possible Values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// token provisioning information
	TokenProvisioningInformation *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation `json:"tokenProvisioningInformation,omitempty"`

	// tokenized card
	TokenizedCard *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Possible Values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenProvisioningInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if o.Issuer != nil {
		if err := o.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateTokenProvisioningInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenProvisioningInformation) { // not required
		return nil
	}

	if o.TokenProvisioningInformation != nil {
		if err := o.TokenProvisioningInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateTokenizedCard(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBankAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenProvisioningInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateBankAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.BankAccount != nil {

		if swag.IsZero(o.BankAccount) { // not required
			return nil
		}

		if err := o.BankAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if o.Issuer != nil {

		if swag.IsZero(o.Issuer) { // not required
			return nil
		}

		if err := o.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"object", "body", string(o.Object)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateTokenProvisioningInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenProvisioningInformation != nil {

		if swag.IsZero(o.TokenProvisioningInformation) { // not required
			return nil
		}

		if err := o.TokenProvisioningInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) contextValidateTokenizedCard(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedCard != nil {

		if swag.IsZero(o.TokenizedCard) { // not required
			return nil
		}

		if err := o.TokenizedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier bank account
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier bank account
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", o.Number, 17); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier bank account based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
//
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier bill to
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier bill to based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
//
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Code.
	// This value is sent to the issuer to support the approval of a network token provision.
	// It is not persisted against the Instrument Identifier.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier card
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", o.Number, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", o.Number, 19); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"securityCode", "body", o.SecurityCode, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier card based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier issuer
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier issuer
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", o.PaymentAccountReference, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier issuer based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentAccountReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) contextValidatePaymentAccountReference(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", string(o.PaymentAccountReference)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks struct {

	// payment instruments
	PaymentInstruments *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf `json:"self,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstruments != nil {

		if swag.IsZero(o.PaymentInstruments) { // not required
			return nil
		}

		if err := o.PaymentInstruments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links payment instruments
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Example: tms/v1/instrumentidentifiers/7010000000016241111/paymentinstruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links payment instruments
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links payment instruments based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"_links"+"."+"paymentInstruments"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links self
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Example: tms/v1/instrumentidentifiers/7010000000016241111
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links self
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier links self based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier metadata
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata struct {

	// The creator of the Instrument Identifier.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier metadata
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier metadata based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) contextValidateAuthorizationOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.AuthorizationOptions != nil {

		if swag.IsZero(o.AuthorizationOptions) { // not required
			return nil
		}

		if err := o.AuthorizationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions tmsAuthorizationOptions
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantInitiatedTransaction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) contextValidateMerchantInitiatedTransaction(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInitiatedTransaction != nil {

		if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
			return nil
		}

		if err := o.MerchantInitiatedTransaction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Amount of the original authorization.
	//
	// Max Length: 15
	OriginalAuthorizedAmount string `json:"originalAuthorizedAmount,omitempty"`

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOriginalAuthorizedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validateOriginalAuthorizedAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginalAuthorizedAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"originalAuthorizedAmount", "body", o.OriginalAuthorizedAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", o.PreviousTransactionID, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator merchant initiated transaction based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier token provisioning information
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation struct {

	// Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India.
	// Possible Values:
	// - `true`: Consumer has consented to tokenization of their credentials.
	// - `false`: Consumer has not consented to tokenization of their credentials.
	//
	ConsumerConsentObtained bool `json:"consumerConsentObtained,omitempty"`

	// Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India.
	// Possible Values:
	// - `true`: Consumer has been authenticated by the issuer.
	// - `false`: Consumer has not been authenticated by the issuer.
	//
	MultiFactorAuthenticated bool `json:"multiFactorAuthenticated,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier token provisioning information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier token provisioning information based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenProvisioningInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier tokenized card
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard struct {

	// card
	Card *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Example: CgAFRFYFPTFOfg5rj2ais9wQAAAAAM=
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Unique Identifier for the enrolled PAN. This Id is provided by the card association when a network token is provisioned successfully.
	//
	// Read Only: true
	EnrollmentID string `json:"enrollmentId,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Possible Values:
	// - INVALID_REQUEST : The network token provision request contained invalid data.
	// - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified.
	// - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization.
	// - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization.
	// - DECLINED : Card can currently not be used with issuer for tokenization.
	// - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out.
	// - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration.
	//
	// Example: ACTIVE
	// Read Only: true
	Reason string `json:"reason,omitempty"`

	// State of the network token or network token provision
	// Possible Values:
	// - ACTIVE : Network token is active.
	// - SUSPENDED : Network token is suspended. This state can change back to ACTIVE.
	// - DELETED : This is a final state for a network token instance.
	// - UNPROVISIONED : A previous network token provision was unsuccessful.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// Unique Identifier for the network token. This Id is provided by the card association when a network token is provisioned successfully.
	//
	// Read Only: true
	TokenReferenceID string `json:"tokenReferenceId,omitempty"`

	// The network token card association brand
	// Possible Values:
	// - visa
	// - mastercard
	// - americanexpress
	//
	// Example: visa
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier tokenized card
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier tokenized card based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCryptogram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEnrollmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateCryptogram(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"cryptogram", "body", string(o.Cryptogram)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateEnrollmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"enrollmentId", "body", string(o.EnrollmentID)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"number", "body", string(o.Number)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"reason", "body", string(o.Reason)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateTokenReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"tokenReferenceId", "body", string(o.TokenReferenceID)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard The latest card details associated with the network token
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard struct {

	//
	// Two-digit month in which the customer's latest payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer's latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's latest payment card number suffix
	//
	// Example: 1111
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier tokenized card card
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 embedded instrument identifier tokenized card card based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateSuffix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"suffix", "body", string(o.Suffix)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier get instrument identifier payment instruments list o k body embedded payment instruments items0 instrument identifier
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier struct {

	// The Id of the Instrument Identifier linked to the Payment Instrument.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 instrument identifier
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"id", "body", o.ID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 instrument identifier based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links get instrument identifier payment instruments list o k body embedded payment instruments items0 links
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links struct {

	// customer
	Customer *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer `json:"customer,omitempty"`

	// self
	Self *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf `json:"self,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 links
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 links based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer get instrument identifier payment instruments list o k body embedded payment instruments items0 links customer
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer struct {

	// Link to the Customer.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 links customer
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 links customer based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_links"+"."+"customer"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf get instrument identifier payment instruments list o k body embedded payment instruments items0 links self
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf struct {

	// Link to the Payment Instrument.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 links self
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 links self based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information merchant descriptor
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor struct {

	// Alternate contact information for your business,such as an email address or URL.
	// This value might be displayed on the cardholder's statement.
	// When you do not include this value in your capture or credit request, the merchant URL from your CyberSource account is used.
	// Important This value must consist of English characters
	//
	// Max Length: 13
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information merchant descriptor
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) validateAlternateName(formats strfmt.Registry) error {
	if swag.IsZero(o.AlternateName) { // not required
		return nil
	}

	if err := validate.MaxLength("merchantInformation"+"."+"merchantDescriptor"+"."+"alternateName", "body", o.AlternateName, 13); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 merchant information merchant descriptor based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata get instrument identifier payment instruments list o k body embedded payment instruments items0 metadata
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata struct {

	// The creator of the Payment Instrument.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 metadata
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 metadata based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation tmsPaymentInstrumentProcessingInfo
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Flag that indicates that this is a payment for a bill or for an existing contractual loan.
	// For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Possible Values:
	// - `true`: Bill payment or loan payment.
	// - `false` (default): Not a bill payment or loan payment.
	//
	BillPaymentProgramEnabled bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 processing information
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation" + "." + "bankTransferOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body embedded payment instruments items0 processing information based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBankTransferOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) contextValidateBankTransferOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.BankTransferOptions != nil {

		if swag.IsZero(o.BankTransferOptions) { // not required
			return nil
		}

		if err := o.BankTransferOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation" + "." + "bankTransferOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions get instrument identifier payment instruments list o k body embedded payment instruments items0 processing information bank transfer options
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// #### TeleCheck
	// Possible Values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 3
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 processing information bank transfer options
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSECCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) validateSECCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SECCode) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"bankTransferOptions"+"."+"SECCode", "body", o.SECCode, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get instrument identifier payment instruments list o k body embedded payment instruments items0 processing information bank transfer options based on context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks get instrument identifier payment instruments list o k body links
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks struct {

	// first
	First *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst `json:"first,omitempty"`

	// last
	Last *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast `json:"last,omitempty"`

	// next
	Next *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext `json:"next,omitempty"`

	// prev
	Prev *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev `json:"prev,omitempty"`

	// self
	Self *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirst(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) validateFirst(formats strfmt.Registry) error {
	if swag.IsZero(o.First) { // not required
		return nil
	}

	if o.First != nil {
		if err := o.First.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "first")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "first")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) validateLast(formats strfmt.Registry) error {
	if swag.IsZero(o.Last) { // not required
		return nil
	}

	if o.Last != nil {
		if err := o.Last.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "last")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "last")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(o.Next) { // not required
		return nil
	}

	if o.Next != nil {
		if err := o.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) validatePrev(formats strfmt.Registry) error {
	if swag.IsZero(o.Prev) { // not required
		return nil
	}

	if o.Prev != nil {
		if err := o.Prev.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "prev")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "prev")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFirst(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePrev(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) contextValidateFirst(ctx context.Context, formats strfmt.Registry) error {

	if o.First != nil {

		if swag.IsZero(o.First) { // not required
			return nil
		}

		if err := o.First.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "first")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "first")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) contextValidateLast(ctx context.Context, formats strfmt.Registry) error {

	if o.Last != nil {

		if swag.IsZero(o.Last) { // not required
			return nil
		}

		if err := o.Last.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "last")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "last")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if o.Next != nil {

		if swag.IsZero(o.Next) { // not required
			return nil
		}

		if err := o.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) contextValidatePrev(ctx context.Context, formats strfmt.Registry) error {

	if o.Prev != nil {

		if swag.IsZero(o.Prev) { // not required
			return nil
		}

		if err := o.Prev.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "prev")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "prev")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getInstrumentIdentifierPaymentInstrumentsListOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst get instrument identifier payment instruments list o k body links first
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst struct {

	// Link to the first page.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments?offset=0\u0026limit=1
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links first
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links first based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_links"+"."+"first"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksFirst
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast get instrument identifier payment instruments list o k body links last
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast struct {

	// Link to the last page.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments?offset=0\u0026limit=1
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links last
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links last based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_links"+"."+"last"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksLast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext get instrument identifier payment instruments list o k body links next
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext struct {

	// Link to the next page.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments?offset=0\u0026limit=1
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links next
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links next based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_links"+"."+"next"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev get instrument identifier payment instruments list o k body links prev
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev struct {

	// Link to the previous page.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments?offset=0\u0026limit=1
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links prev
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links prev based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_links"+"."+"prev"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksPrev
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf get instrument identifier payment instruments list o k body links self
swagger:model GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf
*/
type GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf struct {

	// Link to the current page.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments?offset=0\u0026limit=1
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier payment instruments list o k body links self
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get instrument identifier payment instruments list o k body links self based on the context it is used
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getInstrumentIdentifierPaymentInstrumentsListOK"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierPaymentInstrumentsListOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
