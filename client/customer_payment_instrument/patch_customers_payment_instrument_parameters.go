// Code generated by go-swagger; DO NOT EDIT.

package customer_payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchCustomersPaymentInstrumentParams creates a new PatchCustomersPaymentInstrumentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchCustomersPaymentInstrumentParams() *PatchCustomersPaymentInstrumentParams {
	return &PatchCustomersPaymentInstrumentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchCustomersPaymentInstrumentParamsWithTimeout creates a new PatchCustomersPaymentInstrumentParams object
// with the ability to set a timeout on a request.
func NewPatchCustomersPaymentInstrumentParamsWithTimeout(timeout time.Duration) *PatchCustomersPaymentInstrumentParams {
	return &PatchCustomersPaymentInstrumentParams{
		timeout: timeout,
	}
}

// NewPatchCustomersPaymentInstrumentParamsWithContext creates a new PatchCustomersPaymentInstrumentParams object
// with the ability to set a context for a request.
func NewPatchCustomersPaymentInstrumentParamsWithContext(ctx context.Context) *PatchCustomersPaymentInstrumentParams {
	return &PatchCustomersPaymentInstrumentParams{
		Context: ctx,
	}
}

// NewPatchCustomersPaymentInstrumentParamsWithHTTPClient creates a new PatchCustomersPaymentInstrumentParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchCustomersPaymentInstrumentParamsWithHTTPClient(client *http.Client) *PatchCustomersPaymentInstrumentParams {
	return &PatchCustomersPaymentInstrumentParams{
		HTTPClient: client,
	}
}

/*
PatchCustomersPaymentInstrumentParams contains all the parameters to send to the API endpoint

	for the patch customers payment instrument operation.

	Typically these are written to a http.Request.
*/
type PatchCustomersPaymentInstrumentParams struct {

	/* CustomerID.

	   The Id of a Customer.
	*/
	CustomerID string

	/* IfMatch.

	   Contains an ETag value from a GET request to make the request conditional.
	*/
	IfMatch *string

	// PatchCustomerPaymentInstrumentRequest.
	PatchCustomerPaymentInstrumentRequest PatchCustomersPaymentInstrumentBody

	/* PaymentInstrumentID.

	   The Id of a payment instrument.
	*/
	PaymentInstrumentID string

	/* ProfileID.

	   The Id of a profile containing user specific TMS configuration.
	*/
	ProfileID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch customers payment instrument params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchCustomersPaymentInstrumentParams) WithDefaults() *PatchCustomersPaymentInstrumentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch customers payment instrument params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchCustomersPaymentInstrumentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithTimeout(timeout time.Duration) *PatchCustomersPaymentInstrumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithContext(ctx context.Context) *PatchCustomersPaymentInstrumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithHTTPClient(client *http.Client) *PatchCustomersPaymentInstrumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithCustomerID(customerID string) *PatchCustomersPaymentInstrumentParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithIfMatch adds the ifMatch to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithIfMatch(ifMatch *string) *PatchCustomersPaymentInstrumentParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithPatchCustomerPaymentInstrumentRequest adds the patchCustomerPaymentInstrumentRequest to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithPatchCustomerPaymentInstrumentRequest(patchCustomerPaymentInstrumentRequest PatchCustomersPaymentInstrumentBody) *PatchCustomersPaymentInstrumentParams {
	o.SetPatchCustomerPaymentInstrumentRequest(patchCustomerPaymentInstrumentRequest)
	return o
}

// SetPatchCustomerPaymentInstrumentRequest adds the patchCustomerPaymentInstrumentRequest to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetPatchCustomerPaymentInstrumentRequest(patchCustomerPaymentInstrumentRequest PatchCustomersPaymentInstrumentBody) {
	o.PatchCustomerPaymentInstrumentRequest = patchCustomerPaymentInstrumentRequest
}

// WithPaymentInstrumentID adds the paymentInstrumentID to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithPaymentInstrumentID(paymentInstrumentID string) *PatchCustomersPaymentInstrumentParams {
	o.SetPaymentInstrumentID(paymentInstrumentID)
	return o
}

// SetPaymentInstrumentID adds the paymentInstrumentId to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetPaymentInstrumentID(paymentInstrumentID string) {
	o.PaymentInstrumentID = paymentInstrumentID
}

// WithProfileID adds the profileID to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) WithProfileID(profileID *string) *PatchCustomersPaymentInstrumentParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the patch customers payment instrument params
func (o *PatchCustomersPaymentInstrumentParams) SetProfileID(profileID *string) {
	o.ProfileID = profileID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchCustomersPaymentInstrumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customerId
	if err := r.SetPathParam("customerId", o.CustomerID); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}
	if err := r.SetBodyParam(o.PatchCustomerPaymentInstrumentRequest); err != nil {
		return err
	}

	// path param paymentInstrumentId
	if err := r.SetPathParam("paymentInstrumentId", o.PaymentInstrumentID); err != nil {
		return err
	}

	if o.ProfileID != nil {

		// header param profile-id
		if err := r.SetHeaderParam("profile-id", *o.ProfileID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
