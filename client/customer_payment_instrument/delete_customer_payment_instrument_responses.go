// Code generated by go-swagger; DO NOT EDIT.

package customer_payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteCustomerPaymentInstrumentReader is a Reader for the DeleteCustomerPaymentInstrument structure.
type DeleteCustomerPaymentInstrumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCustomerPaymentInstrumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteCustomerPaymentInstrumentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCustomerPaymentInstrumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCustomerPaymentInstrumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCustomerPaymentInstrumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteCustomerPaymentInstrumentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteCustomerPaymentInstrumentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewDeleteCustomerPaymentInstrumentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCustomerPaymentInstrumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}] deleteCustomerPaymentInstrument", response, response.Code())
	}
}

// NewDeleteCustomerPaymentInstrumentNoContent creates a DeleteCustomerPaymentInstrumentNoContent with default headers values
func NewDeleteCustomerPaymentInstrumentNoContent() *DeleteCustomerPaymentInstrumentNoContent {
	return &DeleteCustomerPaymentInstrumentNoContent{}
}

/*
DeleteCustomerPaymentInstrumentNoContent describes a response with status code 204, with default header values.

The request is fulfilled but does not need to return a body
*/
type DeleteCustomerPaymentInstrumentNoContent struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

// IsSuccess returns true when this delete customer payment instrument no content response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete customer payment instrument no content response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument no content response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete customer payment instrument no content response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument no content response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete customer payment instrument no content response
func (o *DeleteCustomerPaymentInstrumentNoContent) Code() int {
	return 204
}

func (o *DeleteCustomerPaymentInstrumentNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentNoContent", 204)
}

func (o *DeleteCustomerPaymentInstrumentNoContent) String() string {
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentNoContent", 204)
}

func (o *DeleteCustomerPaymentInstrumentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentBadRequest creates a DeleteCustomerPaymentInstrumentBadRequest with default headers values
func NewDeleteCustomerPaymentInstrumentBadRequest() *DeleteCustomerPaymentInstrumentBadRequest {
	return &DeleteCustomerPaymentInstrumentBadRequest{}
}

/*
DeleteCustomerPaymentInstrumentBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type DeleteCustomerPaymentInstrumentBadRequest struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentBadRequestBody
}

// IsSuccess returns true when this delete customer payment instrument bad request response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument bad request response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument bad request response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument bad request response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument bad request response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete customer payment instrument bad request response
func (o *DeleteCustomerPaymentInstrumentBadRequest) Code() int {
	return 400
}

func (o *DeleteCustomerPaymentInstrumentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentBadRequest %s", 400, payload)
}

func (o *DeleteCustomerPaymentInstrumentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentBadRequest %s", 400, payload)
}

func (o *DeleteCustomerPaymentInstrumentBadRequest) GetPayload() *DeleteCustomerPaymentInstrumentBadRequestBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentForbidden creates a DeleteCustomerPaymentInstrumentForbidden with default headers values
func NewDeleteCustomerPaymentInstrumentForbidden() *DeleteCustomerPaymentInstrumentForbidden {
	return &DeleteCustomerPaymentInstrumentForbidden{}
}

/*
DeleteCustomerPaymentInstrumentForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type DeleteCustomerPaymentInstrumentForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentForbiddenBody
}

// IsSuccess returns true when this delete customer payment instrument forbidden response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument forbidden response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument forbidden response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument forbidden response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument forbidden response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete customer payment instrument forbidden response
func (o *DeleteCustomerPaymentInstrumentForbidden) Code() int {
	return 403
}

func (o *DeleteCustomerPaymentInstrumentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentForbidden %s", 403, payload)
}

func (o *DeleteCustomerPaymentInstrumentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentForbidden %s", 403, payload)
}

func (o *DeleteCustomerPaymentInstrumentForbidden) GetPayload() *DeleteCustomerPaymentInstrumentForbiddenBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentNotFound creates a DeleteCustomerPaymentInstrumentNotFound with default headers values
func NewDeleteCustomerPaymentInstrumentNotFound() *DeleteCustomerPaymentInstrumentNotFound {
	return &DeleteCustomerPaymentInstrumentNotFound{}
}

/*
DeleteCustomerPaymentInstrumentNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type DeleteCustomerPaymentInstrumentNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentNotFoundBody
}

// IsSuccess returns true when this delete customer payment instrument not found response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument not found response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument not found response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument not found response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument not found response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete customer payment instrument not found response
func (o *DeleteCustomerPaymentInstrumentNotFound) Code() int {
	return 404
}

func (o *DeleteCustomerPaymentInstrumentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentNotFound %s", 404, payload)
}

func (o *DeleteCustomerPaymentInstrumentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentNotFound %s", 404, payload)
}

func (o *DeleteCustomerPaymentInstrumentNotFound) GetPayload() *DeleteCustomerPaymentInstrumentNotFoundBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentConflict creates a DeleteCustomerPaymentInstrumentConflict with default headers values
func NewDeleteCustomerPaymentInstrumentConflict() *DeleteCustomerPaymentInstrumentConflict {
	return &DeleteCustomerPaymentInstrumentConflict{}
}

/*
DeleteCustomerPaymentInstrumentConflict describes a response with status code 409, with default header values.

Conflict. The token is linked to a Payment Instrument.
*/
type DeleteCustomerPaymentInstrumentConflict struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentConflictBody
}

// IsSuccess returns true when this delete customer payment instrument conflict response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument conflict response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument conflict response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument conflict response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument conflict response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete customer payment instrument conflict response
func (o *DeleteCustomerPaymentInstrumentConflict) Code() int {
	return 409
}

func (o *DeleteCustomerPaymentInstrumentConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentConflict %s", 409, payload)
}

func (o *DeleteCustomerPaymentInstrumentConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentConflict %s", 409, payload)
}

func (o *DeleteCustomerPaymentInstrumentConflict) GetPayload() *DeleteCustomerPaymentInstrumentConflictBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentGone creates a DeleteCustomerPaymentInstrumentGone with default headers values
func NewDeleteCustomerPaymentInstrumentGone() *DeleteCustomerPaymentInstrumentGone {
	return &DeleteCustomerPaymentInstrumentGone{}
}

/*
DeleteCustomerPaymentInstrumentGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type DeleteCustomerPaymentInstrumentGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentGoneBody
}

// IsSuccess returns true when this delete customer payment instrument gone response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument gone response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument gone response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument gone response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentGone) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument gone response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the delete customer payment instrument gone response
func (o *DeleteCustomerPaymentInstrumentGone) Code() int {
	return 410
}

func (o *DeleteCustomerPaymentInstrumentGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentGone %s", 410, payload)
}

func (o *DeleteCustomerPaymentInstrumentGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentGone %s", 410, payload)
}

func (o *DeleteCustomerPaymentInstrumentGone) GetPayload() *DeleteCustomerPaymentInstrumentGoneBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentFailedDependency creates a DeleteCustomerPaymentInstrumentFailedDependency with default headers values
func NewDeleteCustomerPaymentInstrumentFailedDependency() *DeleteCustomerPaymentInstrumentFailedDependency {
	return &DeleteCustomerPaymentInstrumentFailedDependency{}
}

/*
DeleteCustomerPaymentInstrumentFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type DeleteCustomerPaymentInstrumentFailedDependency struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentFailedDependencyBody
}

// IsSuccess returns true when this delete customer payment instrument failed dependency response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument failed dependency response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument failed dependency response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer payment instrument failed dependency response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer payment instrument failed dependency response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the delete customer payment instrument failed dependency response
func (o *DeleteCustomerPaymentInstrumentFailedDependency) Code() int {
	return 424
}

func (o *DeleteCustomerPaymentInstrumentFailedDependency) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentFailedDependency %s", 424, payload)
}

func (o *DeleteCustomerPaymentInstrumentFailedDependency) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentFailedDependency %s", 424, payload)
}

func (o *DeleteCustomerPaymentInstrumentFailedDependency) GetPayload() *DeleteCustomerPaymentInstrumentFailedDependencyBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerPaymentInstrumentInternalServerError creates a DeleteCustomerPaymentInstrumentInternalServerError with default headers values
func NewDeleteCustomerPaymentInstrumentInternalServerError() *DeleteCustomerPaymentInstrumentInternalServerError {
	return &DeleteCustomerPaymentInstrumentInternalServerError{}
}

/*
DeleteCustomerPaymentInstrumentInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type DeleteCustomerPaymentInstrumentInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerPaymentInstrumentInternalServerErrorBody
}

// IsSuccess returns true when this delete customer payment instrument internal server error response has a 2xx status code
func (o *DeleteCustomerPaymentInstrumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer payment instrument internal server error response has a 3xx status code
func (o *DeleteCustomerPaymentInstrumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer payment instrument internal server error response has a 4xx status code
func (o *DeleteCustomerPaymentInstrumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete customer payment instrument internal server error response has a 5xx status code
func (o *DeleteCustomerPaymentInstrumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete customer payment instrument internal server error response a status code equal to that given
func (o *DeleteCustomerPaymentInstrumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete customer payment instrument internal server error response
func (o *DeleteCustomerPaymentInstrumentInternalServerError) Code() int {
	return 500
}

func (o *DeleteCustomerPaymentInstrumentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentInternalServerError %s", 500, payload)
}

func (o *DeleteCustomerPaymentInstrumentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}][%d] deleteCustomerPaymentInstrumentInternalServerError %s", 500, payload)
}

func (o *DeleteCustomerPaymentInstrumentInternalServerError) GetPayload() *DeleteCustomerPaymentInstrumentInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteCustomerPaymentInstrumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerPaymentInstrumentInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteCustomerPaymentInstrumentBadRequestBody delete customer payment instrument bad request body
swagger:model DeleteCustomerPaymentInstrumentBadRequestBody
*/
type DeleteCustomerPaymentInstrumentBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument bad request body
func (o *DeleteCustomerPaymentInstrumentBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument bad request body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentBadRequest"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0 delete customer payment instrument bad request body errors items0
swagger:model DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - invalidHeaders
	//   - missingHeaders
	//   - invalidFields
	//   - missingFields
	//   - unsupportedPaymentMethodModification
	//   - invalidCombination
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument bad request body errors items0
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument bad request body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 delete customer payment instrument bad request body errors items0 details items0
swagger:model DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0
*/
type DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete customer payment instrument bad request body errors items0 details items0
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument bad request body errors items0 details items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentConflictBody delete customer payment instrument conflict body
swagger:model DeleteCustomerPaymentInstrumentConflictBody
*/
type DeleteCustomerPaymentInstrumentConflictBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument conflict body
func (o *DeleteCustomerPaymentInstrumentConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentConflictBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentConflict" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentConflict" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument conflict body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentConflictBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentConflict"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentConflict" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentConflict" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentConflictBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0 delete customer payment instrument conflict body errors items0
swagger:model DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - instrumentIdentifierDeletionError
	//   - tokenIdConflict
	//   - conflict
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument conflict body errors items0
func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument conflict body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentConflictBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentFailedDependencyBody delete customer payment instrument failed dependency body
swagger:model DeleteCustomerPaymentInstrumentFailedDependencyBody
*/
type DeleteCustomerPaymentInstrumentFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument failed dependency body
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument failed dependency body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentFailedDependency"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0 delete customer payment instrument failed dependency body errors items0
swagger:model DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument failed dependency body errors items0
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument failed dependency body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentForbiddenBody delete customer payment instrument forbidden body
swagger:model DeleteCustomerPaymentInstrumentForbiddenBody
*/
type DeleteCustomerPaymentInstrumentForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument forbidden body
func (o *DeleteCustomerPaymentInstrumentForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument forbidden body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentForbidden"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0 delete customer payment instrument forbidden body errors items0
swagger:model DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument forbidden body errors items0
func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument forbidden body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentGoneBody delete customer payment instrument gone body
swagger:model DeleteCustomerPaymentInstrumentGoneBody
*/
type DeleteCustomerPaymentInstrumentGoneBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument gone body
func (o *DeleteCustomerPaymentInstrumentGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument gone body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentGone"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentGoneBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0 delete customer payment instrument gone body errors items0
swagger:model DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument gone body errors items0
func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument gone body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentInternalServerErrorBody delete customer payment instrument internal server error body
swagger:model DeleteCustomerPaymentInstrumentInternalServerErrorBody
*/
type DeleteCustomerPaymentInstrumentInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument internal server error body
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument internal server error body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentInternalServerError"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0 delete customer payment instrument internal server error body errors items0
swagger:model DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument internal server error body errors items0
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument internal server error body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentNotFoundBody delete customer payment instrument not found body
swagger:model DeleteCustomerPaymentInstrumentNotFoundBody
*/
type DeleteCustomerPaymentInstrumentNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer payment instrument not found body
func (o *DeleteCustomerPaymentInstrumentNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer payment instrument not found body based on the context it is used
func (o *DeleteCustomerPaymentInstrumentNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerPaymentInstrumentNotFound"+"."+"errors", "body", []*DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerPaymentInstrumentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerPaymentInstrumentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0 delete customer payment instrument not found body errors items0
swagger:model DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0
*/
type DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer payment instrument not found body errors items0
func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer payment instrument not found body errors items0 based on the context it is used
func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerPaymentInstrumentNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
