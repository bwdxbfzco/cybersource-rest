// Code generated by go-swagger; DO NOT EDIT.

package payouts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OctCreatePaymentReader is a Reader for the OctCreatePayment structure.
type OctCreatePaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OctCreatePaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewOctCreatePaymentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOctCreatePaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewOctCreatePaymentBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pts/v2/payouts] octCreatePayment", response, response.Code())
	}
}

// NewOctCreatePaymentCreated creates a OctCreatePaymentCreated with default headers values
func NewOctCreatePaymentCreated() *OctCreatePaymentCreated {
	return &OctCreatePaymentCreated{}
}

/*
OctCreatePaymentCreated describes a response with status code 201, with default header values.

Successful response.
*/
type OctCreatePaymentCreated struct {
	Payload *OctCreatePaymentCreatedBody
}

// IsSuccess returns true when this oct create payment created response has a 2xx status code
func (o *OctCreatePaymentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this oct create payment created response has a 3xx status code
func (o *OctCreatePaymentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oct create payment created response has a 4xx status code
func (o *OctCreatePaymentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this oct create payment created response has a 5xx status code
func (o *OctCreatePaymentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this oct create payment created response a status code equal to that given
func (o *OctCreatePaymentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the oct create payment created response
func (o *OctCreatePaymentCreated) Code() int {
	return 201
}

func (o *OctCreatePaymentCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentCreated %s", 201, payload)
}

func (o *OctCreatePaymentCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentCreated %s", 201, payload)
}

func (o *OctCreatePaymentCreated) GetPayload() *OctCreatePaymentCreatedBody {
	return o.Payload
}

func (o *OctCreatePaymentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOctCreatePaymentBadRequest creates a OctCreatePaymentBadRequest with default headers values
func NewOctCreatePaymentBadRequest() *OctCreatePaymentBadRequest {
	return &OctCreatePaymentBadRequest{}
}

/*
OctCreatePaymentBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type OctCreatePaymentBadRequest struct {
	Payload *OctCreatePaymentBadRequestBody
}

// IsSuccess returns true when this oct create payment bad request response has a 2xx status code
func (o *OctCreatePaymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oct create payment bad request response has a 3xx status code
func (o *OctCreatePaymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oct create payment bad request response has a 4xx status code
func (o *OctCreatePaymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this oct create payment bad request response has a 5xx status code
func (o *OctCreatePaymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this oct create payment bad request response a status code equal to that given
func (o *OctCreatePaymentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the oct create payment bad request response
func (o *OctCreatePaymentBadRequest) Code() int {
	return 400
}

func (o *OctCreatePaymentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadRequest %s", 400, payload)
}

func (o *OctCreatePaymentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadRequest %s", 400, payload)
}

func (o *OctCreatePaymentBadRequest) GetPayload() *OctCreatePaymentBadRequestBody {
	return o.Payload
}

func (o *OctCreatePaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOctCreatePaymentBadGateway creates a OctCreatePaymentBadGateway with default headers values
func NewOctCreatePaymentBadGateway() *OctCreatePaymentBadGateway {
	return &OctCreatePaymentBadGateway{}
}

/*
OctCreatePaymentBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type OctCreatePaymentBadGateway struct {
	Payload *OctCreatePaymentBadGatewayBody
}

// IsSuccess returns true when this oct create payment bad gateway response has a 2xx status code
func (o *OctCreatePaymentBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oct create payment bad gateway response has a 3xx status code
func (o *OctCreatePaymentBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oct create payment bad gateway response has a 4xx status code
func (o *OctCreatePaymentBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this oct create payment bad gateway response has a 5xx status code
func (o *OctCreatePaymentBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this oct create payment bad gateway response a status code equal to that given
func (o *OctCreatePaymentBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the oct create payment bad gateway response
func (o *OctCreatePaymentBadGateway) Code() int {
	return 502
}

func (o *OctCreatePaymentBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadGateway %s", 502, payload)
}

func (o *OctCreatePaymentBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadGateway %s", 502, payload)
}

func (o *OctCreatePaymentBadGateway) GetPayload() *OctCreatePaymentBadGatewayBody {
	return o.Payload
}

func (o *OctCreatePaymentBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
OctCreatePaymentBadGatewayBody ptsV2PayoutsPost502Response
swagger:model OctCreatePaymentBadGatewayBody
*/
type OctCreatePaymentBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this oct create payment bad gateway body
func (o *OctCreatePaymentBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oct create payment bad gateway body based on context it is used
func (o *OctCreatePaymentBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentBadRequestBody ptsV2PayoutsPost400Response
swagger:model OctCreatePaymentBadRequestBody
*/
type OctCreatePaymentBadRequestBody struct {

	// details
	Details []*OctCreatePaymentBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - INVALID_AMOUNT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`

	// Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the
	// time. The Z indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this oct create payment bad request body
func (o *OctCreatePaymentBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("octCreatePaymentBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oct create payment bad request body based on the context it is used
func (o *OctCreatePaymentBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("octCreatePaymentBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentBadRequestBodyDetailsItems0 oct create payment bad request body details items0
swagger:model OctCreatePaymentBadRequestBodyDetailsItems0
*/
type OctCreatePaymentBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this oct create payment bad request body details items0
func (o *OctCreatePaymentBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oct create payment bad request body details items0 based on context it is used
func (o *OctCreatePaymentBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentBody oct create payment body
// Example: {"clientReferenceInformation":{"code":"33557799"},"merchantInformation":{"merchantCategoryCode":"123","merchantDescriptor":{"administrativeArea":"CA","country":"US","locality":"FC","name":"Thomas","postalCode":"94440"}},"orderInformation":{"amountDetails":{"currency":"USD","totalAmount":"100.00"}},"paymentInformation":{"card":{"expirationMonth":"12","expirationYear":"2025","number":"4111111111111111","sourceAccountType":"CH","type":"001"}},"payoutsOptions":{"acquirerBin":"567890124","retrievalReferenceNumber":"123456789012"},"processingInformation":{"businessApplicationId":"FD","commerceIndicator":"internet","networkRoutingOrder":"ECG"},"recipientInformation":{"address1":"Paseo Padre Boulevard","administrativeArea":"CA","country":"US","dateOfBirth":"19801009","firstName":"John","lastName":"Doe","locality":"Foster City","phoneNumber":"6504320556","postalCode":"94400"},"reconciliationId":"1087488702VIAQNSPQ","senderInformation":{"account":{"fundsSource":"01","number":"1234567890123456789012345678901234"},"address1":"900 Metro Center Blvd.900","administrativeArea":"CA","countryCode":"US","locality":"Foster City","name":"Thomas Jefferson","referenceNumber":"1234567890"}}
swagger:model OctCreatePaymentBody
*/
type OctCreatePaymentBody struct {

	// client reference information
	ClientReferenceInformation *OctCreatePaymentParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// merchant information
	MerchantInformation *OctCreatePaymentParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *OctCreatePaymentParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *OctCreatePaymentParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *OctCreatePaymentParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// recipient information
	RecipientInformation *OctCreatePaymentParamsBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// sender information
	SenderInformation *OctCreatePaymentParamsBodySenderInformation `json:"senderInformation,omitempty"`
}

// Validate validates this oct create payment body
func (o *OctCreatePaymentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSenderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateRecipientInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateSenderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SenderInformation) { // not required
		return nil
	}

	if o.SenderInformation != nil {
		if err := o.SenderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment body based on the context it is used
func (o *OctCreatePaymentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipientInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSenderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidateRecipientInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RecipientInformation != nil {

		if swag.IsZero(o.RecipientInformation) { // not required
			return nil
		}

		if err := o.RecipientInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) contextValidateSenderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SenderInformation != nil {

		if swag.IsZero(o.SenderInformation) { // not required
			return nil
		}

		if err := o.SenderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBody ptsV2PayoutsPost201Response
// Example: {"_links":{"self":{"href":"/pts/v2/payouts/5287556536256000401540","method":"GET"}},"clientReferenceInformation":{"code":"1528755653559"},"id":"5287556536256000401540","orderInformation":{"amountDetails":{"currency":"USD","totalAmount":"100.00"}},"processorInformation":{"approvalCode":"831000","responseCode":"00","responseCodeSource":"5","systemTraceAuditNumber":"897596","transactionId":"016153570198200"},"reconciliationId":"1087488702VIAQNSPQ","status":"ACCEPTED","submitTimeUtc":"2018-06-11T222054Z"}
swagger:model OctCreatePaymentCreatedBody
*/
type OctCreatePaymentCreatedBody struct {

	// links
	Links *OctCreatePaymentCreatedBodyLinks `json:"_links,omitempty"`

	// client reference information
	ClientReferenceInformation *OctCreatePaymentCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// error information
	ErrorInformation *OctCreatePaymentCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issuer information
	IssuerInformation *OctCreatePaymentCreatedBodyIssuerInformation `json:"issuerInformation,omitempty"`

	// merchant information
	MerchantInformation *OctCreatePaymentCreatedBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *OctCreatePaymentCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// processor information
	ProcessorInformation *OctCreatePaymentCreatedBodyProcessorInformation `json:"processorInformation,omitempty"`

	// recipient information
	RecipientInformation *OctCreatePaymentCreatedBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is
	// This value is used for reconciliation purposes.
	//
	// Max Length: 25
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//  - DECLINED
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the
	// time. The Z indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// token information
	TokenInformation *OctCreatePaymentCreatedBodyTokenInformation `json:"tokenInformation,omitempty"`
}

// Validate validates this oct create payment created body
func (o *OctCreatePaymentCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateIssuerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.IssuerInformation) { // not required
		return nil
	}

	if o.IssuerInformation != nil {
		if err := o.IssuerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "issuerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "issuerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateRecipientInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"reconciliationId", "body", o.ReconciliationID, 25); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateTokenInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenInformation) { // not required
		return nil
	}

	if o.TokenInformation != nil {
		if err := o.TokenInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body based on the context it is used
func (o *OctCreatePaymentCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIssuerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipientInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateIssuerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.IssuerInformation != nil {

		if swag.IsZero(o.IssuerInformation) { // not required
			return nil
		}

		if err := o.IssuerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "issuerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "issuerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateRecipientInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RecipientInformation != nil {

		if swag.IsZero(o.RecipientInformation) { // not required
			return nil
		}

		if err := o.RecipientInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) contextValidateTokenInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenInformation != nil {

		if swag.IsZero(o.TokenInformation) { // not required
			return nil
		}

		if err := o.TokenInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyClientReferenceInformation oct create payment created body client reference information
swagger:model OctCreatePaymentCreatedBodyClientReferenceInformation
*/
type OctCreatePaymentCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Merchant ID that was used to create the subscription or customer profile for which the service was requested.
	//
	// If your CyberSource account is enabled for Recurring Billing, this field is returned only if you are using
	// subscription sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.
	//
	// If your CyberSource account is enabled for Payment Tokenization, this field is returned only if you are using
	// profile sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.
	//
	OwnerMerchantID string `json:"ownerMerchantId,omitempty"`

	// Date and time at your physical location.
	//
	// Format: `YYYYMMDDhhmmss`, where YYYY = year, MM = month, DD = day, hh = hour, mm = minutes ss = seconds
	//
	// #### PIN Debit
	// Optional field for PIN Debit purchase and credit requests.
	//
	// Max Length: 14
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`
}

// Validate validates this oct create payment created body client reference information
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitLocalDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) validateSubmitLocalDateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitLocalDateTime) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"clientReferenceInformation"+"."+"submitLocalDateTime", "body", o.SubmitLocalDateTime, 14); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body client reference information based on context it is used
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyErrorInformation oct create payment created body error information
swagger:model OctCreatePaymentCreatedBodyErrorInformation
*/
type OctCreatePaymentCreatedBodyErrorInformation struct {

	// details
	Details []*OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - EXPIRED_CARD
	//  - PROCESSOR_DECLINED
	//  - STOLEN_LOST_CARD
	//  - UNAUTHORIZED_CARD
	//  - CVN_NOT_MATCH
	//  - INVALID_CVN
	//  - BLACKLISTED_CUSTOMER
	//  - INVALID_ACCOUNT
	//  - GENERAL_DECLINE
	//  - RISK_CONTROL_DECLINE
	//  - PROCESSOR_RISK_CONTROL_DECLINE
	//  - ALLOWABLE_PIN_RETRIES_EXCEEDED
	//  - PROCESSOR_ERROR
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this oct create payment created body error information
func (o *OctCreatePaymentCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("octCreatePaymentCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oct create payment created body error information based on the context it is used
func (o *OctCreatePaymentCreatedBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("octCreatePaymentCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 oct create payment created body error information details items0
swagger:model OctCreatePaymentCreatedBodyErrorInformationDetailsItems0
*/
type OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this oct create payment created body error information details items0
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oct create payment created body error information details items0 based on context it is used
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyIssuerInformation oct create payment created body issuer information
swagger:model OctCreatePaymentCreatedBodyIssuerInformation
*/
type OctCreatePaymentCreatedBodyIssuerInformation struct {

	// This field contains values that identify the service type under which the transaction should be processed.
	// The valid value for the Visa Alias Directory Service is A0 (Alias) and 00 (normal transaction).
	//
	// Max Length: 2
	ServiceProcessingType string `json:"serviceProcessingType,omitempty"`
}

// Validate validates this oct create payment created body issuer information
func (o *OctCreatePaymentCreatedBodyIssuerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServiceProcessingType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyIssuerInformation) validateServiceProcessingType(formats strfmt.Registry) error {
	if swag.IsZero(o.ServiceProcessingType) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"issuerInformation"+"."+"serviceProcessingType", "body", o.ServiceProcessingType, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body issuer information based on context it is used
func (o *OctCreatePaymentCreatedBodyIssuerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyIssuerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyIssuerInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyIssuerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyLinks oct create payment created body links
swagger:model OctCreatePaymentCreatedBodyLinks
*/
type OctCreatePaymentCreatedBodyLinks struct {

	// self
	Self *OctCreatePaymentCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this oct create payment created body links
func (o *OctCreatePaymentCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body links based on the context it is used
func (o *OctCreatePaymentCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyLinksSelf oct create payment created body links self
swagger:model OctCreatePaymentCreatedBodyLinksSelf
*/
type OctCreatePaymentCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this oct create payment created body links self
func (o *OctCreatePaymentCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oct create payment created body links self based on context it is used
func (o *OctCreatePaymentCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyMerchantInformation oct create payment created body merchant information
swagger:model OctCreatePaymentCreatedBodyMerchantInformation
*/
type OctCreatePaymentCreatedBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this oct create payment created body merchant information
func (o *OctCreatePaymentCreatedBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body merchant information based on the context it is used
func (o *OctCreatePaymentCreatedBodyMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor oct create payment created body merchant information merchant descriptor
swagger:model OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor
*/
type OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor struct {

	// Merchant's country.
	//
	// #### PIN debit
	// Country code for your business location. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	// This value might be displayed on the cardholder's statement.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	// **Note** If your business is located in the U.S. or Canada and you include this field in a
	// request, you must also include `merchantInformation.merchantDescriptor.administrativeArea`.
	//
	// Optional field for PIN debit credit or PIN debit purchase.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// #### PIN debit
	// City for your business location. This value might be displayed on the cardholder's statement.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// Optional field for PIN debit credit or PIN debit purchase requests.
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Your merchant name.
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	// #### PIN debit
	// Your business name. This name is displayed on the cardholder's statement. When you
	// include more than one consecutive space, extra spaces are removed.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// Optional field for PIN debit credit or PIN debit purchase requests.
	//
	// #### Airline processing
	// Your merchant name. This name is displayed on the cardholder's statement. When you include more than one consecutive space, extra spaces are removed.
	//
	// **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.
	//
	// **Important** This value must consist of English characters.
	//
	// Required for captures and credits.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this oct create payment created body merchant information merchant descriptor
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", o.Locality, 13); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body merchant information merchant descriptor based on context it is used
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyOrderInformation oct create payment created body order information
swagger:model OctCreatePaymentCreatedBodyOrderInformation
*/
type OctCreatePaymentCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *OctCreatePaymentCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this oct create payment created body order information
func (o *OctCreatePaymentCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body order information based on the context it is used
func (o *OctCreatePaymentCreatedBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyOrderInformationAmountDetails oct create payment created body order information amount details
swagger:model OctCreatePaymentCreatedBodyOrderInformationAmountDetails
*/
type OctCreatePaymentCreatedBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder's account.
	// This field is returned for OCT transactions.
	//
	// Max Length: 12
	SettlementAmount string `json:"settlementAmount,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
	// This field is returned for OCT transactions.
	//
	// Max Length: 3
	SettlementCurrency string `json:"settlementCurrency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this oct create payment created body order information amount details
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateSettlementAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementAmount", "body", o.SettlementAmount, 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateSettlementCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementCurrency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementCurrency", "body", o.SettlementCurrency, 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body order information amount details based on context it is used
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyProcessorInformation oct create payment created body processor information
swagger:model OctCreatePaymentCreatedBodyProcessorInformation
*/
type OctCreatePaymentCreatedBodyProcessorInformation struct {

	// Issuer-generated approval code for the transaction.
	// Max Length: 6
	ApprovalCode string `json:"approvalCode,omitempty"`

	// Transaction status from the processor.
	// Max Length: 10
	ResponseCode string `json:"responseCode,omitempty"`

	// Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
	//
	// Max Length: 1
	ResponseCodeSource string `json:"responseCodeSource,omitempty"`

	// This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.
	// Returned by authorization and incremental authorization services.
	//
	// #### American Express Direct
	//
	// System trace audit number (STAN). This value identifies the transaction and is useful when investigating a
	// chargeback dispute.
	//
	// #### CyberSource through VisaNet
	//
	// System trace number that must be printed on the customer's receipt.
	//
	// Max Length: 6
	SystemTraceAuditNumber string `json:"systemTraceAuditNumber,omitempty"`

	// Network transaction identifier (TID). This value can be used to identify a specific transaction when
	// you are discussing the transaction with your processor.
	//
	// Max Length: 15
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this oct create payment created body processor information
func (o *OctCreatePaymentCreatedBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApprovalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCodeSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemTraceAuditNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateApprovalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ApprovalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"approvalCode", "body", o.ApprovalCode, 6); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateResponseCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"responseCode", "body", o.ResponseCode, 10); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateResponseCodeSource(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseCodeSource) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"responseCodeSource", "body", o.ResponseCodeSource, 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateSystemTraceAuditNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.SystemTraceAuditNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"systemTraceAuditNumber", "body", o.SystemTraceAuditNumber, 6); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"transactionId", "body", o.TransactionID, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body processor information based on context it is used
func (o *OctCreatePaymentCreatedBodyProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyRecipientInformation oct create payment created body recipient information
swagger:model OctCreatePaymentCreatedBodyRecipientInformation
*/
type OctCreatePaymentCreatedBodyRecipientInformation struct {

	// card
	Card *OctCreatePaymentCreatedBodyRecipientInformationCard `json:"card,omitempty"`
}

// Validate validates this oct create payment created body recipient information
func (o *OctCreatePaymentCreatedBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body recipient information based on the context it is used
func (o *OctCreatePaymentCreatedBodyRecipientInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyRecipientInformationCard oct create payment created body recipient information card
swagger:model OctCreatePaymentCreatedBodyRecipientInformationCard
*/
type OctCreatePaymentCreatedBodyRecipientInformationCard struct {

	// This field shows the available balance in the prepaid account.
	// Acquirers always receive the available balance in the transaction currency.
	//
	// Max Length: 12
	Balance string `json:"balance,omitempty"`

	// This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`
}

// Validate validates this oct create payment created body recipient information card
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(o.Balance) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"recipientInformation"+"."+"card"+"."+"balance", "body", o.Balance, 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"recipientInformation"+"."+"card"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body recipient information card based on context it is used
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyRecipientInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyTokenInformation oct create payment created body token information
swagger:model OctCreatePaymentCreatedBodyTokenInformation
*/
type OctCreatePaymentCreatedBodyTokenInformation struct {

	// customer
	Customer *OctCreatePaymentCreatedBodyTokenInformationCustomer `json:"customer,omitempty"`

	// instrument identifier
	InstrumentIdentifier *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// A value of true means the card number or bank account used to create an Instrument Identifier was new and did not already exist in the token vault.
	// A value of false means the card number or bank account used to create an Instrument Identifier already existed in the token vault.
	//
	InstrumentidentifierNew bool `json:"instrumentidentifierNew,omitempty"`

	// payment instrument
	PaymentInstrument *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument `json:"paymentInstrument,omitempty"`

	// shipping address
	ShippingAddress *OctCreatePaymentCreatedBodyTokenInformationShippingAddress `json:"shippingAddress,omitempty"`
}

// Validate validates this oct create payment created body token information
func (o *OctCreatePaymentCreatedBodyTokenInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) validatePaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrument) { // not required
		return nil
	}

	if o.PaymentInstrument != nil {
		if err := o.PaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) validateShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingAddress) { // not required
		return nil
	}

	if o.ShippingAddress != nil {
		if err := o.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment created body token information based on the context it is used
func (o *OctCreatePaymentCreatedBodyTokenInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) contextValidatePaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstrument != nil {

		if swag.IsZero(o.PaymentInstrument) { // not required
			return nil
		}

		if err := o.PaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformation) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.ShippingAddress != nil {

		if swag.IsZero(o.ShippingAddress) { // not required
			return nil
		}

		if err := o.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentCreated" + "." + "tokenInformation" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyTokenInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyTokenInformationCustomer oct create payment created body token information customer
swagger:model OctCreatePaymentCreatedBodyTokenInformationCustomer
*/
type OctCreatePaymentCreatedBodyTokenInformationCustomer struct {

	// Unique identifier for the Customer token that was created as part of a bundled TOKEN_CREATE action.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this oct create payment created body token information customer
func (o *OctCreatePaymentCreatedBodyTokenInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformationCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"customer"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body token information customer based on context it is used
func (o *OctCreatePaymentCreatedBodyTokenInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationCustomer) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyTokenInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier oct create payment created body token information instrument identifier
swagger:model OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier
*/
type OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier struct {

	// Unique identifier for the Instrument Identifier token that was created as part of a bundled TOKEN_CREATE action.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	State string `json:"state,omitempty"`
}

// Validate validates this oct create payment created body token information instrument identifier
func (o *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body token information instrument identifier based on context it is used
func (o *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyTokenInformationInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument oct create payment created body token information payment instrument
swagger:model OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument
*/
type OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument struct {

	// Unique identifier for the Payment Instrument token that was created as part of a bundled TOKEN_CREATE action.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this oct create payment created body token information payment instrument
func (o *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"paymentInstrument"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"paymentInstrument"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body token information payment instrument based on context it is used
func (o *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyTokenInformationPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentCreatedBodyTokenInformationShippingAddress oct create payment created body token information shipping address
swagger:model OctCreatePaymentCreatedBodyTokenInformationShippingAddress
*/
type OctCreatePaymentCreatedBodyTokenInformationShippingAddress struct {

	// Unique identifier for the Customers Shipping Address token that was created as part of a bundled TOKEN_CREATE action.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this oct create payment created body token information shipping address
func (o *OctCreatePaymentCreatedBodyTokenInformationShippingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyTokenInformationShippingAddress) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"shippingAddress"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"tokenInformation"+"."+"shippingAddress"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment created body token information shipping address based on context it is used
func (o *OctCreatePaymentCreatedBodyTokenInformationShippingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationShippingAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyTokenInformationShippingAddress) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyTokenInformationShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyClientReferenceInformation oct create payment params body client reference information
swagger:model OctCreatePaymentParamsBodyClientReferenceInformation
*/
type OctCreatePaymentParamsBodyClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Version of the CyberSource application or integration used for a transaction.
	//
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this oct create payment params body client reference information
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body client reference information based on context it is used
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyMerchantInformation oct create payment params body merchant information
swagger:model OctCreatePaymentParamsBodyMerchantInformation
*/
type OctCreatePaymentParamsBodyMerchantInformation struct {

	// The value for this field is a four-digit number that the payment card industry uses to classify
	// merchants into market segments. A payment card company assigned one or more of these values to your business when you started
	// accepting the payment card company's cards. When you do not include this field in your request, CyberSource uses the value in your
	// CyberSource account.
	//
	// For processor-specific information, see the `merchant_category_code` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### CyberSource through VisaNet
	// The value for this field corresponds to the following data in the TC 33 capture file5:
	// - Record: CP01 TCR4
	// - Position: 150-153
	// - Field: Merchant Category Code
	//
	// Maximum: 9999
	CategoryCode int64 `json:"categoryCode,omitempty"`

	// merchant descriptor
	MerchantDescriptor *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`

	// Time that the transaction was submitted in local time. The time is in hhmmss format.
	//
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`

	// Your government-assigned tax identification number.
	//
	// #### Tax Calculation
	// Required field for value added tax only. Not applicable to U.S. and Canadian taxes.
	//
	// #### CyberSource through VisaNet
	// For CtV processors, the maximum length is 20.
	//
	// For other processor-specific information, see the `merchant_vat_registration_number` field description in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Max Length: 21
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this oct create payment params body merchant information
func (o *OctCreatePaymentParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategoryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateCategoryCode(formats strfmt.Registry) error {
	if swag.IsZero(o.CategoryCode) { // not required
		return nil
	}

	if err := validate.MaximumInt("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"categoryCode", "body", o.CategoryCode, 9999, false); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"vatRegistrationNumber", "body", o.VatRegistrationNumber, 21); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oct create payment params body merchant information based on the context it is used
func (o *OctCreatePaymentParamsBodyMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor oct create payment params body merchant information merchant descriptor
swagger:model OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor
*/
type OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor struct {

	// First line of merchant's address. For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_street` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// The state where the merchant is located.
	//
	// #### PIN debit
	// State code or region code for your business. Use the Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) This value might be displayed on the cardholder's statement.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// **Note** This field is supported only for businesses located in the U.S. or Canada.
	//
	// Optional field for PIN debit credit or PIN debit purchase.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_contact` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)-->
	// Contact information for the merchant.
	//
	// **Note** These are the maximum data lengths for the following payment processors:
	// - FDCCompass (13)
	// - Paymentech (13)
	//
	// Max Length: 14
	Contact string `json:"contact,omitempty"`

	// Merchant's country.
	//
	// #### PIN debit
	// Country code for your business location. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	// This value might be displayed on the cardholder's statement.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	// **Note** If your business is located in the U.S. or Canada and you include this field in a
	// request, you must also include `merchantInformation.merchantDescriptor.administrativeArea`.
	//
	// Optional field for PIN debit credit or PIN debit purchase.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// #### PIN debit
	// City for your business location. This value might be displayed on the cardholder's statement.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// Optional field for PIN debit credit or PIN debit purchase requests.
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Your merchant name.
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	// #### PIN debit
	// Your business name. This name is displayed on the cardholder's statement. When you
	// include more than one consecutive space, extra spaces are removed.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// Optional field for PIN debit credit or PIN debit purchase requests.
	//
	// #### Airline processing
	// Your merchant name. This name is displayed on the cardholder's statement. When you include more than one consecutive space, extra spaces are removed.
	//
	// **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.
	//
	// **Important** This value must consist of English characters.
	//
	// Required for captures and credits.
	//
	Name string `json:"name,omitempty"`

	// Merchant's postal code.
	//
	// #### PIN debit
	// Postal code for your business location. This value might be displayed on the cardholder's statement.
	//
	// If your business is domiciled in the U.S., you can use a 5-digit or 9-digit postal code. A 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// Example: `12345-6789`
	//
	// If your business is domiciled in Canada, you can use a 6-digit or 9-digit postal code. A 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example: `A1B 2C3`
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// **Note** This field is supported only for businesses located in the U.S. or Canada.
	// **Important** Mastercard requires a postal code for any country that uses postal codes.
	// You can provide the postal code in your account or you can include this field in your request.
	//
	// Optional field for PIN debit credit or PIN debit purchase.
	//
	// Max Length: 14
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body merchant information merchant descriptor
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(o.Contact) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"contact", "body", o.Contact, 14); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", o.Locality, 13); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"postalCode", "body", o.PostalCode, 14); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body merchant information merchant descriptor based on context it is used
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyOrderInformation oct create payment params body order information
swagger:model OctCreatePaymentParamsBodyOrderInformation
*/
type OctCreatePaymentParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *OctCreatePaymentParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *OctCreatePaymentParamsBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// #### Visa Platform Connect :
	// This API will contain the Flag that specifies whether the payment is for the purchase of cryptocurrency.
	// Additional values to add :
	// This API will contain the Flag that specifies whether the payment is for the purchase of cryptocurrency.
	// valid values are
	// - Y/y, true
	// - N/n, false
	//
	IsCryptocurrencyPurchase string `json:"isCryptocurrencyPurchase,omitempty"`
}

// Validate validates this oct create payment params body order information
func (o *OctCreatePaymentParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment params body order information based on the context it is used
func (o *OctCreatePaymentParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyOrderInformationAmountDetails oct create payment params body order information amount details
swagger:model OctCreatePaymentParamsBodyOrderInformationAmountDetails
*/
type OctCreatePaymentParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// surcharge
	Surcharge *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge `json:"surcharge,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this oct create payment params body order information amount details
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSurcharge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateSurcharge(formats strfmt.Registry) error {
	if swag.IsZero(o.Surcharge) { // not required
		return nil
	}

	if o.Surcharge != nil {
		if err := o.Surcharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "surcharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "surcharge")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oct create payment params body order information amount details based on the context it is used
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSurcharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) contextValidateSurcharge(ctx context.Context, formats strfmt.Registry) error {

	if o.Surcharge != nil {

		if swag.IsZero(o.Surcharge) { // not required
			return nil
		}

		if err := o.Surcharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "surcharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "surcharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge oct create payment params body order information amount details surcharge
swagger:model OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge
*/
type OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge struct {

	// The surcharge amount is included in the total transaction amount but is passed in a separate field to the issuer and acquirer for tracking. The issuer can provide information about the surcharge amount to the customer.
	//
	// If the amount is positive, then it is a debit for the customer.
	// If the amount is negative, then it is a credit for the customer.
	//
	// **NOTE**: This field is supported only for CyberSource through VisaNet (CtV) for Payouts. For CtV, the maximum string length is 8.
	//
	// #### PIN debit
	// Surcharge amount that you are charging the customer for this transaction. If you include a surcharge amount
	// in the request, you must also include the surcharge amount in the value for `orderInformation.amountDetails.totalAmount`.
	//
	// Optional field for transactions that use PIN debit credit or PIN debit purchase.
	//
	// Max Length: 15
	Amount string `json:"amount,omitempty"`
}

// Validate validates this oct create payment params body order information amount details surcharge
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"surcharge"+"."+"amount", "body", o.Amount, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body order information amount details surcharge based on context it is used
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyOrderInformationBillTo oct create payment params body order information bill to
swagger:model OctCreatePaymentParamsBodyOrderInformationBillTo
*/
type OctCreatePaymentParamsBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_,
	// it must be sent as _1 1st Street_.
	//
	// Required if keyed; not used if swiped.
	//
	// String (20)
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional.
	// String (60)
	//
	// #### For Payouts
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Used for additional address information. For example: _Attention: Accounts Payable_
	// Optional field.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### FDMS Nashville
	// `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters.
	// String (20)
	//
	// #### All Other Processors
	// String (60)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// #### SEPA/BACS
	// Required for Create Mandate and Import Mandate
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### RBS WorldPay Atlanta
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's phone number.
	//
	// It is recommended that you include the country code when the order is from outside the U.S.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Optional field.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Customer's phone number type.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// Possible Values:
	// * day
	// * home
	// * night
	// * work
	//
	PhoneType string `json:"phoneType,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada.
	// Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada.
	// Not used if swiped.
	//
	// #### RBS WorldPay Atlanta:
	// For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional field.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body order information bill to
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body order information bill to based on context it is used
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformation oct create payment params body payment information
swagger:model OctCreatePaymentParamsBodyPaymentInformation
*/
type OctCreatePaymentParamsBodyPaymentInformation struct {

	// card
	Card *OctCreatePaymentParamsBodyPaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *OctCreatePaymentParamsBodyPaymentInformationCustomer `json:"customer,omitempty"`

	// instrument identifier
	InstrumentIdentifier *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// payment instrument
	PaymentInstrument *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument `json:"paymentInstrument,omitempty"`

	// tokenized card
	TokenizedCard *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard `json:"tokenizedCard,omitempty"`
}

// Validate validates this oct create payment params body payment information
func (o *OctCreatePaymentParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validatePaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrument) { // not required
		return nil
	}

	if o.PaymentInstrument != nil {
		if err := o.PaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateTokenizedCard(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment params body payment information based on the context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) contextValidatePaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstrument != nil {

		if swag.IsZero(o.PaymentInstrument) { // not required
			return nil
		}

		if err := o.PaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) contextValidateTokenizedCard(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedCard != nil {

		if swag.IsZero(o.TokenizedCard) { // not required
			return nil
		}

		if err := o.TokenizedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformationCard oct create payment params body payment information card
swagger:model OctCreatePaymentParamsBodyPaymentInformationCard
*/
type OctCreatePaymentParamsBodyPaymentInformationCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`. Leading 0 is required.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value
	// (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is
	// in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause
	// the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the payment card expires.
	//
	// Format: `YYYY`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// #### FDMS Nashville
	// Required. String (19)
	//
	// #### GPX
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Flag that specifies the type of account associated with the card.
	// The cardholder provides this information during the payment process.
	//
	// This field is required in the following cases:
	//   - Debit transactions on Cielo and Comercio Latino.
	//   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.
	//   - Applicable only for CyberSource through VisaNet (CtV).
	//
	// **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank
	// identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or
	// credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends
	// that you include this field for combo card transactions.
	//
	// Possible values include the following.
	//
	//  - `CH`: Checking account
	//  - `CR`: Credit card account
	//  - `SA`: Saving account
	//  - `LI`: Line of credit or credit portion of combo card
	//  - `PP`: Prepaid card account or prepaid portion of combo card
	//  - `UA`: Universal account
	//
	// If useAs is set to credit/debit and there is a value in SourceAccountType, the value in the SourceAccountType field will take precedence.
	// If useAs is set to CR/DB and there is a value in SourceAccountType, the value in the useAs field will take precedence.
	//
	// Max Length: 20
	SourceAccountType string `json:"sourceAccountType,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1,4]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	// - '070': EFTPOS
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	// [^4]: For this card type, you must include the `paymentInformation.card.type` in your request for any payer authentication services.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this oct create payment params body payment information card
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceAccountType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", o.Number, 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateSourceAccountType(formats strfmt.Registry) error {
	if swag.IsZero(o.SourceAccountType) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"sourceAccountType", "body", o.SourceAccountType, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body payment information card based on context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformationCustomer oct create payment params body payment information customer
swagger:model OctCreatePaymentParamsBodyPaymentInformationCustomer
*/
type OctCreatePaymentParamsBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer's card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	CustomerID string `json:"customerId,omitempty"`

	// Unique identifier for the Customer token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this oct create payment params body payment information customer
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body payment information customer based on context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier oct create payment params body payment information instrument identifier
swagger:model OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier
*/
type OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier struct {

	// Unique identifier for the Instrument Identifier token used in the transaction.
	// When you include this value in your request, many of the fields that can be supplied for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	State string `json:"state,omitempty"`
}

// Validate validates this oct create payment params body payment information instrument identifier
func (o *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body payment information instrument identifier based on context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument oct create payment params body payment information payment instrument
swagger:model OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument
*/
type OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument struct {

	// Unique identifier for the Payment Instrument token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this oct create payment params body payment information payment instrument
func (o *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"paymentInstrument"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"paymentInstrument"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body payment information payment instrument based on context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyPaymentInformationTokenizedCard oct create payment params body payment information tokenized card
swagger:model OctCreatePaymentParamsBodyPaymentInformationTokenizedCard
*/
type OctCreatePaymentParamsBodyPaymentInformationTokenizedCard struct {

	// Confidence level of the tokenization. This value is assigned by the token service provider.
	//
	// **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
	//
	// Returned by PIN debit credit or PIN debit purchase.
	//
	// **Note** Merchants supported for **CyberSource through VisaNet**/**Visa Platform Connect** are advised not to use this field.
	//
	// Max Length: 2
	AssuranceLevel string `json:"assuranceLevel,omitempty"`

	// Confidence level of the tokenization. This value is assigned by the token service provider.
	//
	// **Note** This field is supported only for **Visa Platform Connect**
	//
	// Max Length: 2
	AssuranceMethod string `json:"assuranceMethod,omitempty"`

	// This field contains token information.
	// Max Length: 255
	Cryptogram string `json:"cryptogram,omitempty"`

	// One of two possible meanings:
	// - The two-digit month in which a token expires.
	// - The two-digit month in which a card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Samsung Pay and Apple Pay
	// Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// One of two possible meanings:
	// - The four-digit year in which a token expires.
	// - The four-digit year in which a card expires.
	// Format: `YYYY`
	// Possible values: `1900` through `3000`
	// Data type: Non-negative integer
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through
	// 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of
	// the year.
	//
	// #### Samsung Pay and Apple Pay
	// Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction
	// you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Customer's payment network token value.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Value that identifies your business and indicates that the cardholder's account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider's database.
	//
	// **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
	//
	// #### PIN debit
	// Optional field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
	//
	// Max Length: 11
	RequestorID string `json:"requestorId,omitempty"`

	// Card Verification Number (CVN).
	//
	// #### Ingenico ePayments
	// Do not include this field when **commerceIndicator=recurring**.
	// **Note** Ingenico ePayments was previously called _Global Collect_.
	//
	// For details, see `customer_cc_cv_number` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`

	// Indicates whether a CVN code was sent. Possible values:
	//
	//  - `0` (default): CVN service not requested. This default value is used when you do not include
	//      `securityCode` field in the request.
	//  - `1` (default): CVN service requested and supported. This default value is used when you include
	//      `securityCode` field in the request.
	//  - `2`: CVN on credit card is illegible.
	//  - `9`: CVN was not imprinted on credit card.
	//
	// #### FDMS Nashville
	// Required for American Express cards; otherwise, optional.
	//
	// #### TSYS Acquiring Solutions
	// Optional if `pointOfSaleInformation.entryMode=keyed`; otherwise, not used.
	//
	// #### All other processors
	// Optional.
	//
	// Max Length: 1
	SecurityCodeIndicator string `json:"securityCodeIndicator,omitempty"`

	// Type of technology used in the device to store token data. Possible values:
	//
	// - `001`: Secure Element (SE). Smart card or memory with restricted access and encryption to prevent data tampering. For storing payment
	//    credentials, a SE is tested against a set of requirements defined by the payment networks.
	//
	//    **Note** This field is supported only for _FDC Compass_.
	//
	// - 002: Host Card Emulation (HCE). Emulation of a smart card by using software to create a virtual and exact representation of the card.
	// Sensitive data is stored in a database that is hosted in the cloud. For storing payment credentials, a database
	// must meet very stringent security requirements that exceed PCI DSS.
	//
	// **Note** This field is supported only for _FDC Compass_.
	//
	// Max Length: 3
	StorageMethod string `json:"storageMethod,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it specifies the entity that
	// provided you with information about the token.
	//
	// Possible value:
	// - `2`: Near-field communication (NFC) transaction. The customer's mobile device provided the token data for a contactless EMV transaction. For recurring
	// transactions, use this value if the original transaction was a contactless EMV transaction.
	//
	// #### Visa Platform Connect
	// - `1`: For Rupay and In App tokenization. Example: InApp apple pay.
	// - `3`: Card/Credential On File Tokenization.
	//
	// **NOTE** No CyberSource through VisaNet acquirers support EMV at this time.
	//
	// Required field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
	//
	// #### Rupay
	// - `3`: Card/Credential On File Tokenization.
	// - `4`: Tokenizined Transaction. Should be used for Guest Checkout transactions with token.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1,4]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	// - '070': EFTPOS
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	// [^4]: For this card type, you must include the `paymentInformation.card.type` in your request for any payer authentication services.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this oct create payment params body payment information tokenized card
func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssuranceLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssuranceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCryptogram(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCodeIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateAssuranceLevel(formats strfmt.Registry) error {
	if swag.IsZero(o.AssuranceLevel) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"assuranceLevel", "body", o.AssuranceLevel, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateAssuranceMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.AssuranceMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"assuranceMethod", "body", o.AssuranceMethod, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateCryptogram(formats strfmt.Registry) error {
	if swag.IsZero(o.Cryptogram) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"cryptogram", "body", o.Cryptogram, 255); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"number", "body", o.Number, 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateRequestorID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"requestorId", "body", o.RequestorID, 11); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"securityCode", "body", o.SecurityCode, 4); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateSecurityCodeIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCodeIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"securityCodeIndicator", "body", o.SecurityCodeIndicator, 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateStorageMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.StorageMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"storageMethod", "body", o.StorageMethod, 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"transactionType", "body", o.TransactionType, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body payment information tokenized card based on context it is used
func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationTokenizedCard) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyProcessingInformation oct create payment params body processing information
swagger:model OctCreatePaymentParamsBodyProcessingInformation
*/
type OctCreatePaymentParamsBodyProcessingInformation struct {

	// Payouts transaction type.
	//
	// Applicable Processors: FDC Compass, Paymentech, CtV
	//
	// Possible values:
	//
	// **Credit Card Bill Payment**
	//
	//  - **CP**: credit card bill payment
	//
	// **Funds Disbursement**
	//
	//  - **FD**: funds disbursement
	//  - **GD**: government disbursement
	//  - **MD**: merchant disbursement
	//
	// **Money Transfer**
	//
	//  - **AA**: account to account. Sender and receiver are same person.
	//  - **PP**: person to person. Sender and receiver are different.
	//
	// **Prepaid Load**
	//
	//  - **TU**: top up
	//
	// Max Length: 2
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of transaction.
	//
	// Value for an OCT transaction:
	// - `internet`
	//
	// For details, see the `e_commerce_indicator` field description in [Payouts Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/payouts_SCMP/html/)
	//
	// Max Length: 13
	CommerceIndicator string `json:"commerceIndicator,omitempty"`

	// funding options
	FundingOptions *OctCreatePaymentParamsBodyProcessingInformationFundingOptions `json:"fundingOptions,omitempty"`

	// This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to get the attributes for specified networks only.
	// The networks specified in this field must be a subset of the information provided during program enrollment. Refer to Sharing Group Code/Network Routing Order.
	// Note: Supported only in US for domestic transactions involving Push Payments Gateway Service.
	//
	// VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the network routing order.
	// If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer's preference.
	// If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer's routing priorities.
	//
	// For details, see the `network_order` field description in [BIN Lookup Service Using the SCMP API.](http://apps.cybersource.com/library/documentation/BIN_Lookup/BIN_Lookup_SCMP_API/html/)
	//
	// Max Length: 30
	NetworkRoutingOrder string `json:"networkRoutingOrder,omitempty"`

	// payouts options
	PayoutsOptions *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions `json:"payoutsOptions,omitempty"`

	// This will send purpose of funds code for original credit transactions (OCTs).
	//
	// Max Length: 12
	PurposeOfPayment string `json:"purposeOfPayment,omitempty"`

	// Please check with Cybersource customer support to see if your merchant account is configured correctly so you
	// can include this field in your request.
	// * For Payouts: max length for FDCCompass is String (22).
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// Transaction reason code.
	//
	// Max Length: 4
	TransactionReason string `json:"transactionReason,omitempty"`
}

// Validate validates this oct create payment params body processing information
func (o *OctCreatePaymentParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFundingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkRoutingOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePayoutsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePurposeOfPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateBusinessApplicationID(formats strfmt.Registry) error {
	if swag.IsZero(o.BusinessApplicationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"businessApplicationId", "body", o.BusinessApplicationID, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"commerceIndicator", "body", o.CommerceIndicator, 13); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateFundingOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.FundingOptions) { // not required
		return nil
	}

	if o.FundingOptions != nil {
		if err := o.FundingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateNetworkRoutingOrder(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkRoutingOrder) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"networkRoutingOrder", "body", o.NetworkRoutingOrder, 30); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validatePayoutsOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.PayoutsOptions) { // not required
		return nil
	}

	if o.PayoutsOptions != nil {
		if err := o.PayoutsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validatePurposeOfPayment(formats strfmt.Registry) error {
	if swag.IsZero(o.PurposeOfPayment) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"purposeOfPayment", "body", o.PurposeOfPayment, 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"reconciliationId", "body", o.ReconciliationID, 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateTransactionReason(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionReason) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"transactionReason", "body", o.TransactionReason, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oct create payment params body processing information based on the context it is used
func (o *OctCreatePaymentParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFundingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePayoutsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) contextValidateFundingOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.FundingOptions != nil {

		if swag.IsZero(o.FundingOptions) { // not required
			return nil
		}

		if err := o.FundingOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) contextValidatePayoutsOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.PayoutsOptions != nil {

		if swag.IsZero(o.PayoutsOptions) { // not required
			return nil
		}

		if err := o.PayoutsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyProcessingInformationFundingOptions oct create payment params body processing information funding options
swagger:model OctCreatePaymentParamsBodyProcessingInformationFundingOptions
*/
type OctCreatePaymentParamsBodyProcessingInformationFundingOptions struct {

	// initiator
	Initiator *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this oct create payment params body processing information funding options
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oct create payment params body processing information funding options based on the context it is used
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "fundingOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptions) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformationFundingOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator oct create payment params body processing information funding options initiator
swagger:model OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator
*/
type OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator struct {

	// #### Visa Platform Connect :
	// This API will contain a code that denotes whether the customer identification data belongs to the sender or the recipient.
	//
	// The valid values are:
	// • S (Payer (sender))
	// • R (Payee (recipient))
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this oct create payment params body processing information funding options initiator
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"fundingOptions"+"."+"initiator"+"."+"type", "body", o.Type, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body processing information funding options initiator based on context it is used
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformationFundingOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions oct create payment params body processing information payouts options
swagger:model OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions
*/
type OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions struct {

	// Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 15
	AccountFundingReferenceID string `json:"accountFundingReferenceId,omitempty"`

	// This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant or ADM or dispensed cash.
	// This number is usually Visa-assigned.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 11
	AcquirerBin string `json:"acquirerBin,omitempty"`

	// This field identifies the card acceptor for defining the point of service terminal in both local and interchange environments. An acquirer-assigned code identifying the card acceptor for the transaction.
	// Depending on the acquirer and merchant billing and reporting requirements, the code can represent a merchant, a specific merchant location, or a specific merchant location terminal.
	// Acquiring Institution Identification Code uniquely identifies the merchant.
	// The value from the original is required in any subsequent messages, including reversals, chargebacks, and representments.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 15
	AcquirerMerchantID string `json:"acquirerMerchantId,omitempty"`

	// #### Visa Platform Connect
	//
	// Contains date and time value indicating scheduled deferred OCT.
	//
	// Format is : 'yyyyMMddHHmm', where
	//
	// 'YYYY' = year
	// 'MM' = month
	// 'DD' = day
	// 'hh' = hour
	// 'mm' = minutes
	//
	// Max Length: 12
	DeferredDateTime string `json:"deferredDateTime,omitempty"`

	// This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction;
	// that is, to a given transaction set.
	//
	// Format:
	//   Positions 1-4: The `yddd` equivalent of the date, where `y` = 0-9 and `ddd` = 001 – 366.
	//   Positions 5-12: A unique identification number generated by the merchant
	//
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 12
	RetrievalReferenceNumber string `json:"retrievalReferenceNumber,omitempty"`
}

// Validate validates this oct create payment params body processing information payouts options
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountFundingReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcquirerBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcquirerMerchantID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeferredDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetrievalReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAccountFundingReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountFundingReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"accountFundingReferenceId", "body", o.AccountFundingReferenceID, 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAcquirerBin(formats strfmt.Registry) error {
	if swag.IsZero(o.AcquirerBin) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"acquirerBin", "body", o.AcquirerBin, 11); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAcquirerMerchantID(formats strfmt.Registry) error {
	if swag.IsZero(o.AcquirerMerchantID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"acquirerMerchantId", "body", o.AcquirerMerchantID, 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateDeferredDateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DeferredDateTime) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"deferredDateTime", "body", o.DeferredDateTime, 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateRetrievalReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.RetrievalReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"retrievalReferenceNumber", "body", o.RetrievalReferenceNumber, 12); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body processing information payouts options based on context it is used
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodyRecipientInformation oct create payment params body recipient information
swagger:model OctCreatePaymentParamsBodyRecipientInformation
*/
type OctCreatePaymentParamsBodyRecipientInformation struct {

	// Recipient address information. Required only for FDCCompass.
	// Max Length: 50
	Address1 string `json:"address1,omitempty"`

	// Recipient State. Required only for FDCCompass.
	// Max Length: 3
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Recipient country code. Required only for FDCCompass.
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Recipient date of birth in YYYYMMDD format. Required only for FDCCompass.
	// Max Length: 8
	// Min Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// First name of recipient.
	// characters.
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	FirstName string `json:"firstName,omitempty"`

	// Last name of recipient.
	// characters.
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	LastName string `json:"lastName,omitempty"`

	// Recipient city. Required only for FDCCompass.
	// Max Length: 25
	Locality string `json:"locality,omitempty"`

	// Middle Initial of recipient. Required only for FDCCompass.
	//
	// Max Length: 1
	MiddleInitial string `json:"middleInitial,omitempty"`

	// Recipient's middle name. This field is a _passthrough_, which means that CyberSource does not verify the value or
	// modify it in any way before sending it to the processor. If the field is not required for the transaction,
	// CyberSource does not forward it to the processor.
	//
	// Max Length: 35
	MiddleName string `json:"middleName,omitempty"`

	// Recipient phone number. Required only for FDCCompass.
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Recipient postal code. Required only for FDCCompass.
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body recipient information
func (o *OctCreatePaymentParamsBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"address1", "body", o.Address1, 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"administrativeArea", "body", o.AdministrativeArea, 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"firstName", "body", o.FirstName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"lastName", "body", o.LastName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"locality", "body", o.Locality, 25); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateMiddleInitial(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleInitial) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"middleInitial", "body", o.MiddleInitial, 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"middleName", "body", o.MiddleName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"phoneNumber", "body", o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body recipient information based on context it is used
func (o *OctCreatePaymentParamsBodyRecipientInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodySenderInformation oct create payment params body sender information
swagger:model OctCreatePaymentParamsBodySenderInformation
*/
type OctCreatePaymentParamsBodySenderInformation struct {

	// account
	Account *OctCreatePaymentParamsBodySenderInformationAccount `json:"account,omitempty"`

	// Street address of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the address of the originator sending the funds disbursement.
	//
	// Max Length: 50
	Address1 string `json:"address1,omitempty"`

	// Sender's state. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// Max Length: 2
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of sender. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	// * CTV (3)
	//
	// Max Length: 2
	CountryCode string `json:"countryCode,omitempty"`

	// Sender's date of birth in YYYYMMDD format. Required only for FDCCompass.
	// Max Length: 8
	// Min Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// First name of sender (Optional).
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	FirstName string `json:"firstName,omitempty"`

	// #### Visa Platform Connect
	// This tag will contain an acquirer-populated value associated with the API : senderInformation.personalIdType which will identify the personal ID type of the sender.
	//
	// Max Length: 255
	IdentificationNumber string `json:"identificationNumber,omitempty"`

	// Recipient last name (Optional).
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	LastName string `json:"lastName,omitempty"`

	// City of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the city of the originator sending the funds disbursement.
	//
	// Max Length: 25
	Locality string `json:"locality,omitempty"`

	// Recipient middle initial (Optional).
	//
	// Max Length: 1
	MiddleInitial string `json:"middleInitial,omitempty"`

	// Sender's middle name. This field is a _passthrough_, which means that CyberSource does not verify the value or
	// modify it in any way before sending it to the processor. If the field is not required for the transaction,
	// CyberSource does not forward it to the processor.
	//
	// Max Length: 35
	MiddleName string `json:"middleName,omitempty"`

	// Name of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the name of the originator sending the funds disbursement.
	// * CTV, Paymentech (30)
	//
	// Max Length: 24
	Name string `json:"name,omitempty"`

	// #### Visa Platform Connect
	// This tag will contain the type of sender identification.
	// The valid values are:
	// • BTHD (Date of birth)
	// • CUID (Customer identification (unspecified))
	// • NTID (National identification)
	// • PASN (Passport number)
	// • DRLN (Driver license)
	// • TXIN (Tax identification)
	// • CPNY (Company registration number)
	// • PRXY (Proxy identification)
	// • SSNB (Social security number)
	// • ARNB (Alien registration number)
	// • LAWE (Law enforcement identification)
	// • MILI (Military identification)
	// • TRVL (Travel identification (non-passport))
	// • EMAL (Email)
	// • PHON (Phone number)
	//
	// Max Length: 4
	PersonalIDType string `json:"personalIdType,omitempty"`

	// Sender's phone number. Required only for FDCCompass.
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Sender's postal code. Required only for FDCCompass.
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`

	// Reference number generated by you that uniquely identifies the sender.
	// Max Length: 19
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// #### Visa Platform Connect
	// This tag will denote whether the tax ID is a business or individual tax ID when personal ID Type contains the value of TXIN (Tax identification).
	//
	// The valid values are:
	// • B (Business)
	// • I (Individual)
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`

	// Customer's government-assigned tax identification number.
	//
	// Max Length: 13
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this oct create payment params body sender information
func (o *OctCreatePaymentParamsBodySenderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdentificationNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIDType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "senderInformation" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"address1", "body", o.Address1, 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"administrativeArea", "body", o.AdministrativeArea, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(o.CountryCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"countryCode", "body", o.CountryCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"firstName", "body", o.FirstName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateIdentificationNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.IdentificationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"identificationNumber", "body", o.IdentificationNumber, 255); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"lastName", "body", o.LastName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"locality", "body", o.Locality, 25); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateMiddleInitial(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleInitial) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"middleInitial", "body", o.MiddleInitial, 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"middleName", "body", o.MiddleName, 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"name", "body", o.Name, 24); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validatePersonalIDType(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIDType) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"personalIdType", "body", o.PersonalIDType, 4); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"phoneNumber", "body", o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.ReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"referenceNumber", "body", o.ReferenceNumber, 19); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"type", "body", o.Type, 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"vatRegistrationNumber", "body", o.VatRegistrationNumber, 13); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oct create payment params body sender information based on the context it is used
func (o *OctCreatePaymentParamsBodySenderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.Account != nil {

		if swag.IsZero(o.Account) { // not required
			return nil
		}

		if err := o.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("octCreatePaymentRequest" + "." + "senderInformation" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodySenderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OctCreatePaymentParamsBodySenderInformationAccount oct create payment params body sender information account
swagger:model OctCreatePaymentParamsBodySenderInformationAccount
*/
type OctCreatePaymentParamsBodySenderInformationAccount struct {

	// Source of funds. Possible values:
	//
	//   Paymentech, CTV, FDC Compass:
	//  - 01: Credit card
	//  - 02: Debit card
	//  - 03: Prepaid card
	//
	//   Paymentech, CTV -
	//  - 04: Cash
	//  - 05: Debit or deposit account that is not linked to a Visa card. Includes checking accounts, savings
	//        accounts, and proprietary debit or ATM cards.
	//  - 06: Credit account that is not linked to a Visa card. Includes credit cards and proprietary lines
	//        of credit.
	//
	//   FDCCompass -
	//   - 04: Deposit Account
	//
	// **Funds Disbursement**
	//
	// This value is most likely 05 to identify that the originator used a deposit account to fund the
	// disbursement.
	//
	// **Credit Card Bill Payment**
	//
	// This value must be 02, 03, 04, or 05.
	//
	// Max Length: 2
	// Min Length: 2
	FundsSource string `json:"fundsSource,omitempty"`

	// The account number of the entity funding the transaction. It is the sender's account number. It can
	// be a debit/credit card account number or bank account number.
	//
	// **Funds disbursements**
	//
	// This field is optional.
	//
	// **All other transactions**
	//
	// This field is required when the sender funds the transaction with a financial instrument, for example
	// debit card.
	// Length:
	// * FDCCompass (<= 19)
	// * Paymentech (<= 16)
	//
	// Max Length: 34
	Number string `json:"number,omitempty"`
}

// Validate validates this oct create payment params body sender information account
func (o *OctCreatePaymentParamsBodySenderInformationAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFundsSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformationAccount) validateFundsSource(formats strfmt.Registry) error {
	if swag.IsZero(o.FundsSource) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"fundsSource", "body", o.FundsSource, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"fundsSource", "body", o.FundsSource, 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformationAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"number", "body", o.Number, 34); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oct create payment params body sender information account based on context it is used
func (o *OctCreatePaymentParamsBodySenderInformationAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformationAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformationAccount) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodySenderInformationAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
