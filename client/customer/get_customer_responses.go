// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCustomerReader is a Reader for the GetCustomer structure.
type GetCustomerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCustomerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCustomerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCustomerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCustomerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCustomerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetCustomerGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetCustomerFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCustomerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tms/v2/customers/{customerId}] getCustomer", response, response.Code())
	}
}

// NewGetCustomerOK creates a GetCustomerOK with default headers values
func NewGetCustomerOK() *GetCustomerOK {
	return &GetCustomerOK{}
}

/*
GetCustomerOK describes a response with status code 200, with default header values.

Returns an existing Customer associated with the supplied Id.
*/
type GetCustomerOK struct {

	/* An ETag is an identifier assigned to a specific version of a resource.
	 */
	ETag string

	/* A globally-unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerOKBody
}

// IsSuccess returns true when this get customer o k response has a 2xx status code
func (o *GetCustomerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get customer o k response has a 3xx status code
func (o *GetCustomerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer o k response has a 4xx status code
func (o *GetCustomerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get customer o k response has a 5xx status code
func (o *GetCustomerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer o k response a status code equal to that given
func (o *GetCustomerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get customer o k response
func (o *GetCustomerOK) Code() int {
	return 200
}

func (o *GetCustomerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerOK %s", 200, payload)
}

func (o *GetCustomerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerOK %s", 200, payload)
}

func (o *GetCustomerOK) GetPayload() *GetCustomerOKBody {
	return o.Payload
}

func (o *GetCustomerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerBadRequest creates a GetCustomerBadRequest with default headers values
func NewGetCustomerBadRequest() *GetCustomerBadRequest {
	return &GetCustomerBadRequest{}
}

/*
GetCustomerBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type GetCustomerBadRequest struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerBadRequestBody
}

// IsSuccess returns true when this get customer bad request response has a 2xx status code
func (o *GetCustomerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer bad request response has a 3xx status code
func (o *GetCustomerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer bad request response has a 4xx status code
func (o *GetCustomerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get customer bad request response has a 5xx status code
func (o *GetCustomerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer bad request response a status code equal to that given
func (o *GetCustomerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get customer bad request response
func (o *GetCustomerBadRequest) Code() int {
	return 400
}

func (o *GetCustomerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerBadRequest %s", 400, payload)
}

func (o *GetCustomerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerBadRequest %s", 400, payload)
}

func (o *GetCustomerBadRequest) GetPayload() *GetCustomerBadRequestBody {
	return o.Payload
}

func (o *GetCustomerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerForbidden creates a GetCustomerForbidden with default headers values
func NewGetCustomerForbidden() *GetCustomerForbidden {
	return &GetCustomerForbidden{}
}

/*
GetCustomerForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type GetCustomerForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerForbiddenBody
}

// IsSuccess returns true when this get customer forbidden response has a 2xx status code
func (o *GetCustomerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer forbidden response has a 3xx status code
func (o *GetCustomerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer forbidden response has a 4xx status code
func (o *GetCustomerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get customer forbidden response has a 5xx status code
func (o *GetCustomerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer forbidden response a status code equal to that given
func (o *GetCustomerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get customer forbidden response
func (o *GetCustomerForbidden) Code() int {
	return 403
}

func (o *GetCustomerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerForbidden %s", 403, payload)
}

func (o *GetCustomerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerForbidden %s", 403, payload)
}

func (o *GetCustomerForbidden) GetPayload() *GetCustomerForbiddenBody {
	return o.Payload
}

func (o *GetCustomerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerNotFound creates a GetCustomerNotFound with default headers values
func NewGetCustomerNotFound() *GetCustomerNotFound {
	return &GetCustomerNotFound{}
}

/*
GetCustomerNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type GetCustomerNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerNotFoundBody
}

// IsSuccess returns true when this get customer not found response has a 2xx status code
func (o *GetCustomerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer not found response has a 3xx status code
func (o *GetCustomerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer not found response has a 4xx status code
func (o *GetCustomerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get customer not found response has a 5xx status code
func (o *GetCustomerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer not found response a status code equal to that given
func (o *GetCustomerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get customer not found response
func (o *GetCustomerNotFound) Code() int {
	return 404
}

func (o *GetCustomerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerNotFound %s", 404, payload)
}

func (o *GetCustomerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerNotFound %s", 404, payload)
}

func (o *GetCustomerNotFound) GetPayload() *GetCustomerNotFoundBody {
	return o.Payload
}

func (o *GetCustomerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerGone creates a GetCustomerGone with default headers values
func NewGetCustomerGone() *GetCustomerGone {
	return &GetCustomerGone{}
}

/*
GetCustomerGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type GetCustomerGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerGoneBody
}

// IsSuccess returns true when this get customer gone response has a 2xx status code
func (o *GetCustomerGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer gone response has a 3xx status code
func (o *GetCustomerGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer gone response has a 4xx status code
func (o *GetCustomerGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this get customer gone response has a 5xx status code
func (o *GetCustomerGone) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer gone response a status code equal to that given
func (o *GetCustomerGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the get customer gone response
func (o *GetCustomerGone) Code() int {
	return 410
}

func (o *GetCustomerGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerGone %s", 410, payload)
}

func (o *GetCustomerGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerGone %s", 410, payload)
}

func (o *GetCustomerGone) GetPayload() *GetCustomerGoneBody {
	return o.Payload
}

func (o *GetCustomerGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerFailedDependency creates a GetCustomerFailedDependency with default headers values
func NewGetCustomerFailedDependency() *GetCustomerFailedDependency {
	return &GetCustomerFailedDependency{}
}

/*
GetCustomerFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetCustomerFailedDependency struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerFailedDependencyBody
}

// IsSuccess returns true when this get customer failed dependency response has a 2xx status code
func (o *GetCustomerFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer failed dependency response has a 3xx status code
func (o *GetCustomerFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer failed dependency response has a 4xx status code
func (o *GetCustomerFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this get customer failed dependency response has a 5xx status code
func (o *GetCustomerFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this get customer failed dependency response a status code equal to that given
func (o *GetCustomerFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the get customer failed dependency response
func (o *GetCustomerFailedDependency) Code() int {
	return 424
}

func (o *GetCustomerFailedDependency) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerFailedDependency %s", 424, payload)
}

func (o *GetCustomerFailedDependency) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerFailedDependency %s", 424, payload)
}

func (o *GetCustomerFailedDependency) GetPayload() *GetCustomerFailedDependencyBody {
	return o.Payload
}

func (o *GetCustomerFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerInternalServerError creates a GetCustomerInternalServerError with default headers values
func NewGetCustomerInternalServerError() *GetCustomerInternalServerError {
	return &GetCustomerInternalServerError{}
}

/*
GetCustomerInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type GetCustomerInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetCustomerInternalServerErrorBody
}

// IsSuccess returns true when this get customer internal server error response has a 2xx status code
func (o *GetCustomerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get customer internal server error response has a 3xx status code
func (o *GetCustomerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get customer internal server error response has a 4xx status code
func (o *GetCustomerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get customer internal server error response has a 5xx status code
func (o *GetCustomerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get customer internal server error response a status code equal to that given
func (o *GetCustomerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get customer internal server error response
func (o *GetCustomerInternalServerError) Code() int {
	return 500
}

func (o *GetCustomerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerInternalServerError %s", 500, payload)
}

func (o *GetCustomerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tms/v2/customers/{customerId}][%d] getCustomerInternalServerError %s", 500, payload)
}

func (o *GetCustomerInternalServerError) GetPayload() *GetCustomerInternalServerErrorBody {
	return o.Payload
}

func (o *GetCustomerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(GetCustomerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCustomerBadRequestBody get customer bad request body
swagger:model GetCustomerBadRequestBody
*/
type GetCustomerBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer bad request body
func (o *GetCustomerBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer bad request body based on the context it is used
func (o *GetCustomerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerBadRequest"+"."+"errors", "body", []*GetCustomerBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerBadRequestBodyErrorsItems0 get customer bad request body errors items0
swagger:model GetCustomerBadRequestBodyErrorsItems0
*/
type GetCustomerBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetCustomerBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - invalidHeaders
	//   - missingHeaders
	//   - invalidFields
	//   - missingFields
	//   - unsupportedPaymentMethodModification
	//   - invalidCombination
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer bad request body errors items0
func (o *GetCustomerBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer bad request body errors items0 based on the context it is used
func (o *GetCustomerBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*GetCustomerBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerBadRequestBodyErrorsItems0DetailsItems0 get customer bad request body errors items0 details items0
swagger:model GetCustomerBadRequestBodyErrorsItems0DetailsItems0
*/
type GetCustomerBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get customer bad request body errors items0 details items0
func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer bad request body errors items0 details items0 based on the context it is used
func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerFailedDependencyBody get customer failed dependency body
swagger:model GetCustomerFailedDependencyBody
*/
type GetCustomerFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer failed dependency body
func (o *GetCustomerFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer failed dependency body based on the context it is used
func (o *GetCustomerFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerFailedDependency"+"."+"errors", "body", []*GetCustomerFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerFailedDependencyBodyErrorsItems0 get customer failed dependency body errors items0
swagger:model GetCustomerFailedDependencyBodyErrorsItems0
*/
type GetCustomerFailedDependencyBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer failed dependency body errors items0
func (o *GetCustomerFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer failed dependency body errors items0 based on the context it is used
func (o *GetCustomerFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerForbiddenBody get customer forbidden body
swagger:model GetCustomerForbiddenBody
*/
type GetCustomerForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer forbidden body
func (o *GetCustomerForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer forbidden body based on the context it is used
func (o *GetCustomerForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerForbidden"+"."+"errors", "body", []*GetCustomerForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerForbiddenBodyErrorsItems0 get customer forbidden body errors items0
swagger:model GetCustomerForbiddenBodyErrorsItems0
*/
type GetCustomerForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer forbidden body errors items0
func (o *GetCustomerForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer forbidden body errors items0 based on the context it is used
func (o *GetCustomerForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerGoneBody get customer gone body
swagger:model GetCustomerGoneBody
*/
type GetCustomerGoneBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer gone body
func (o *GetCustomerGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer gone body based on the context it is used
func (o *GetCustomerGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerGone"+"."+"errors", "body", []*GetCustomerGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerGoneBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerGoneBodyErrorsItems0 get customer gone body errors items0
swagger:model GetCustomerGoneBodyErrorsItems0
*/
type GetCustomerGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer gone body errors items0
func (o *GetCustomerGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer gone body errors items0 based on the context it is used
func (o *GetCustomerGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerInternalServerErrorBody get customer internal server error body
swagger:model GetCustomerInternalServerErrorBody
*/
type GetCustomerInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer internal server error body
func (o *GetCustomerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer internal server error body based on the context it is used
func (o *GetCustomerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerInternalServerError"+"."+"errors", "body", []*GetCustomerInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerInternalServerErrorBodyErrorsItems0 get customer internal server error body errors items0
swagger:model GetCustomerInternalServerErrorBodyErrorsItems0
*/
type GetCustomerInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer internal server error body errors items0
func (o *GetCustomerInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer internal server error body errors items0 based on the context it is used
func (o *GetCustomerInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerNotFoundBody get customer not found body
swagger:model GetCustomerNotFoundBody
*/
type GetCustomerNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*GetCustomerNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get customer not found body
func (o *GetCustomerNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer not found body based on the context it is used
func (o *GetCustomerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerNotFound"+"."+"errors", "body", []*GetCustomerNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerNotFoundBodyErrorsItems0 get customer not found body errors items0
swagger:model GetCustomerNotFoundBodyErrorsItems0
*/
type GetCustomerNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer not found body errors items0
func (o *GetCustomerNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer not found body errors items0 based on the context it is used
func (o *GetCustomerNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBody get customer o k body
swagger:model GetCustomerOKBody
*/
type GetCustomerOKBody struct {

	// embedded
	Embedded *GetCustomerOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetCustomerOKBodyLinks `json:"_links,omitempty"`

	// buyer information
	BuyerInformation *GetCustomerOKBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *GetCustomerOKBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// default payment instrument
	DefaultPaymentInstrument *GetCustomerOKBodyDefaultPaymentInstrument `json:"defaultPaymentInstrument,omitempty"`

	// default shipping address
	DefaultShippingAddress *GetCustomerOKBodyDefaultShippingAddress `json:"defaultShippingAddress,omitempty"`

	// The Id of the Customer Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// Object containing the custom data that the merchant defines.
	//
	MerchantDefinedInformation []*GetCustomerOKBodyMerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// metadata
	Metadata *GetCustomerOKBodyMetadata `json:"metadata,omitempty"`

	// object information
	ObjectInformation *GetCustomerOKBodyObjectInformation `json:"objectInformation,omitempty"`
}

// Validate validates this get customer o k body
func (o *GetCustomerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultPaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjectInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBody) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateDefaultPaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultPaymentInstrument) { // not required
		return nil
	}

	if o.DefaultPaymentInstrument != nil {
		if err := o.DefaultPaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "defaultPaymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateDefaultShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultShippingAddress) { // not required
		return nil
	}

	if o.DefaultShippingAddress != nil {
		if err := o.DefaultShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "defaultShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBody) validateMerchantDefinedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {
		if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if o.MerchantDefinedInformation[i] != nil {
			if err := o.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerOK" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerOK" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCustomerOKBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) validateObjectInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ObjectInformation) { // not required
		return nil
	}

	if o.ObjectInformation != nil {
		if err := o.ObjectInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "objectInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "objectInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body based on the context it is used
func (o *GetCustomerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDefaultPaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDefaultShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantDefinedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObjectInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBody) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateDefaultPaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.DefaultPaymentInstrument != nil {

		if swag.IsZero(o.DefaultPaymentInstrument) { // not required
			return nil
		}

		if err := o.DefaultPaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "defaultPaymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateDefaultShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.DefaultShippingAddress != nil {

		if swag.IsZero(o.DefaultShippingAddress) { // not required
			return nil
		}

		if err := o.DefaultShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "defaultShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateMerchantDefinedInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {

		if o.MerchantDefinedInformation[i] != nil {

			if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
				return nil
			}

			if err := o.MerchantDefinedInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerOK" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerOK" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBody) contextValidateObjectInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ObjectInformation != nil {

		if swag.IsZero(o.ObjectInformation) { // not required
			return nil
		}

		if err := o.ObjectInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "objectInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "objectInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBody) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyBuyerInformation get customer o k body buyer information
swagger:model GetCustomerOKBodyBuyerInformation
*/
type GetCustomerOKBodyBuyerInformation struct {

	// Customer's primary email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Your identifier for the customer.
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerID,omitempty"`
}

// Validate validates this get customer o k body buyer information
func (o *GetCustomerOKBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyBuyerInformation) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"buyerInformation"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyBuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"buyerInformation"+"."+"merchantCustomerID", "body", o.MerchantCustomerID, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body buyer information based on context it is used
func (o *GetCustomerOKBodyBuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyClientReferenceInformation get customer o k body client reference information
swagger:model GetCustomerOKBodyClientReferenceInformation
*/
type GetCustomerOKBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this get customer o k body client reference information
func (o *GetCustomerOKBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body client reference information based on context it is used
func (o *GetCustomerOKBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyDefaultPaymentInstrument get customer o k body default payment instrument
swagger:model GetCustomerOKBodyDefaultPaymentInstrument
*/
type GetCustomerOKBodyDefaultPaymentInstrument struct {

	// The Id of the Customers default Payment Instrument
	//
	ID string `json:"id,omitempty"`
}

// Validate validates this get customer o k body default payment instrument
func (o *GetCustomerOKBodyDefaultPaymentInstrument) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get customer o k body default payment instrument based on context it is used
func (o *GetCustomerOKBodyDefaultPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyDefaultPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyDefaultPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyDefaultPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyDefaultShippingAddress get customer o k body default shipping address
swagger:model GetCustomerOKBodyDefaultShippingAddress
*/
type GetCustomerOKBodyDefaultShippingAddress struct {

	// The Id of the Customers default Shipping Address
	//
	ID string `json:"id,omitempty"`
}

// Validate validates this get customer o k body default shipping address
func (o *GetCustomerOKBodyDefaultShippingAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get customer o k body default shipping address based on context it is used
func (o *GetCustomerOKBodyDefaultShippingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyDefaultShippingAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyDefaultShippingAddress) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyDefaultShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbedded Additional resources for the Customer.
//
swagger:model GetCustomerOKBodyEmbedded
*/
type GetCustomerOKBodyEmbedded struct {

	// default payment instrument
	DefaultPaymentInstrument *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument `json:"defaultPaymentInstrument,omitempty"`

	// default shipping address
	DefaultShippingAddress *GetCustomerOKBodyEmbeddedDefaultShippingAddress `json:"defaultShippingAddress,omitempty"`
}

// Validate validates this get customer o k body embedded
func (o *GetCustomerOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefaultPaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbedded) validateDefaultPaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultPaymentInstrument) { // not required
		return nil
	}

	if o.DefaultPaymentInstrument != nil {
		if err := o.DefaultPaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbedded) validateDefaultShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultShippingAddress) { // not required
		return nil
	}

	if o.DefaultShippingAddress != nil {
		if err := o.DefaultShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded based on the context it is used
func (o *GetCustomerOKBodyEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDefaultPaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDefaultShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbedded) contextValidateDefaultPaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.DefaultPaymentInstrument != nil {

		if swag.IsZero(o.DefaultPaymentInstrument) { // not required
			return nil
		}

		if err := o.DefaultPaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbedded) contextValidateDefaultShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.DefaultShippingAddress != nil {

		if swag.IsZero(o.DefaultShippingAddress) { // not required
			return nil
		}

		if err := o.DefaultShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrument get customer o k body embedded default payment instrument
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrument
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrument struct {

	// embedded
	Embedded *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard `json:"card,omitempty"`

	// Flag that indicates whether customer payment instrument is the dafault.
	// Possible Values:
	//  - `true`: Payment instrument is customer's default.
	//  - `false`: Payment instrument is not customer's default.
	//
	Default bool `json:"default,omitempty"`

	// The Id of the Payment Instrument Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation `json:"merchantInformation,omitempty"`

	// metadata
	Metadata *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata `json:"metadata,omitempty"`

	// The type.
	//
	// Possible Values:
	// - paymentInstrument
	//
	// Example: paymentInstrument
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Possible Values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// The type of Payment Instrument.
	// Possible Values:
	// - cardHash
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateBankAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBankAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateBankAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.BankAccount != nil {

		if swag.IsZero(o.BankAccount) { // not required
			return nil
		}

		if err := o.BankAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"object", "body", string(o.Object)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount get customer o k body embedded default payment instrument bank account
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount struct {

	// Account type.
	//
	// Possible Values:
	//  - checking : C
	//  - general ledger : G This value is supported only on Wells Fargo ACH
	//  - savings : S (U.S. dollars only)
	//  - corporate checking : X (U.S. dollars only)
	//
	// Max Length: 18
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument bank account
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"bankAccount"+"."+"type", "body", o.Type, 18); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument bank account based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo get customer o k body embedded default payment instrument bill to
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer's company.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's phone number.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument bill to
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateCompany(formats strfmt.Registry) error {
	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"company", "body", o.Company, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument bill to based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation get customer o k body embedded default payment instrument buyer information
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation struct {

	// Company's tax identifier. This is only used for eCheck service.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer. Format: YYYY-MM-DD
	//
	// Example: 1960-12-30
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// personal identification
	PersonalIdentification []*GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this get customer o k body embedded default payment instrument buyer information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {
	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"companyTaxID", "body", o.CompanyTaxID, 9); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"dateOfBirth", "body", "date", o.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument buyer information based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PersonalIdentification); i++ {

		if o.PersonalIdentification[i] != nil {

			if swag.IsZero(o.PersonalIdentification[i]) { // not required
				return nil
			}

			if err := o.PersonalIdentification[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 get customer o k body embedded default payment instrument buyer information personal identification items0
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Possible Values:
	//   - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument buyer information personal identification items0
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {
	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument buyer information personal identification items0 based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIssuedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) contextValidateIssuedBy(ctx context.Context, formats strfmt.Registry) error {

	if o.IssuedBy != nil {

		if swag.IsZero(o.IssuedBy) { // not required
			return nil
		}

		if err := o.IssuedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy get customer o k body embedded default payment instrument buyer information personal identification items0 issued by
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// The State or province where the customer's driver's license was issued.
	//
	// Use the two-character State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument buyer information personal identification items0 issued by
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("issuedBy"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument buyer information personal identification items0 issued by based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard get customer o k body embedded default payment instrument card
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Hash value representing the card.
	//
	// Read Only: true
	// Max Length: 34
	// Min Length: 32
	Hash string `json:"hash,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`.
	// Possible Values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// tokenized information
	TokenizedInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation `json:"tokenizedInformation,omitempty"`

	// Value that indicates the card type. Possible Values v2 : v1:
	//   * 001 : visa
	//   * 002 : mastercard - Eurocard—European regional brand of Mastercard
	//   * 003 : american express
	//   * 004 : discover
	//   * 005 : diners club
	//   * 006 : carte blanche
	//   * 007 : jcb
	//   * 008 : optima
	//   * 011 : twinpay credit
	//   * 012 : twinpay debit
	//   * 013 : walmart
	//   * 014 : enRoute
	//   * 015 : lowes consumer
	//   * 016 : home depot consumer
	//   * 017 : mbna
	//   * 018 : dicks sportswear
	//   * 019 : casual corner
	//   * 020 : sears
	//   * 021 : jal
	//   * 023 : disney
	//   * 024 : maestro uk domestic
	//   * 025 : sams club consumer
	//   * 026 : sams club business
	//   * 028 : bill me later
	//   * 029 : bebe
	//   * 030 : restoration hardware
	//   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * 032 : solo
	//   * 033 : visa electron
	//   * 034 : dankort
	//   * 035 : laser
	//   * 036 : carte bleue — formerly Cartes Bancaires
	//   * 037 : carta si
	//   * 038 : pinless debit
	//   * 039 : encoded account
	//   * 040 : uatp
	//   * 041 : household
	//   * 042 : maestro international
	//   * 043 : ge money uk
	//   * 044 : korean cards
	//   * 045 : style
	//   * 046 : jcrew
	//   * 047 : payease china processing ewallet
	//   * 048 : payease china processing bank transfer
	//   * 049 : meijer private label
	//   * 050 : hipercard — supported only by the Comercio Latino processor.
	//   * 051 : aura — supported only by the Comercio Latino processor.
	//   * 052 : redecard
	//   * 054 : elo — supported only by the Comercio Latino processor.
	//   * 055 : capital one private label
	//   * 056 : synchrony private label
	//   * 057 : costco private label
	//   * 060 : mada
	//   * 062 : china union pay
	//   * 063 : falabella private label
	//
	Type string `json:"type,omitempty"`

	// 'Payment Instrument was created / updated as part of a pinless debit transaction.'
	//
	// Example: pinless debit
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument card
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(o.Hash) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"hash", "body", o.Hash, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"hash", "body", o.Hash, 34); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateIssueNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"issueNumber", "body", o.IssueNumber, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateStartMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"startMonth", "body", o.StartMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateStartYear(formats strfmt.Registry) error {
	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"startYear", "body", o.StartYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) validateTokenizedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedInformation) { // not required
		return nil
	}

	if o.TokenizedInformation != nil {
		if err := o.TokenizedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card" + "." + "tokenizedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument card based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"hash", "body", string(o.Hash)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) contextValidateTokenizedInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedInformation != nil {

		if swag.IsZero(o.TokenizedInformation) { // not required
			return nil
		}

		if err := o.TokenizedInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card" + "." + "tokenizedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation get customer o k body embedded default payment instrument card tokenized information
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation struct {

	// Value that identifies your business and indicates that the cardholder's account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider's database.
	//
	// **Note** This field is supported only through **VisaNet** and **FDC Nashville Global**.
	//
	// Max Length: 11
	RequestorID string `json:"requestorID,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it
	// specifies the entity that provided you with information about the token.
	//
	// Set the value for this field to 1. An application on the customer's mobile device provided the token data.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument card tokenized information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) validateRequestorID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"tokenizedInformation"+"."+"requestorID", "body", o.RequestorID, 11); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"tokenizedInformation"+"."+"transactionType", "body", o.TransactionType, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument card tokenized information based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentCardTokenizedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded Additional resources for the Payment Instrument.
//
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded struct {

	// instrument identifier
	InstrumentIdentifier *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier tmsEmbeddedInstrumentIdentifier
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier struct {

	// links
	Links *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo `json:"billTo,omitempty"`

	// card
	Card *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard `json:"card,omitempty"`

	// The Id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// The type.
	//
	// Possible Values:
	// - instrumentIdentifier
	//
	// Example: instrumentIdentifier
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Possible Values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// token provisioning information
	TokenProvisioningInformation *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation `json:"tokenProvisioningInformation,omitempty"`

	// tokenized card
	TokenizedCard *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Possible Values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenProvisioningInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if o.Issuer != nil {
		if err := o.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateTokenProvisioningInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenProvisioningInformation) { // not required
		return nil
	}

	if o.TokenProvisioningInformation != nil {
		if err := o.TokenProvisioningInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateTokenizedCard(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBankAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenProvisioningInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateBankAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.BankAccount != nil {

		if swag.IsZero(o.BankAccount) { // not required
			return nil
		}

		if err := o.BankAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if o.Issuer != nil {

		if swag.IsZero(o.Issuer) { // not required
			return nil
		}

		if err := o.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"object", "body", string(o.Object)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateTokenProvisioningInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenProvisioningInformation != nil {

		if swag.IsZero(o.TokenProvisioningInformation) { // not required
			return nil
		}

		if err := o.TokenProvisioningInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenProvisioningInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) contextValidateTokenizedCard(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedCard != nil {

		if swag.IsZero(o.TokenizedCard) { // not required
			return nil
		}

		if err := o.TokenizedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount get customer o k body embedded default payment instrument embedded instrument identifier bank account
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier bank account
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", o.Number, 17); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument embedded instrument identifier bank account based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
//
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier bill to
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument embedded instrument identifier bill to based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
//
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Code.
	// This value is sent to the issuer to support the approval of a network token provision.
	// It is not persisted against the Instrument Identifier.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier card
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", o.Number, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", o.Number, 19); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"securityCode", "body", o.SecurityCode, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument embedded instrument identifier card based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer get customer o k body embedded default payment instrument embedded instrument identifier issuer
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier issuer
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", o.PaymentAccountReference, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier issuer based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentAccountReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) contextValidatePaymentAccountReference(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", string(o.PaymentAccountReference)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks get customer o k body embedded default payment instrument embedded instrument identifier links
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks struct {

	// payment instruments
	PaymentInstruments *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf `json:"self,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier links
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier links based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstruments != nil {

		if swag.IsZero(o.PaymentInstruments) { // not required
			return nil
		}

		if err := o.PaymentInstruments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments get customer o k body embedded default payment instrument embedded instrument identifier links payment instruments
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Example: tms/v1/instrumentidentifiers/7010000000016241111/paymentinstruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier links payment instruments
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier links payment instruments based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"_links"+"."+"paymentInstruments"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf get customer o k body embedded default payment instrument embedded instrument identifier links self
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Example: tms/v1/instrumentidentifiers/7010000000016241111
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier links self
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier links self based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata get customer o k body embedded default payment instrument embedded instrument identifier metadata
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata struct {

	// The creator of the Instrument Identifier.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier metadata
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier metadata based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation get customer o k body embedded default payment instrument embedded instrument identifier processing information
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier processing information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier processing information based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) contextValidateAuthorizationOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.AuthorizationOptions != nil {

		if swag.IsZero(o.AuthorizationOptions) { // not required
			return nil
		}

		if err := o.AuthorizationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions tmsAuthorizationOptions
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantInitiatedTransaction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) contextValidateMerchantInitiatedTransaction(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInitiatedTransaction != nil {

		if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
			return nil
		}

		if err := o.MerchantInitiatedTransaction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Amount of the original authorization.
	//
	// Max Length: 15
	OriginalAuthorizedAmount string `json:"originalAuthorizedAmount,omitempty"`

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOriginalAuthorizedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validateOriginalAuthorizedAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginalAuthorizedAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"originalAuthorizedAmount", "body", o.OriginalAuthorizedAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", o.PreviousTransactionID, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument embedded instrument identifier processing information authorization options initiator merchant initiated transaction based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation get customer o k body embedded default payment instrument embedded instrument identifier token provisioning information
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation struct {

	// Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India.
	// Possible Values:
	// - `true`: Consumer has consented to tokenization of their credentials.
	// - `false`: Consumer has not consented to tokenization of their credentials.
	//
	ConsumerConsentObtained bool `json:"consumerConsentObtained,omitempty"`

	// Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India.
	// Possible Values:
	// - `true`: Consumer has been authenticated by the issuer.
	// - `false`: Consumer has not been authenticated by the issuer.
	//
	MultiFactorAuthenticated bool `json:"multiFactorAuthenticated,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier token provisioning information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument embedded instrument identifier token provisioning information based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenProvisioningInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard get customer o k body embedded default payment instrument embedded instrument identifier tokenized card
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard struct {

	// card
	Card *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Example: CgAFRFYFPTFOfg5rj2ais9wQAAAAAM=
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Unique Identifier for the enrolled PAN. This Id is provided by the card association when a network token is provisioned successfully.
	//
	// Read Only: true
	EnrollmentID string `json:"enrollmentId,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Possible Values:
	// - INVALID_REQUEST : The network token provision request contained invalid data.
	// - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified.
	// - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization.
	// - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization.
	// - DECLINED : Card can currently not be used with issuer for tokenization.
	// - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out.
	// - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration.
	//
	// Example: ACTIVE
	// Read Only: true
	Reason string `json:"reason,omitempty"`

	// State of the network token or network token provision
	// Possible Values:
	// - ACTIVE : Network token is active.
	// - SUSPENDED : Network token is suspended. This state can change back to ACTIVE.
	// - DELETED : This is a final state for a network token instance.
	// - UNPROVISIONED : A previous network token provision was unsuccessful.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// Unique Identifier for the network token. This Id is provided by the card association when a network token is provisioned successfully.
	//
	// Read Only: true
	TokenReferenceID string `json:"tokenReferenceId,omitempty"`

	// The network token card association brand
	// Possible Values:
	// - visa
	// - mastercard
	// - americanexpress
	//
	// Example: visa
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier tokenized card
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier tokenized card based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCryptogram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEnrollmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateCryptogram(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"cryptogram", "body", string(o.Cryptogram)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateEnrollmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"enrollmentId", "body", string(o.EnrollmentID)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"number", "body", string(o.Number)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"reason", "body", string(o.Reason)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateTokenReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"tokenReferenceId", "body", string(o.TokenReferenceID)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard The latest card details associated with the network token
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard struct {

	//
	// Two-digit month in which the customer's latest payment card expires.
	//
	// Format: `MM`.
	//
	// Possible Values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer's latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's latest payment card number suffix
	//
	// Example: 1111
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument embedded instrument identifier tokenized card card
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument embedded instrument identifier tokenized card card based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) contextValidateSuffix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"suffix", "body", string(o.Suffix)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier get customer o k body embedded default payment instrument instrument identifier
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier struct {

	// The Id of the Instrument Identifier linked to the Payment Instrument.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument instrument identifier
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument instrument identifier based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks get customer o k body embedded default payment instrument links
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks struct {

	// customer
	Customer *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer `json:"customer,omitempty"`

	// self
	Self *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf `json:"self,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument links
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument links based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer get customer o k body embedded default payment instrument links customer
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer struct {

	// Link to the Customer.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument links customer
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument links customer based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_links"+"."+"customer"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf get customer o k body embedded default payment instrument links self
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf struct {

	// Link to the Payment Instrument.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument links self
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument links self based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation get customer o k body embedded default payment instrument merchant information
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument merchant information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument merchant information based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor get customer o k body embedded default payment instrument merchant information merchant descriptor
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor struct {

	// Alternate contact information for your business,such as an email address or URL.
	// This value might be displayed on the cardholder's statement.
	// When you do not include this value in your capture or credit request, the merchant URL from your CyberSource account is used.
	// Important This value must consist of English characters
	//
	// Max Length: 13
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument merchant information merchant descriptor
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) validateAlternateName(formats strfmt.Registry) error {
	if swag.IsZero(o.AlternateName) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"alternateName", "body", o.AlternateName, 13); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument merchant information merchant descriptor based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata get customer o k body embedded default payment instrument metadata
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata struct {

	// The creator of the Payment Instrument.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument metadata
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument metadata based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation tmsPaymentInstrumentProcessingInfo
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Flag that indicates that this is a payment for a bill or for an existing contractual loan.
	// For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Possible Values:
	// - `true`: Bill payment or loan payment.
	// - `false` (default): Not a bill payment or loan payment.
	//
	BillPaymentProgramEnabled bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument processing information
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation" + "." + "bankTransferOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default payment instrument processing information based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBankTransferOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) contextValidateBankTransferOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.BankTransferOptions != nil {

		if swag.IsZero(o.BankTransferOptions) { // not required
			return nil
		}

		if err := o.BankTransferOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation" + "." + "bankTransferOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions get customer o k body embedded default payment instrument processing information bank transfer options
swagger:model GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions
*/
type GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// #### TeleCheck
	// Possible Values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 3
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this get customer o k body embedded default payment instrument processing information bank transfer options
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSECCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) validateSECCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SECCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultPaymentInstrument"+"."+"processingInformation"+"."+"bankTransferOptions"+"."+"SECCode", "body", o.SECCode, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default payment instrument processing information bank transfer options based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddress get customer o k body embedded default shipping address
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddress
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddress struct {

	// links
	Links *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks `json:"_links,omitempty"`

	// Flag that indicates whether customer shipping address is the dafault.
	// Possible Values:
	//  - `true`: Shipping Address is customer's default.
	//  - `false`: Shipping Address is not customer's default.
	//
	Default bool `json:"default,omitempty"`

	// The Id of the Shipping Address Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata `json:"metadata,omitempty"`

	// ship to
	ShipTo *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo `json:"shipTo,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default shipping address based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddress) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks get customer o k body embedded default shipping address links
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks struct {

	// customer
	Customer *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer `json:"customer,omitempty"`

	// self
	Self *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf `json:"self,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address links
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body embedded default shipping address links based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddressLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer get customer o k body embedded default shipping address links customer
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer struct {

	// Link to the Customer
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address links customer
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default shipping address links customer based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"_links"+"."+"customer"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf get customer o k body embedded default shipping address links self
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf struct {

	// Link to the Customers Shipping Address
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/shipping-addresses/D9F3439F0448C901E053A2598D0AA1CC
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address links self
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default shipping address links self based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddressLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata get customer o k body embedded default shipping address metadata
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata struct {

	// The creator of the Shipping Address.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address metadata
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body embedded default shipping address metadata based on the context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddressMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo get customer o k body embedded default shipping address ship to
swagger:model GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo
*/
type GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo struct {

	// First line of the shipping address.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the shipping address. Use 2 character the State,
	// Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Company associated with the shipping address.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the shipping address. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Email associated with the shipping address.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// First name of the recipient.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Phone number associated with the shipping address.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// **American Express Direct**\
	// Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the
	// remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get customer o k body embedded default shipping address ship to
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateCompany(formats strfmt.Registry) error {
	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"company", "body", o.Company, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"email", "body", o.Email, 320); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body embedded default shipping address ship to based on context it is used
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyEmbeddedDefaultShippingAddressShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyLinks get customer o k body links
swagger:model GetCustomerOKBodyLinks
*/
type GetCustomerOKBodyLinks struct {

	// payment instruments
	PaymentInstruments *GetCustomerOKBodyLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *GetCustomerOKBodyLinksSelf `json:"self,omitempty"`

	// shipping address
	ShippingAddress *GetCustomerOKBodyLinksShippingAddress `json:"shippingAddress,omitempty"`
}

// Validate validates this get customer o k body links
func (o *GetCustomerOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyLinks) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyLinks) validateShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingAddress) { // not required
		return nil
	}

	if o.ShippingAddress != nil {
		if err := o.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get customer o k body links based on the context it is used
func (o *GetCustomerOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyLinks) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstruments != nil {

		if swag.IsZero(o.PaymentInstruments) { // not required
			return nil
		}

		if err := o.PaymentInstruments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetCustomerOKBodyLinks) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.ShippingAddress != nil {

		if swag.IsZero(o.ShippingAddress) { // not required
			return nil
		}

		if err := o.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCustomerOK" + "." + "_links" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCustomerOK" + "." + "_links" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyLinksPaymentInstruments get customer o k body links payment instruments
swagger:model GetCustomerOKBodyLinksPaymentInstruments
*/
type GetCustomerOKBodyLinksPaymentInstruments struct {

	// Link to the Customers Payment Instruments.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/payment-instruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body links payment instruments
func (o *GetCustomerOKBodyLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body links payment instruments based on the context it is used
func (o *GetCustomerOKBodyLinksPaymentInstruments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyLinksPaymentInstruments) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_links"+"."+"paymentInstruments"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyLinksSelf get customer o k body links self
swagger:model GetCustomerOKBodyLinksSelf
*/
type GetCustomerOKBodyLinksSelf struct {

	// Link to the Customer.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body links self
func (o *GetCustomerOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body links self based on the context it is used
func (o *GetCustomerOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyLinksShippingAddress get customer o k body links shipping address
swagger:model GetCustomerOKBodyLinksShippingAddress
*/
type GetCustomerOKBodyLinksShippingAddress struct {

	// Link to the Customers Shipping Addresses.
	//
	// Example: /tms/v2/customers/D9F340DD3DB9C276E053A2598D0A41A3/shipping-addresses
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get customer o k body links shipping address
func (o *GetCustomerOKBodyLinksShippingAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body links shipping address based on the context it is used
func (o *GetCustomerOKBodyLinksShippingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyLinksShippingAddress) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"_links"+"."+"shippingAddress"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksShippingAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyLinksShippingAddress) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyLinksShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyMerchantDefinedInformationItems0 get customer o k body merchant defined information items0
swagger:model GetCustomerOKBodyMerchantDefinedInformationItems0
*/
type GetCustomerOKBodyMerchantDefinedInformationItems0 struct {

	// The number you assign as the name for your merchant-defined data or secure field. Possible Values are data1 to data4 and sensitive1 to sensitive4
	//
	// For example, to set the name for merchant-defined data 2 field, you would reference merchantDefinedInformation[x].name as data2
	// Possible Values:
	// - data1
	// - data2
	// - data3
	// - data4
	// - sensitive1
	// - sensitive2
	// - sensitive3
	// - sensitive4
	//
	Name string `json:"name,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not
	// limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV,
	// CVC2, CVV2, CID, CVN). In the event it is discovered a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, the merchant's account will immediately be suspended, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// Max Length: 100
	Value string `json:"value,omitempty"`
}

// Validate validates this get customer o k body merchant defined information items0
func (o *GetCustomerOKBodyMerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyMerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", o.Value, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body merchant defined information items0 based on context it is used
func (o *GetCustomerOKBodyMerchantDefinedInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyMerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyMerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyMerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyMetadata get customer o k body metadata
swagger:model GetCustomerOKBodyMetadata
*/
type GetCustomerOKBodyMetadata struct {

	// The creator of the Customer.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get customer o k body metadata
func (o *GetCustomerOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this get customer o k body metadata based on the context it is used
func (o *GetCustomerOKBodyMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "getCustomerOK"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetCustomerOKBodyObjectInformation get customer o k body object information
swagger:model GetCustomerOKBodyObjectInformation
*/
type GetCustomerOKBodyObjectInformation struct {

	// Comments that you can make about the customer.
	//
	// Max Length: 150
	Comment string `json:"comment,omitempty"`

	// Name or title of the customer.
	//
	// Max Length: 60
	Title string `json:"title,omitempty"`
}

// Validate validates this get customer o k body object information
func (o *GetCustomerOKBodyObjectInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCustomerOKBodyObjectInformation) validateComment(formats strfmt.Registry) error {
	if swag.IsZero(o.Comment) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"objectInformation"+"."+"comment", "body", o.Comment, 150); err != nil {
		return err
	}

	return nil
}

func (o *GetCustomerOKBodyObjectInformation) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("getCustomerOK"+"."+"objectInformation"+"."+"title", "body", o.Title, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get customer o k body object information based on context it is used
func (o *GetCustomerOKBodyObjectInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCustomerOKBodyObjectInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCustomerOKBodyObjectInformation) UnmarshalBinary(b []byte) error {
	var res GetCustomerOKBodyObjectInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
