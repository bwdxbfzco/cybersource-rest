// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteCustomerReader is a Reader for the DeleteCustomer structure.
type DeleteCustomerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCustomerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteCustomerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCustomerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCustomerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCustomerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteCustomerGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewDeleteCustomerFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCustomerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tms/v2/customers/{customerId}] deleteCustomer", response, response.Code())
	}
}

// NewDeleteCustomerNoContent creates a DeleteCustomerNoContent with default headers values
func NewDeleteCustomerNoContent() *DeleteCustomerNoContent {
	return &DeleteCustomerNoContent{}
}

/*
DeleteCustomerNoContent describes a response with status code 204, with default header values.

The request is fulfilled but does not need to return a body
*/
type DeleteCustomerNoContent struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

// IsSuccess returns true when this delete customer no content response has a 2xx status code
func (o *DeleteCustomerNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete customer no content response has a 3xx status code
func (o *DeleteCustomerNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer no content response has a 4xx status code
func (o *DeleteCustomerNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete customer no content response has a 5xx status code
func (o *DeleteCustomerNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer no content response a status code equal to that given
func (o *DeleteCustomerNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete customer no content response
func (o *DeleteCustomerNoContent) Code() int {
	return 204
}

func (o *DeleteCustomerNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerNoContent", 204)
}

func (o *DeleteCustomerNoContent) String() string {
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerNoContent", 204)
}

func (o *DeleteCustomerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	return nil
}

// NewDeleteCustomerBadRequest creates a DeleteCustomerBadRequest with default headers values
func NewDeleteCustomerBadRequest() *DeleteCustomerBadRequest {
	return &DeleteCustomerBadRequest{}
}

/*
DeleteCustomerBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type DeleteCustomerBadRequest struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerBadRequestBody
}

// IsSuccess returns true when this delete customer bad request response has a 2xx status code
func (o *DeleteCustomerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer bad request response has a 3xx status code
func (o *DeleteCustomerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer bad request response has a 4xx status code
func (o *DeleteCustomerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer bad request response has a 5xx status code
func (o *DeleteCustomerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer bad request response a status code equal to that given
func (o *DeleteCustomerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete customer bad request response
func (o *DeleteCustomerBadRequest) Code() int {
	return 400
}

func (o *DeleteCustomerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerBadRequest %s", 400, payload)
}

func (o *DeleteCustomerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerBadRequest %s", 400, payload)
}

func (o *DeleteCustomerBadRequest) GetPayload() *DeleteCustomerBadRequestBody {
	return o.Payload
}

func (o *DeleteCustomerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerForbidden creates a DeleteCustomerForbidden with default headers values
func NewDeleteCustomerForbidden() *DeleteCustomerForbidden {
	return &DeleteCustomerForbidden{}
}

/*
DeleteCustomerForbidden describes a response with status code 403, with default header values.

Forbidden: e.g. The profile might not have permission to perform the operation.
*/
type DeleteCustomerForbidden struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerForbiddenBody
}

// IsSuccess returns true when this delete customer forbidden response has a 2xx status code
func (o *DeleteCustomerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer forbidden response has a 3xx status code
func (o *DeleteCustomerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer forbidden response has a 4xx status code
func (o *DeleteCustomerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer forbidden response has a 5xx status code
func (o *DeleteCustomerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer forbidden response a status code equal to that given
func (o *DeleteCustomerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete customer forbidden response
func (o *DeleteCustomerForbidden) Code() int {
	return 403
}

func (o *DeleteCustomerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerForbidden %s", 403, payload)
}

func (o *DeleteCustomerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerForbidden %s", 403, payload)
}

func (o *DeleteCustomerForbidden) GetPayload() *DeleteCustomerForbiddenBody {
	return o.Payload
}

func (o *DeleteCustomerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerNotFound creates a DeleteCustomerNotFound with default headers values
func NewDeleteCustomerNotFound() *DeleteCustomerNotFound {
	return &DeleteCustomerNotFound{}
}

/*
DeleteCustomerNotFound describes a response with status code 404, with default header values.

Token Not Found. The Id may not exist or was entered incorrectly.
*/
type DeleteCustomerNotFound struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerNotFoundBody
}

// IsSuccess returns true when this delete customer not found response has a 2xx status code
func (o *DeleteCustomerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer not found response has a 3xx status code
func (o *DeleteCustomerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer not found response has a 4xx status code
func (o *DeleteCustomerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer not found response has a 5xx status code
func (o *DeleteCustomerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer not found response a status code equal to that given
func (o *DeleteCustomerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete customer not found response
func (o *DeleteCustomerNotFound) Code() int {
	return 404
}

func (o *DeleteCustomerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerNotFound %s", 404, payload)
}

func (o *DeleteCustomerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerNotFound %s", 404, payload)
}

func (o *DeleteCustomerNotFound) GetPayload() *DeleteCustomerNotFoundBody {
	return o.Payload
}

func (o *DeleteCustomerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerGone creates a DeleteCustomerGone with default headers values
func NewDeleteCustomerGone() *DeleteCustomerGone {
	return &DeleteCustomerGone{}
}

/*
DeleteCustomerGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type DeleteCustomerGone struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerGoneBody
}

// IsSuccess returns true when this delete customer gone response has a 2xx status code
func (o *DeleteCustomerGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer gone response has a 3xx status code
func (o *DeleteCustomerGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer gone response has a 4xx status code
func (o *DeleteCustomerGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer gone response has a 5xx status code
func (o *DeleteCustomerGone) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer gone response a status code equal to that given
func (o *DeleteCustomerGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the delete customer gone response
func (o *DeleteCustomerGone) Code() int {
	return 410
}

func (o *DeleteCustomerGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerGone %s", 410, payload)
}

func (o *DeleteCustomerGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerGone %s", 410, payload)
}

func (o *DeleteCustomerGone) GetPayload() *DeleteCustomerGoneBody {
	return o.Payload
}

func (o *DeleteCustomerGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerFailedDependency creates a DeleteCustomerFailedDependency with default headers values
func NewDeleteCustomerFailedDependency() *DeleteCustomerFailedDependency {
	return &DeleteCustomerFailedDependency{}
}

/*
DeleteCustomerFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type DeleteCustomerFailedDependency struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerFailedDependencyBody
}

// IsSuccess returns true when this delete customer failed dependency response has a 2xx status code
func (o *DeleteCustomerFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer failed dependency response has a 3xx status code
func (o *DeleteCustomerFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer failed dependency response has a 4xx status code
func (o *DeleteCustomerFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete customer failed dependency response has a 5xx status code
func (o *DeleteCustomerFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this delete customer failed dependency response a status code equal to that given
func (o *DeleteCustomerFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the delete customer failed dependency response
func (o *DeleteCustomerFailedDependency) Code() int {
	return 424
}

func (o *DeleteCustomerFailedDependency) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerFailedDependency %s", 424, payload)
}

func (o *DeleteCustomerFailedDependency) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerFailedDependency %s", 424, payload)
}

func (o *DeleteCustomerFailedDependency) GetPayload() *DeleteCustomerFailedDependencyBody {
	return o.Payload
}

func (o *DeleteCustomerFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCustomerInternalServerError creates a DeleteCustomerInternalServerError with default headers values
func NewDeleteCustomerInternalServerError() *DeleteCustomerInternalServerError {
	return &DeleteCustomerInternalServerError{}
}

/*
DeleteCustomerInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type DeleteCustomerInternalServerError struct {

	/* A globally unique Id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation Id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteCustomerInternalServerErrorBody
}

// IsSuccess returns true when this delete customer internal server error response has a 2xx status code
func (o *DeleteCustomerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete customer internal server error response has a 3xx status code
func (o *DeleteCustomerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete customer internal server error response has a 4xx status code
func (o *DeleteCustomerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete customer internal server error response has a 5xx status code
func (o *DeleteCustomerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete customer internal server error response a status code equal to that given
func (o *DeleteCustomerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete customer internal server error response
func (o *DeleteCustomerInternalServerError) Code() int {
	return 500
}

func (o *DeleteCustomerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerInternalServerError %s", 500, payload)
}

func (o *DeleteCustomerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /tms/v2/customers/{customerId}][%d] deleteCustomerInternalServerError %s", 500, payload)
}

func (o *DeleteCustomerInternalServerError) GetPayload() *DeleteCustomerInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteCustomerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(DeleteCustomerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteCustomerBadRequestBody delete customer bad request body
swagger:model DeleteCustomerBadRequestBody
*/
type DeleteCustomerBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer bad request body
func (o *DeleteCustomerBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer bad request body based on the context it is used
func (o *DeleteCustomerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerBadRequest"+"."+"errors", "body", []*DeleteCustomerBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerBadRequestBodyErrorsItems0 delete customer bad request body errors items0
swagger:model DeleteCustomerBadRequestBodyErrorsItems0
*/
type DeleteCustomerBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - invalidHeaders
	//   - missingHeaders
	//   - invalidFields
	//   - missingFields
	//   - unsupportedPaymentMethodModification
	//   - invalidCombination
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer bad request body errors items0
func (o *DeleteCustomerBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer bad request body errors items0 based on the context it is used
func (o *DeleteCustomerBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0 delete customer bad request body errors items0 details items0
swagger:model DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0
*/
type DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete customer bad request body errors items0 details items0
func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer bad request body errors items0 details items0 based on the context it is used
func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerFailedDependencyBody delete customer failed dependency body
swagger:model DeleteCustomerFailedDependencyBody
*/
type DeleteCustomerFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer failed dependency body
func (o *DeleteCustomerFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer failed dependency body based on the context it is used
func (o *DeleteCustomerFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerFailedDependency"+"."+"errors", "body", []*DeleteCustomerFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerFailedDependencyBodyErrorsItems0 delete customer failed dependency body errors items0
swagger:model DeleteCustomerFailedDependencyBodyErrorsItems0
*/
type DeleteCustomerFailedDependencyBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer failed dependency body errors items0
func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer failed dependency body errors items0 based on the context it is used
func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerForbiddenBody delete customer forbidden body
swagger:model DeleteCustomerForbiddenBody
*/
type DeleteCustomerForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer forbidden body
func (o *DeleteCustomerForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer forbidden body based on the context it is used
func (o *DeleteCustomerForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerForbidden"+"."+"errors", "body", []*DeleteCustomerForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerForbiddenBodyErrorsItems0 delete customer forbidden body errors items0
swagger:model DeleteCustomerForbiddenBodyErrorsItems0
*/
type DeleteCustomerForbiddenBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - forbidden
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer forbidden body errors items0
func (o *DeleteCustomerForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer forbidden body errors items0 based on the context it is used
func (o *DeleteCustomerForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerGoneBody delete customer gone body
swagger:model DeleteCustomerGoneBody
*/
type DeleteCustomerGoneBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer gone body
func (o *DeleteCustomerGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer gone body based on the context it is used
func (o *DeleteCustomerGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerGone"+"."+"errors", "body", []*DeleteCustomerGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerGoneBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerGoneBodyErrorsItems0 delete customer gone body errors items0
swagger:model DeleteCustomerGoneBodyErrorsItems0
*/
type DeleteCustomerGoneBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notAvailable
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer gone body errors items0
func (o *DeleteCustomerGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer gone body errors items0 based on the context it is used
func (o *DeleteCustomerGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerInternalServerErrorBody delete customer internal server error body
swagger:model DeleteCustomerInternalServerErrorBody
*/
type DeleteCustomerInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer internal server error body
func (o *DeleteCustomerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer internal server error body based on the context it is used
func (o *DeleteCustomerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerInternalServerError"+"."+"errors", "body", []*DeleteCustomerInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerInternalServerErrorBodyErrorsItems0 delete customer internal server error body errors items0
swagger:model DeleteCustomerInternalServerErrorBodyErrorsItems0
*/
type DeleteCustomerInternalServerErrorBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - internalError
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer internal server error body errors items0
func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer internal server error body errors items0 based on the context it is used
func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerNotFoundBody delete customer not found body
swagger:model DeleteCustomerNotFoundBody
*/
type DeleteCustomerNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteCustomerNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete customer not found body
func (o *DeleteCustomerNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete customer not found body based on the context it is used
func (o *DeleteCustomerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleteCustomerNotFound"+"."+"errors", "body", []*DeleteCustomerNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {

			if swag.IsZero(o.Errors[i]) { // not required
				return nil
			}

			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteCustomerNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteCustomerNotFoundBodyErrorsItems0 delete customer not found body errors items0
swagger:model DeleteCustomerNotFoundBodyErrorsItems0
*/
type DeleteCustomerNotFoundBodyErrorsItems0 struct {

	// The detailed message related to the type.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	//
	// Possible Values:
	//   - notFound
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete customer not found body errors items0
func (o *DeleteCustomerNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delete customer not found body errors items0 based on the context it is used
func (o *DeleteCustomerNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCustomerNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCustomerNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCustomerNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCustomerNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteCustomerNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
