// Code generated by go-swagger; DO NOT EDIT.

package secure_file_share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFileDetailParams creates a new GetFileDetailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileDetailParams() *GetFileDetailParams {
	return &GetFileDetailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileDetailParamsWithTimeout creates a new GetFileDetailParams object
// with the ability to set a timeout on a request.
func NewGetFileDetailParamsWithTimeout(timeout time.Duration) *GetFileDetailParams {
	return &GetFileDetailParams{
		timeout: timeout,
	}
}

// NewGetFileDetailParamsWithContext creates a new GetFileDetailParams object
// with the ability to set a context for a request.
func NewGetFileDetailParamsWithContext(ctx context.Context) *GetFileDetailParams {
	return &GetFileDetailParams{
		Context: ctx,
	}
}

// NewGetFileDetailParamsWithHTTPClient creates a new GetFileDetailParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileDetailParamsWithHTTPClient(client *http.Client) *GetFileDetailParams {
	return &GetFileDetailParams{
		HTTPClient: client,
	}
}

/*
GetFileDetailParams contains all the parameters to send to the API endpoint

	for the get file detail operation.

	Typically these are written to a http.Request.
*/
type GetFileDetailParams struct {

	/* EndDate.

	     Valid end date in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	 **Example date format:**
	  - yyyy-MM-dd


	     Format: date
	*/
	EndDate strfmt.Date

	/* Name.

	     **Tailored to searches for specific files with in given Date range**
	example : MyTransactionDetailreport.xml

	*/
	Name *string

	/* OrganizationID.

	   Valid Cybersource Organization Id
	*/
	OrganizationID *string

	/* StartDate.

	     Valid start date in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	 **Example date format:**
	  - yyyy-MM-dd


	     Format: date
	*/
	StartDate strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileDetailParams) WithDefaults() *GetFileDetailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileDetailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file detail params
func (o *GetFileDetailParams) WithTimeout(timeout time.Duration) *GetFileDetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file detail params
func (o *GetFileDetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file detail params
func (o *GetFileDetailParams) WithContext(ctx context.Context) *GetFileDetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file detail params
func (o *GetFileDetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file detail params
func (o *GetFileDetailParams) WithHTTPClient(client *http.Client) *GetFileDetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file detail params
func (o *GetFileDetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get file detail params
func (o *GetFileDetailParams) WithEndDate(endDate strfmt.Date) *GetFileDetailParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get file detail params
func (o *GetFileDetailParams) SetEndDate(endDate strfmt.Date) {
	o.EndDate = endDate
}

// WithName adds the name to the get file detail params
func (o *GetFileDetailParams) WithName(name *string) *GetFileDetailParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get file detail params
func (o *GetFileDetailParams) SetName(name *string) {
	o.Name = name
}

// WithOrganizationID adds the organizationID to the get file detail params
func (o *GetFileDetailParams) WithOrganizationID(organizationID *string) *GetFileDetailParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get file detail params
func (o *GetFileDetailParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithStartDate adds the startDate to the get file detail params
func (o *GetFileDetailParams) WithStartDate(startDate strfmt.Date) *GetFileDetailParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get file detail params
func (o *GetFileDetailParams) SetStartDate(startDate strfmt.Date) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileDetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endDate
	qrEndDate := o.EndDate
	qEndDate := qrEndDate.String()
	if qEndDate != "" {

		if err := r.SetQueryParam("endDate", qEndDate); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	// query param startDate
	qrStartDate := o.StartDate
	qStartDate := qrStartDate.String()
	if qStartDate != "" {

		if err := r.SetQueryParam("startDate", qStartDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
