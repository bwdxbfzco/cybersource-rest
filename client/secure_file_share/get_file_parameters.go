// Code generated by go-swagger; DO NOT EDIT.

package secure_file_share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFileParams creates a new GetFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFileParams() *GetFileParams {
	return &GetFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileParamsWithTimeout creates a new GetFileParams object
// with the ability to set a timeout on a request.
func NewGetFileParamsWithTimeout(timeout time.Duration) *GetFileParams {
	return &GetFileParams{
		timeout: timeout,
	}
}

// NewGetFileParamsWithContext creates a new GetFileParams object
// with the ability to set a context for a request.
func NewGetFileParamsWithContext(ctx context.Context) *GetFileParams {
	return &GetFileParams{
		Context: ctx,
	}
}

// NewGetFileParamsWithHTTPClient creates a new GetFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFileParamsWithHTTPClient(client *http.Client) *GetFileParams {
	return &GetFileParams{
		HTTPClient: client,
	}
}

/*
GetFileParams contains all the parameters to send to the API endpoint

	for the get file operation.

	Typically these are written to a http.Request.
*/
type GetFileParams struct {

	/* FileID.

	   Unique identifier for each file
	*/
	FileID string

	/* OrganizationID.

	   Valid Cybersource Organization Id
	*/
	OrganizationID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileParams) WithDefaults() *GetFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get file params
func (o *GetFileParams) WithTimeout(timeout time.Duration) *GetFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file params
func (o *GetFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file params
func (o *GetFileParams) WithContext(ctx context.Context) *GetFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file params
func (o *GetFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file params
func (o *GetFileParams) WithHTTPClient(client *http.Client) *GetFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file params
func (o *GetFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileID adds the fileID to the get file params
func (o *GetFileParams) WithFileID(fileID string) *GetFileParams {
	o.SetFileID(fileID)
	return o
}

// SetFileID adds the fileId to the get file params
func (o *GetFileParams) SetFileID(fileID string) {
	o.FileID = fileID
}

// WithOrganizationID adds the organizationID to the get file params
func (o *GetFileParams) WithOrganizationID(organizationID *string) *GetFileParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get file params
func (o *GetFileParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param fileId
	if err := r.SetPathParam("fileId", o.FileID); err != nil {
		return err
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
