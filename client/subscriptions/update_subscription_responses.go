// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSubscriptionReader is a Reader for the UpdateSubscription structure.
type UpdateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewUpdateSubscriptionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /rbs/v1/subscriptions/{id}] updateSubscription", response, response.Code())
	}
}

// NewUpdateSubscriptionOK creates a UpdateSubscriptionOK with default headers values
func NewUpdateSubscriptionOK() *UpdateSubscriptionOK {
	return &UpdateSubscriptionOK{}
}

/*
UpdateSubscriptionOK describes a response with status code 200, with default header values.

Successful response.
*/
type UpdateSubscriptionOK struct {
	Payload *UpdateSubscriptionOKBody
}

// IsSuccess returns true when this update subscription o k response has a 2xx status code
func (o *UpdateSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update subscription o k response has a 3xx status code
func (o *UpdateSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subscription o k response has a 4xx status code
func (o *UpdateSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update subscription o k response has a 5xx status code
func (o *UpdateSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update subscription o k response a status code equal to that given
func (o *UpdateSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update subscription o k response
func (o *UpdateSubscriptionOK) Code() int {
	return 200
}

func (o *UpdateSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionOK %s", 200, payload)
}

func (o *UpdateSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionOK %s", 200, payload)
}

func (o *UpdateSubscriptionOK) GetPayload() *UpdateSubscriptionOKBody {
	return o.Payload
}

func (o *UpdateSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSubscriptionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubscriptionBadRequest creates a UpdateSubscriptionBadRequest with default headers values
func NewUpdateSubscriptionBadRequest() *UpdateSubscriptionBadRequest {
	return &UpdateSubscriptionBadRequest{}
}

/*
UpdateSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type UpdateSubscriptionBadRequest struct {
	Payload *UpdateSubscriptionBadRequestBody
}

// IsSuccess returns true when this update subscription bad request response has a 2xx status code
func (o *UpdateSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subscription bad request response has a 3xx status code
func (o *UpdateSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subscription bad request response has a 4xx status code
func (o *UpdateSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update subscription bad request response has a 5xx status code
func (o *UpdateSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update subscription bad request response a status code equal to that given
func (o *UpdateSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update subscription bad request response
func (o *UpdateSubscriptionBadRequest) Code() int {
	return 400
}

func (o *UpdateSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionBadRequest %s", 400, payload)
}

func (o *UpdateSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionBadRequest %s", 400, payload)
}

func (o *UpdateSubscriptionBadRequest) GetPayload() *UpdateSubscriptionBadRequestBody {
	return o.Payload
}

func (o *UpdateSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubscriptionNotFound creates a UpdateSubscriptionNotFound with default headers values
func NewUpdateSubscriptionNotFound() *UpdateSubscriptionNotFound {
	return &UpdateSubscriptionNotFound{}
}

/*
UpdateSubscriptionNotFound describes a response with status code 404, with default header values.

Not found.
*/
type UpdateSubscriptionNotFound struct {
	Payload *UpdateSubscriptionNotFoundBody
}

// IsSuccess returns true when this update subscription not found response has a 2xx status code
func (o *UpdateSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subscription not found response has a 3xx status code
func (o *UpdateSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subscription not found response has a 4xx status code
func (o *UpdateSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update subscription not found response has a 5xx status code
func (o *UpdateSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update subscription not found response a status code equal to that given
func (o *UpdateSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update subscription not found response
func (o *UpdateSubscriptionNotFound) Code() int {
	return 404
}

func (o *UpdateSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionNotFound %s", 404, payload)
}

func (o *UpdateSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionNotFound %s", 404, payload)
}

func (o *UpdateSubscriptionNotFound) GetPayload() *UpdateSubscriptionNotFoundBody {
	return o.Payload
}

func (o *UpdateSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSubscriptionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubscriptionBadGateway creates a UpdateSubscriptionBadGateway with default headers values
func NewUpdateSubscriptionBadGateway() *UpdateSubscriptionBadGateway {
	return &UpdateSubscriptionBadGateway{}
}

/*
UpdateSubscriptionBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type UpdateSubscriptionBadGateway struct {
	Payload *UpdateSubscriptionBadGatewayBody
}

// IsSuccess returns true when this update subscription bad gateway response has a 2xx status code
func (o *UpdateSubscriptionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subscription bad gateway response has a 3xx status code
func (o *UpdateSubscriptionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subscription bad gateway response has a 4xx status code
func (o *UpdateSubscriptionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this update subscription bad gateway response has a 5xx status code
func (o *UpdateSubscriptionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this update subscription bad gateway response a status code equal to that given
func (o *UpdateSubscriptionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the update subscription bad gateway response
func (o *UpdateSubscriptionBadGateway) Code() int {
	return 502
}

func (o *UpdateSubscriptionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionBadGateway %s", 502, payload)
}

func (o *UpdateSubscriptionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /rbs/v1/subscriptions/{id}][%d] updateSubscriptionBadGateway %s", 502, payload)
}

func (o *UpdateSubscriptionBadGateway) GetPayload() *UpdateSubscriptionBadGatewayBody {
	return o.Payload
}

func (o *UpdateSubscriptionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSubscriptionBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateSubscriptionBadGatewayBody update subscription bad gateway body
swagger:model UpdateSubscriptionBadGatewayBody
*/
type UpdateSubscriptionBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update subscription bad gateway body
func (o *UpdateSubscriptionBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription bad gateway body based on context it is used
func (o *UpdateSubscriptionBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionBadRequestBody update subscription bad request body
swagger:model UpdateSubscriptionBadRequestBody
*/
type UpdateSubscriptionBadRequestBody struct {

	// details
	Details []*UpdateSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - CARD_TYPE_NOT_ACCEPTED
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//  - INVALID_CARD_TYPE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update subscription bad request body
func (o *UpdateSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update subscription bad request body based on the context it is used
func (o *UpdateSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionBadRequestBodyDetailsItems0 update subscription bad request body details items0
swagger:model UpdateSubscriptionBadRequestBodyDetailsItems0
*/
type UpdateSubscriptionBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this update subscription bad request body details items0
func (o *UpdateSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription bad request body details items0 based on context it is used
func (o *UpdateSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionBody update subscription body
swagger:model UpdateSubscriptionBody
*/
type UpdateSubscriptionBody struct {

	// client reference information
	ClientReferenceInformation *UpdateSubscriptionParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// order information
	OrderInformation *UpdateSubscriptionParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// plan information
	PlanInformation *UpdateSubscriptionParamsBodyPlanInformation `json:"planInformation,omitempty"`

	// processing information
	ProcessingInformation *UpdateSubscriptionParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// subscription information
	SubscriptionInformation *UpdateSubscriptionParamsBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this update subscription body
func (o *UpdateSubscriptionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription body based on the context it is used
func (o *UpdateSubscriptionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionNotFoundBody update subscription not found body
swagger:model UpdateSubscriptionNotFoundBody
*/
type UpdateSubscriptionNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update subscription not found body
func (o *UpdateSubscriptionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription not found body based on context it is used
func (o *UpdateSubscriptionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBody updateSubscriptionResponse
swagger:model UpdateSubscriptionOKBody
*/
type UpdateSubscriptionOKBody struct {

	// links
	Links *UpdateSubscriptionOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//  - PENDING_REVIEW
	//  - DECLINED
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscription information
	SubscriptionInformation *UpdateSubscriptionOKBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this update subscription o k body
func (o *UpdateSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("updateSubscriptionOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionOKBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription o k body based on the context it is used
func (o *UpdateSubscriptionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodyLinks update subscription o k body links
swagger:model UpdateSubscriptionOKBodyLinks
*/
type UpdateSubscriptionOKBodyLinks struct {

	// activate
	Activate *UpdateSubscriptionOKBodyLinksActivate `json:"activate,omitempty"`

	// cancel
	Cancel *UpdateSubscriptionOKBodyLinksCancel `json:"cancel,omitempty"`

	// self
	Self *UpdateSubscriptionOKBodyLinksSelf `json:"self,omitempty"`

	// suspend
	Suspend *UpdateSubscriptionOKBodyLinksSuspend `json:"suspend,omitempty"`
}

// Validate validates this update subscription o k body links
func (o *UpdateSubscriptionOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) validateActivate(formats strfmt.Registry) error {
	if swag.IsZero(o.Activate) { // not required
		return nil
	}

	if o.Activate != nil {
		if err := o.Activate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) validateCancel(formats strfmt.Registry) error {
	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) validateSuspend(formats strfmt.Registry) error {
	if swag.IsZero(o.Suspend) { // not required
		return nil
	}

	if o.Suspend != nil {
		if err := o.Suspend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription o k body links based on the context it is used
func (o *UpdateSubscriptionOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuspend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) contextValidateActivate(ctx context.Context, formats strfmt.Registry) error {

	if o.Activate != nil {

		if swag.IsZero(o.Activate) { // not required
			return nil
		}

		if err := o.Activate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) contextValidateCancel(ctx context.Context, formats strfmt.Registry) error {

	if o.Cancel != nil {

		if swag.IsZero(o.Cancel) { // not required
			return nil
		}

		if err := o.Cancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionOKBodyLinks) contextValidateSuspend(ctx context.Context, formats strfmt.Registry) error {

	if o.Suspend != nil {

		if swag.IsZero(o.Suspend) { // not required
			return nil
		}

		if err := o.Suspend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateSubscriptionOK" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodyLinksActivate update subscription o k body links activate
swagger:model UpdateSubscriptionOKBodyLinksActivate
*/
type UpdateSubscriptionOKBodyLinksActivate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this update subscription o k body links activate
func (o *UpdateSubscriptionOKBodyLinksActivate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription o k body links activate based on context it is used
func (o *UpdateSubscriptionOKBodyLinksActivate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksActivate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksActivate) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodyLinksActivate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodyLinksCancel update subscription o k body links cancel
swagger:model UpdateSubscriptionOKBodyLinksCancel
*/
type UpdateSubscriptionOKBodyLinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this update subscription o k body links cancel
func (o *UpdateSubscriptionOKBodyLinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription o k body links cancel based on context it is used
func (o *UpdateSubscriptionOKBodyLinksCancel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksCancel) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodyLinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodyLinksSelf update subscription o k body links self
swagger:model UpdateSubscriptionOKBodyLinksSelf
*/
type UpdateSubscriptionOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this update subscription o k body links self
func (o *UpdateSubscriptionOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription o k body links self based on context it is used
func (o *UpdateSubscriptionOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodyLinksSuspend update subscription o k body links suspend
swagger:model UpdateSubscriptionOKBodyLinksSuspend
*/
type UpdateSubscriptionOKBodyLinksSuspend struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this update subscription o k body links suspend
func (o *UpdateSubscriptionOKBodyLinksSuspend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription o k body links suspend based on context it is used
func (o *UpdateSubscriptionOKBodyLinksSuspend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksSuspend) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodyLinksSuspend) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodyLinksSuspend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionOKBodySubscriptionInformation update subscription o k body subscription information
swagger:model UpdateSubscriptionOKBodySubscriptionInformation
*/
type UpdateSubscriptionOKBodySubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Status:
	//  - `PENDING`
	//  - `ACTIVE`
	//  - `FAILED`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this update subscription o k body subscription information
func (o *UpdateSubscriptionOKBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionOKBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("updateSubscriptionOK"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update subscription o k body subscription information based on context it is used
func (o *UpdateSubscriptionOKBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionOKBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionOKBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyClientReferenceInformation update subscription params body client reference information
swagger:model UpdateSubscriptionParamsBodyClientReferenceInformation
*/
type UpdateSubscriptionParamsBodyClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Version of the CyberSource application or integration used for a transaction.
	//
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *UpdateSubscriptionParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this update subscription params body client reference information
func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription params body client reference information based on the context it is used
func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyClientReferenceInformationPartner update subscription params body client reference information partner
swagger:model UpdateSubscriptionParamsBodyClientReferenceInformationPartner
*/
type UpdateSubscriptionParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this update subscription params body client reference information partner
func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update subscription params body client reference information partner based on context it is used
func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyOrderInformation update subscription params body order information
swagger:model UpdateSubscriptionParamsBodyOrderInformation
*/
type UpdateSubscriptionParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *UpdateSubscriptionParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this update subscription params body order information
func (o *UpdateSubscriptionParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription params body order information based on the context it is used
func (o *UpdateSubscriptionParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyOrderInformationAmountDetails update subscription params body order information amount details
swagger:model UpdateSubscriptionParamsBodyOrderInformationAmountDetails
*/
type UpdateSubscriptionParamsBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this update subscription params body order information amount details
func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update subscription params body order information amount details based on context it is used
func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyPlanInformation update subscription params body plan information
swagger:model UpdateSubscriptionParamsBodyPlanInformation
*/
type UpdateSubscriptionParamsBodyPlanInformation struct {

	// billing cycles
	BillingCycles *UpdateSubscriptionParamsBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`
}

// Validate validates this update subscription params body plan information
func (o *UpdateSubscriptionParamsBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription params body plan information based on the context it is used
func (o *UpdateSubscriptionParamsBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyPlanInformationBillingCycles Number of times customer is going to be billed
//
swagger:model UpdateSubscriptionParamsBodyPlanInformationBillingCycles
*/
type UpdateSubscriptionParamsBodyPlanInformationBillingCycles struct {

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this update subscription params body plan information billing cycles
func (o *UpdateSubscriptionParamsBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription params body plan information billing cycles based on context it is used
func (o *UpdateSubscriptionParamsBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyProcessingInformation update subscription params body processing information
swagger:model UpdateSubscriptionParamsBodyProcessingInformation
*/
type UpdateSubscriptionParamsBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`

	// Commerce Indicator is a way to identify the type of transaction. Some payment card companies use this information when determining discount rates.
	//
	// Valid values:
	// - `MOTO`
	// - `RECURRING`
	//
	// Max Length: 20
	CommerceIndicator string `json:"commerceIndicator,omitempty"`
}

// Validate validates this update subscription params body processing information
func (o *UpdateSubscriptionParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"processingInformation"+"."+"commerceIndicator", "body", o.CommerceIndicator, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update subscription params body processing information based on the context it is used
func (o *UpdateSubscriptionParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyProcessingInformation) contextValidateAuthorizationOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.AuthorizationOptions != nil {

		if swag.IsZero(o.AuthorizationOptions) { // not required
			return nil
		}

		if err := o.AuthorizationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions update subscription params body processing information authorization options
swagger:model UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions
*/
type UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this update subscription params body processing information authorization options
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription params body processing information authorization options based on the context it is used
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpdateSubscription" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator update subscription params body processing information authorization options initiator
swagger:model UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator
*/
type UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.
	//
	// Valid values:
	// - **customer**
	// - **merchant**
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this update subscription params body processing information authorization options initiator
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update subscription params body processing information authorization options initiator based on context it is used
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateSubscriptionParamsBodySubscriptionInformation update subscription params body subscription information
swagger:model UpdateSubscriptionParamsBodySubscriptionInformation
*/
type UpdateSubscriptionParamsBodySubscriptionInformation struct {

	// Subscription code is an optional field, If not provided system generates and assign one
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// Plan Id. Use Plan Id from Create Plan Service.
	//
	// Max Length: 26
	PlanID string `json:"planId,omitempty"`

	// Start date of the Subscription
	//
	// Start date must be in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	// The T separates the date and the time. The Z indicates UTC.
	//
	// Note: Subscription starts on the day provided in UTC.
	//
	// **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.).
	// Subscription will start on August 11,2022.
	//
	StartDate string `json:"startDate,omitempty"`
}

// Validate validates this update subscription params body subscription information
func (o *UpdateSubscriptionParamsBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSubscriptionParamsBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodySubscriptionInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"subscriptionInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

func (o *UpdateSubscriptionParamsBodySubscriptionInformation) validatePlanID(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanID) { // not required
		return nil
	}

	if err := validate.MaxLength("UpdateSubscription"+"."+"subscriptionInformation"+"."+"planId", "body", o.PlanID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update subscription params body subscription information based on context it is used
func (o *UpdateSubscriptionParamsBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSubscriptionParamsBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionParamsBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
