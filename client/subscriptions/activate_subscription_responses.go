// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivateSubscriptionReader is a Reader for the ActivateSubscription structure.
type ActivateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActivateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActivateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewActivateSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewActivateSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewActivateSubscriptionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rbs/v1/subscriptions/{id}/activate] activateSubscription", response, response.Code())
	}
}

// NewActivateSubscriptionOK creates a ActivateSubscriptionOK with default headers values
func NewActivateSubscriptionOK() *ActivateSubscriptionOK {
	return &ActivateSubscriptionOK{}
}

/*
ActivateSubscriptionOK describes a response with status code 200, with default header values.

Successful response.
*/
type ActivateSubscriptionOK struct {
	Payload *ActivateSubscriptionOKBody
}

// IsSuccess returns true when this activate subscription o k response has a 2xx status code
func (o *ActivateSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this activate subscription o k response has a 3xx status code
func (o *ActivateSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate subscription o k response has a 4xx status code
func (o *ActivateSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this activate subscription o k response has a 5xx status code
func (o *ActivateSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this activate subscription o k response a status code equal to that given
func (o *ActivateSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the activate subscription o k response
func (o *ActivateSubscriptionOK) Code() int {
	return 200
}

func (o *ActivateSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionOK %s", 200, payload)
}

func (o *ActivateSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionOK %s", 200, payload)
}

func (o *ActivateSubscriptionOK) GetPayload() *ActivateSubscriptionOKBody {
	return o.Payload
}

func (o *ActivateSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivateSubscriptionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivateSubscriptionBadRequest creates a ActivateSubscriptionBadRequest with default headers values
func NewActivateSubscriptionBadRequest() *ActivateSubscriptionBadRequest {
	return &ActivateSubscriptionBadRequest{}
}

/*
ActivateSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type ActivateSubscriptionBadRequest struct {
	Payload *ActivateSubscriptionBadRequestBody
}

// IsSuccess returns true when this activate subscription bad request response has a 2xx status code
func (o *ActivateSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate subscription bad request response has a 3xx status code
func (o *ActivateSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate subscription bad request response has a 4xx status code
func (o *ActivateSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate subscription bad request response has a 5xx status code
func (o *ActivateSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this activate subscription bad request response a status code equal to that given
func (o *ActivateSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the activate subscription bad request response
func (o *ActivateSubscriptionBadRequest) Code() int {
	return 400
}

func (o *ActivateSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionBadRequest %s", 400, payload)
}

func (o *ActivateSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionBadRequest %s", 400, payload)
}

func (o *ActivateSubscriptionBadRequest) GetPayload() *ActivateSubscriptionBadRequestBody {
	return o.Payload
}

func (o *ActivateSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivateSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivateSubscriptionNotFound creates a ActivateSubscriptionNotFound with default headers values
func NewActivateSubscriptionNotFound() *ActivateSubscriptionNotFound {
	return &ActivateSubscriptionNotFound{}
}

/*
ActivateSubscriptionNotFound describes a response with status code 404, with default header values.

Not found.
*/
type ActivateSubscriptionNotFound struct {
	Payload *ActivateSubscriptionNotFoundBody
}

// IsSuccess returns true when this activate subscription not found response has a 2xx status code
func (o *ActivateSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate subscription not found response has a 3xx status code
func (o *ActivateSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate subscription not found response has a 4xx status code
func (o *ActivateSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate subscription not found response has a 5xx status code
func (o *ActivateSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this activate subscription not found response a status code equal to that given
func (o *ActivateSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the activate subscription not found response
func (o *ActivateSubscriptionNotFound) Code() int {
	return 404
}

func (o *ActivateSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionNotFound %s", 404, payload)
}

func (o *ActivateSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionNotFound %s", 404, payload)
}

func (o *ActivateSubscriptionNotFound) GetPayload() *ActivateSubscriptionNotFoundBody {
	return o.Payload
}

func (o *ActivateSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivateSubscriptionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivateSubscriptionBadGateway creates a ActivateSubscriptionBadGateway with default headers values
func NewActivateSubscriptionBadGateway() *ActivateSubscriptionBadGateway {
	return &ActivateSubscriptionBadGateway{}
}

/*
ActivateSubscriptionBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type ActivateSubscriptionBadGateway struct {
	Payload *ActivateSubscriptionBadGatewayBody
}

// IsSuccess returns true when this activate subscription bad gateway response has a 2xx status code
func (o *ActivateSubscriptionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate subscription bad gateway response has a 3xx status code
func (o *ActivateSubscriptionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate subscription bad gateway response has a 4xx status code
func (o *ActivateSubscriptionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this activate subscription bad gateway response has a 5xx status code
func (o *ActivateSubscriptionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this activate subscription bad gateway response a status code equal to that given
func (o *ActivateSubscriptionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the activate subscription bad gateway response
func (o *ActivateSubscriptionBadGateway) Code() int {
	return 502
}

func (o *ActivateSubscriptionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionBadGateway %s", 502, payload)
}

func (o *ActivateSubscriptionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/activate][%d] activateSubscriptionBadGateway %s", 502, payload)
}

func (o *ActivateSubscriptionBadGateway) GetPayload() *ActivateSubscriptionBadGatewayBody {
	return o.Payload
}

func (o *ActivateSubscriptionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActivateSubscriptionBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ActivateSubscriptionBadGatewayBody activate subscription bad gateway body
swagger:model ActivateSubscriptionBadGatewayBody
*/
type ActivateSubscriptionBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate subscription bad gateway body
func (o *ActivateSubscriptionBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate subscription bad gateway body based on context it is used
func (o *ActivateSubscriptionBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionBadRequestBody activate subscription bad request body
swagger:model ActivateSubscriptionBadRequestBody
*/
type ActivateSubscriptionBadRequestBody struct {

	// details
	Details []*ActivateSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate subscription bad request body
func (o *ActivateSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this activate subscription bad request body based on the context it is used
func (o *ActivateSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activateSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionBadRequestBodyDetailsItems0 activate subscription bad request body details items0
swagger:model ActivateSubscriptionBadRequestBodyDetailsItems0
*/
type ActivateSubscriptionBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this activate subscription bad request body details items0
func (o *ActivateSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate subscription bad request body details items0 based on context it is used
func (o *ActivateSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionNotFoundBody activate subscription not found body
swagger:model ActivateSubscriptionNotFoundBody
*/
type ActivateSubscriptionNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this activate subscription not found body
func (o *ActivateSubscriptionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate subscription not found body based on context it is used
func (o *ActivateSubscriptionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionOKBody activateSubscriptionResponse
swagger:model ActivateSubscriptionOKBody
*/
type ActivateSubscriptionOKBody struct {

	// links
	Links *ActivateSubscriptionOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscription information
	SubscriptionInformation *ActivateSubscriptionOKBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this activate subscription o k body
func (o *ActivateSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *ActivateSubscriptionOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("activateSubscriptionOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *ActivateSubscriptionOKBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activate subscription o k body based on the context it is used
func (o *ActivateSubscriptionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *ActivateSubscriptionOKBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionOKBodyLinks activate subscription o k body links
swagger:model ActivateSubscriptionOKBodyLinks
*/
type ActivateSubscriptionOKBodyLinks struct {

	// self
	Self *ActivateSubscriptionOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this activate subscription o k body links
func (o *ActivateSubscriptionOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activate subscription o k body links based on the context it is used
func (o *ActivateSubscriptionOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activateSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activateSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionOKBodyLinksSelf activate subscription o k body links self
swagger:model ActivateSubscriptionOKBodyLinksSelf
*/
type ActivateSubscriptionOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this activate subscription o k body links self
func (o *ActivateSubscriptionOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this activate subscription o k body links self based on context it is used
func (o *ActivateSubscriptionOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActivateSubscriptionOKBodySubscriptionInformation activate subscription o k body subscription information
swagger:model ActivateSubscriptionOKBodySubscriptionInformation
*/
type ActivateSubscriptionOKBodySubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Status:
	// - `ACTIVE`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this activate subscription o k body subscription information
func (o *ActivateSubscriptionOKBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActivateSubscriptionOKBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("activateSubscriptionOK"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this activate subscription o k body subscription information based on context it is used
func (o *ActivateSubscriptionOKBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActivateSubscriptionOKBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res ActivateSubscriptionOKBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
