// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SuspendSubscriptionReader is a Reader for the SuspendSubscription structure.
type SuspendSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SuspendSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSuspendSubscriptionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSuspendSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSuspendSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewSuspendSubscriptionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rbs/v1/subscriptions/{id}/suspend] suspendSubscription", response, response.Code())
	}
}

// NewSuspendSubscriptionAccepted creates a SuspendSubscriptionAccepted with default headers values
func NewSuspendSubscriptionAccepted() *SuspendSubscriptionAccepted {
	return &SuspendSubscriptionAccepted{}
}

/*
SuspendSubscriptionAccepted describes a response with status code 202, with default header values.

Successful response.
*/
type SuspendSubscriptionAccepted struct {
	Payload *SuspendSubscriptionAcceptedBody
}

// IsSuccess returns true when this suspend subscription accepted response has a 2xx status code
func (o *SuspendSubscriptionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this suspend subscription accepted response has a 3xx status code
func (o *SuspendSubscriptionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend subscription accepted response has a 4xx status code
func (o *SuspendSubscriptionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this suspend subscription accepted response has a 5xx status code
func (o *SuspendSubscriptionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend subscription accepted response a status code equal to that given
func (o *SuspendSubscriptionAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the suspend subscription accepted response
func (o *SuspendSubscriptionAccepted) Code() int {
	return 202
}

func (o *SuspendSubscriptionAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionAccepted %s", 202, payload)
}

func (o *SuspendSubscriptionAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionAccepted %s", 202, payload)
}

func (o *SuspendSubscriptionAccepted) GetPayload() *SuspendSubscriptionAcceptedBody {
	return o.Payload
}

func (o *SuspendSubscriptionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SuspendSubscriptionAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendSubscriptionBadRequest creates a SuspendSubscriptionBadRequest with default headers values
func NewSuspendSubscriptionBadRequest() *SuspendSubscriptionBadRequest {
	return &SuspendSubscriptionBadRequest{}
}

/*
SuspendSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type SuspendSubscriptionBadRequest struct {
	Payload *SuspendSubscriptionBadRequestBody
}

// IsSuccess returns true when this suspend subscription bad request response has a 2xx status code
func (o *SuspendSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend subscription bad request response has a 3xx status code
func (o *SuspendSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend subscription bad request response has a 4xx status code
func (o *SuspendSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend subscription bad request response has a 5xx status code
func (o *SuspendSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend subscription bad request response a status code equal to that given
func (o *SuspendSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the suspend subscription bad request response
func (o *SuspendSubscriptionBadRequest) Code() int {
	return 400
}

func (o *SuspendSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionBadRequest %s", 400, payload)
}

func (o *SuspendSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionBadRequest %s", 400, payload)
}

func (o *SuspendSubscriptionBadRequest) GetPayload() *SuspendSubscriptionBadRequestBody {
	return o.Payload
}

func (o *SuspendSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SuspendSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendSubscriptionNotFound creates a SuspendSubscriptionNotFound with default headers values
func NewSuspendSubscriptionNotFound() *SuspendSubscriptionNotFound {
	return &SuspendSubscriptionNotFound{}
}

/*
SuspendSubscriptionNotFound describes a response with status code 404, with default header values.

Not found.
*/
type SuspendSubscriptionNotFound struct {
	Payload *SuspendSubscriptionNotFoundBody
}

// IsSuccess returns true when this suspend subscription not found response has a 2xx status code
func (o *SuspendSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend subscription not found response has a 3xx status code
func (o *SuspendSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend subscription not found response has a 4xx status code
func (o *SuspendSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend subscription not found response has a 5xx status code
func (o *SuspendSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend subscription not found response a status code equal to that given
func (o *SuspendSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the suspend subscription not found response
func (o *SuspendSubscriptionNotFound) Code() int {
	return 404
}

func (o *SuspendSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionNotFound %s", 404, payload)
}

func (o *SuspendSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionNotFound %s", 404, payload)
}

func (o *SuspendSubscriptionNotFound) GetPayload() *SuspendSubscriptionNotFoundBody {
	return o.Payload
}

func (o *SuspendSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SuspendSubscriptionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendSubscriptionBadGateway creates a SuspendSubscriptionBadGateway with default headers values
func NewSuspendSubscriptionBadGateway() *SuspendSubscriptionBadGateway {
	return &SuspendSubscriptionBadGateway{}
}

/*
SuspendSubscriptionBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type SuspendSubscriptionBadGateway struct {
	Payload *SuspendSubscriptionBadGatewayBody
}

// IsSuccess returns true when this suspend subscription bad gateway response has a 2xx status code
func (o *SuspendSubscriptionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend subscription bad gateway response has a 3xx status code
func (o *SuspendSubscriptionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend subscription bad gateway response has a 4xx status code
func (o *SuspendSubscriptionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this suspend subscription bad gateway response has a 5xx status code
func (o *SuspendSubscriptionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this suspend subscription bad gateway response a status code equal to that given
func (o *SuspendSubscriptionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the suspend subscription bad gateway response
func (o *SuspendSubscriptionBadGateway) Code() int {
	return 502
}

func (o *SuspendSubscriptionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionBadGateway %s", 502, payload)
}

func (o *SuspendSubscriptionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions/{id}/suspend][%d] suspendSubscriptionBadGateway %s", 502, payload)
}

func (o *SuspendSubscriptionBadGateway) GetPayload() *SuspendSubscriptionBadGatewayBody {
	return o.Payload
}

func (o *SuspendSubscriptionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SuspendSubscriptionBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SuspendSubscriptionAcceptedBody suspendSubscriptionResponse
swagger:model SuspendSubscriptionAcceptedBody
*/
type SuspendSubscriptionAcceptedBody struct {

	// links
	Links *SuspendSubscriptionAcceptedBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscription information
	SubscriptionInformation *SuspendSubscriptionAcceptedBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this suspend subscription accepted body
func (o *SuspendSubscriptionAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionAcceptedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *SuspendSubscriptionAcceptedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("suspendSubscriptionAccepted"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *SuspendSubscriptionAcceptedBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this suspend subscription accepted body based on the context it is used
func (o *SuspendSubscriptionAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionAcceptedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *SuspendSubscriptionAcceptedBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBody) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionAcceptedBodyLinks suspend subscription accepted body links
swagger:model SuspendSubscriptionAcceptedBodyLinks
*/
type SuspendSubscriptionAcceptedBodyLinks struct {

	// self
	Self *SuspendSubscriptionAcceptedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this suspend subscription accepted body links
func (o *SuspendSubscriptionAcceptedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionAcceptedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this suspend subscription accepted body links based on the context it is used
func (o *SuspendSubscriptionAcceptedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionAcceptedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suspendSubscriptionAccepted" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suspendSubscriptionAccepted" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodyLinks) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionAcceptedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionAcceptedBodyLinksSelf suspend subscription accepted body links self
swagger:model SuspendSubscriptionAcceptedBodyLinksSelf
*/
type SuspendSubscriptionAcceptedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this suspend subscription accepted body links self
func (o *SuspendSubscriptionAcceptedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this suspend subscription accepted body links self based on context it is used
func (o *SuspendSubscriptionAcceptedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionAcceptedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionAcceptedBodySubscriptionInformation suspend subscription accepted body subscription information
swagger:model SuspendSubscriptionAcceptedBodySubscriptionInformation
*/
type SuspendSubscriptionAcceptedBodySubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Status:
	// - `SUSPENDED`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this suspend subscription accepted body subscription information
func (o *SuspendSubscriptionAcceptedBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionAcceptedBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("suspendSubscriptionAccepted"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this suspend subscription accepted body subscription information based on context it is used
func (o *SuspendSubscriptionAcceptedBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionAcceptedBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionAcceptedBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionBadGatewayBody suspend subscription bad gateway body
swagger:model SuspendSubscriptionBadGatewayBody
*/
type SuspendSubscriptionBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this suspend subscription bad gateway body
func (o *SuspendSubscriptionBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this suspend subscription bad gateway body based on context it is used
func (o *SuspendSubscriptionBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionBadRequestBody suspend subscription bad request body
swagger:model SuspendSubscriptionBadRequestBody
*/
type SuspendSubscriptionBadRequestBody struct {

	// details
	Details []*SuspendSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this suspend subscription bad request body
func (o *SuspendSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suspendSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("suspendSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this suspend subscription bad request body based on the context it is used
func (o *SuspendSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SuspendSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suspendSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("suspendSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionBadRequestBodyDetailsItems0 suspend subscription bad request body details items0
swagger:model SuspendSubscriptionBadRequestBodyDetailsItems0
*/
type SuspendSubscriptionBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this suspend subscription bad request body details items0
func (o *SuspendSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this suspend subscription bad request body details items0 based on context it is used
func (o *SuspendSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SuspendSubscriptionNotFoundBody suspend subscription not found body
swagger:model SuspendSubscriptionNotFoundBody
*/
type SuspendSubscriptionNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this suspend subscription not found body
func (o *SuspendSubscriptionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this suspend subscription not found body based on context it is used
func (o *SuspendSubscriptionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendSubscriptionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendSubscriptionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SuspendSubscriptionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
