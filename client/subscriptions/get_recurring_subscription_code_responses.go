// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetRecurringSubscriptionCodeReader is a Reader for the GetRecurringSubscriptionCode structure.
type GetRecurringSubscriptionCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecurringSubscriptionCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecurringSubscriptionCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecurringSubscriptionCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetRecurringSubscriptionCodeBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /rbs/v1/subscriptions/code] getRecurringSubscriptionCode", response, response.Code())
	}
}

// NewGetRecurringSubscriptionCodeOK creates a GetRecurringSubscriptionCodeOK with default headers values
func NewGetRecurringSubscriptionCodeOK() *GetRecurringSubscriptionCodeOK {
	return &GetRecurringSubscriptionCodeOK{}
}

/*
GetRecurringSubscriptionCodeOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetRecurringSubscriptionCodeOK struct {
	Payload *GetRecurringSubscriptionCodeOKBody
}

// IsSuccess returns true when this get recurring subscription code o k response has a 2xx status code
func (o *GetRecurringSubscriptionCodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recurring subscription code o k response has a 3xx status code
func (o *GetRecurringSubscriptionCodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring subscription code o k response has a 4xx status code
func (o *GetRecurringSubscriptionCodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recurring subscription code o k response has a 5xx status code
func (o *GetRecurringSubscriptionCodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring subscription code o k response a status code equal to that given
func (o *GetRecurringSubscriptionCodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get recurring subscription code o k response
func (o *GetRecurringSubscriptionCodeOK) Code() int {
	return 200
}

func (o *GetRecurringSubscriptionCodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeOK %s", 200, payload)
}

func (o *GetRecurringSubscriptionCodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeOK %s", 200, payload)
}

func (o *GetRecurringSubscriptionCodeOK) GetPayload() *GetRecurringSubscriptionCodeOKBody {
	return o.Payload
}

func (o *GetRecurringSubscriptionCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRecurringSubscriptionCodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringSubscriptionCodeBadRequest creates a GetRecurringSubscriptionCodeBadRequest with default headers values
func NewGetRecurringSubscriptionCodeBadRequest() *GetRecurringSubscriptionCodeBadRequest {
	return &GetRecurringSubscriptionCodeBadRequest{}
}

/*
GetRecurringSubscriptionCodeBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type GetRecurringSubscriptionCodeBadRequest struct {
	Payload *GetRecurringSubscriptionCodeBadRequestBody
}

// IsSuccess returns true when this get recurring subscription code bad request response has a 2xx status code
func (o *GetRecurringSubscriptionCodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring subscription code bad request response has a 3xx status code
func (o *GetRecurringSubscriptionCodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring subscription code bad request response has a 4xx status code
func (o *GetRecurringSubscriptionCodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring subscription code bad request response has a 5xx status code
func (o *GetRecurringSubscriptionCodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring subscription code bad request response a status code equal to that given
func (o *GetRecurringSubscriptionCodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get recurring subscription code bad request response
func (o *GetRecurringSubscriptionCodeBadRequest) Code() int {
	return 400
}

func (o *GetRecurringSubscriptionCodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeBadRequest %s", 400, payload)
}

func (o *GetRecurringSubscriptionCodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeBadRequest %s", 400, payload)
}

func (o *GetRecurringSubscriptionCodeBadRequest) GetPayload() *GetRecurringSubscriptionCodeBadRequestBody {
	return o.Payload
}

func (o *GetRecurringSubscriptionCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRecurringSubscriptionCodeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringSubscriptionCodeBadGateway creates a GetRecurringSubscriptionCodeBadGateway with default headers values
func NewGetRecurringSubscriptionCodeBadGateway() *GetRecurringSubscriptionCodeBadGateway {
	return &GetRecurringSubscriptionCodeBadGateway{}
}

/*
GetRecurringSubscriptionCodeBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetRecurringSubscriptionCodeBadGateway struct {
	Payload *GetRecurringSubscriptionCodeBadGatewayBody
}

// IsSuccess returns true when this get recurring subscription code bad gateway response has a 2xx status code
func (o *GetRecurringSubscriptionCodeBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring subscription code bad gateway response has a 3xx status code
func (o *GetRecurringSubscriptionCodeBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring subscription code bad gateway response has a 4xx status code
func (o *GetRecurringSubscriptionCodeBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recurring subscription code bad gateway response has a 5xx status code
func (o *GetRecurringSubscriptionCodeBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get recurring subscription code bad gateway response a status code equal to that given
func (o *GetRecurringSubscriptionCodeBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get recurring subscription code bad gateway response
func (o *GetRecurringSubscriptionCodeBadGateway) Code() int {
	return 502
}

func (o *GetRecurringSubscriptionCodeBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeBadGateway %s", 502, payload)
}

func (o *GetRecurringSubscriptionCodeBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/code][%d] getRecurringSubscriptionCodeBadGateway %s", 502, payload)
}

func (o *GetRecurringSubscriptionCodeBadGateway) GetPayload() *GetRecurringSubscriptionCodeBadGatewayBody {
	return o.Payload
}

func (o *GetRecurringSubscriptionCodeBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRecurringSubscriptionCodeBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRecurringSubscriptionCodeBadGatewayBody get recurring subscription code bad gateway body
swagger:model GetRecurringSubscriptionCodeBadGatewayBody
*/
type GetRecurringSubscriptionCodeBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get recurring subscription code bad gateway body
func (o *GetRecurringSubscriptionCodeBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get recurring subscription code bad gateway body based on context it is used
func (o *GetRecurringSubscriptionCodeBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetRecurringSubscriptionCodeBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetRecurringSubscriptionCodeBadRequestBody get recurring subscription code bad request body
swagger:model GetRecurringSubscriptionCodeBadRequestBody
*/
type GetRecurringSubscriptionCodeBadRequestBody struct {

	// details
	Details []*GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get recurring subscription code bad request body
func (o *GetRecurringSubscriptionCodeBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRecurringSubscriptionCodeBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRecurringSubscriptionCodeBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRecurringSubscriptionCodeBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get recurring subscription code bad request body based on the context it is used
func (o *GetRecurringSubscriptionCodeBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRecurringSubscriptionCodeBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRecurringSubscriptionCodeBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getRecurringSubscriptionCodeBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetRecurringSubscriptionCodeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0 get recurring subscription code bad request body details items0
swagger:model GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0
*/
type GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get recurring subscription code bad request body details items0
func (o *GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get recurring subscription code bad request body details items0 based on context it is used
func (o *GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetRecurringSubscriptionCodeBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetRecurringSubscriptionCodeOKBody getSubscriptionCodeResponse
swagger:model GetRecurringSubscriptionCodeOKBody
*/
type GetRecurringSubscriptionCodeOKBody struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get recurring subscription code o k body
func (o *GetRecurringSubscriptionCodeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRecurringSubscriptionCodeOKBody) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getRecurringSubscriptionCodeOK"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get recurring subscription code o k body based on context it is used
func (o *GetRecurringSubscriptionCodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRecurringSubscriptionCodeOKBody) UnmarshalBinary(b []byte) error {
	var res GetRecurringSubscriptionCodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
