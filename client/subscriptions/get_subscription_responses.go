// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSubscriptionReader is a Reader for the GetSubscription structure.
type GetSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetSubscriptionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /rbs/v1/subscriptions/{id}] getSubscription", response, response.Code())
	}
}

// NewGetSubscriptionOK creates a GetSubscriptionOK with default headers values
func NewGetSubscriptionOK() *GetSubscriptionOK {
	return &GetSubscriptionOK{}
}

/*
GetSubscriptionOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetSubscriptionOK struct {
	Payload *GetSubscriptionOKBody
}

// IsSuccess returns true when this get subscription o k response has a 2xx status code
func (o *GetSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get subscription o k response has a 3xx status code
func (o *GetSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription o k response has a 4xx status code
func (o *GetSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription o k response has a 5xx status code
func (o *GetSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription o k response a status code equal to that given
func (o *GetSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get subscription o k response
func (o *GetSubscriptionOK) Code() int {
	return 200
}

func (o *GetSubscriptionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionOK %s", 200, payload)
}

func (o *GetSubscriptionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionOK %s", 200, payload)
}

func (o *GetSubscriptionOK) GetPayload() *GetSubscriptionOKBody {
	return o.Payload
}

func (o *GetSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionBadRequest creates a GetSubscriptionBadRequest with default headers values
func NewGetSubscriptionBadRequest() *GetSubscriptionBadRequest {
	return &GetSubscriptionBadRequest{}
}

/*
GetSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type GetSubscriptionBadRequest struct {
	Payload *GetSubscriptionBadRequestBody
}

// IsSuccess returns true when this get subscription bad request response has a 2xx status code
func (o *GetSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription bad request response has a 3xx status code
func (o *GetSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription bad request response has a 4xx status code
func (o *GetSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription bad request response has a 5xx status code
func (o *GetSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription bad request response a status code equal to that given
func (o *GetSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get subscription bad request response
func (o *GetSubscriptionBadRequest) Code() int {
	return 400
}

func (o *GetSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionBadRequest %s", 400, payload)
}

func (o *GetSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionBadRequest %s", 400, payload)
}

func (o *GetSubscriptionBadRequest) GetPayload() *GetSubscriptionBadRequestBody {
	return o.Payload
}

func (o *GetSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionNotFound creates a GetSubscriptionNotFound with default headers values
func NewGetSubscriptionNotFound() *GetSubscriptionNotFound {
	return &GetSubscriptionNotFound{}
}

/*
GetSubscriptionNotFound describes a response with status code 404, with default header values.

Not found.
*/
type GetSubscriptionNotFound struct {
	Payload *GetSubscriptionNotFoundBody
}

// IsSuccess returns true when this get subscription not found response has a 2xx status code
func (o *GetSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription not found response has a 3xx status code
func (o *GetSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription not found response has a 4xx status code
func (o *GetSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get subscription not found response has a 5xx status code
func (o *GetSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get subscription not found response a status code equal to that given
func (o *GetSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get subscription not found response
func (o *GetSubscriptionNotFound) Code() int {
	return 404
}

func (o *GetSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionNotFound %s", 404, payload)
}

func (o *GetSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionNotFound %s", 404, payload)
}

func (o *GetSubscriptionNotFound) GetPayload() *GetSubscriptionNotFoundBody {
	return o.Payload
}

func (o *GetSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionBadGateway creates a GetSubscriptionBadGateway with default headers values
func NewGetSubscriptionBadGateway() *GetSubscriptionBadGateway {
	return &GetSubscriptionBadGateway{}
}

/*
GetSubscriptionBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetSubscriptionBadGateway struct {
	Payload *GetSubscriptionBadGatewayBody
}

// IsSuccess returns true when this get subscription bad gateway response has a 2xx status code
func (o *GetSubscriptionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get subscription bad gateway response has a 3xx status code
func (o *GetSubscriptionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get subscription bad gateway response has a 4xx status code
func (o *GetSubscriptionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get subscription bad gateway response has a 5xx status code
func (o *GetSubscriptionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get subscription bad gateway response a status code equal to that given
func (o *GetSubscriptionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get subscription bad gateway response
func (o *GetSubscriptionBadGateway) Code() int {
	return 502
}

func (o *GetSubscriptionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionBadGateway %s", 502, payload)
}

func (o *GetSubscriptionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions/{id}][%d] getSubscriptionBadGateway %s", 502, payload)
}

func (o *GetSubscriptionBadGateway) GetPayload() *GetSubscriptionBadGatewayBody {
	return o.Payload
}

func (o *GetSubscriptionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetSubscriptionBadGatewayBody get subscription bad gateway body
swagger:model GetSubscriptionBadGatewayBody
*/
type GetSubscriptionBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get subscription bad gateway body
func (o *GetSubscriptionBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription bad gateway body based on context it is used
func (o *GetSubscriptionBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionBadRequestBody get subscription bad request body
swagger:model GetSubscriptionBadRequestBody
*/
type GetSubscriptionBadRequestBody struct {

	// details
	Details []*GetSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get subscription bad request body
func (o *GetSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get subscription bad request body based on the context it is used
func (o *GetSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionBadRequestBodyDetailsItems0 get subscription bad request body details items0
swagger:model GetSubscriptionBadRequestBodyDetailsItems0
*/
type GetSubscriptionBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get subscription bad request body details items0
func (o *GetSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription bad request body details items0 based on context it is used
func (o *GetSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionNotFoundBody get subscription not found body
swagger:model GetSubscriptionNotFoundBody
*/
type GetSubscriptionNotFoundBody struct {

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - NOT_FOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get subscription not found body
func (o *GetSubscriptionNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription not found body based on context it is used
func (o *GetSubscriptionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBody getSubscriptionResponse
swagger:model GetSubscriptionOKBody
*/
type GetSubscriptionOKBody struct {

	// links
	Links *GetSubscriptionOKBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *GetSubscriptionOKBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *GetSubscriptionOKBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// plan information
	PlanInformation *GetSubscriptionOKBodyPlanInformation `json:"planInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscription information
	SubscriptionInformation *GetSubscriptionOKBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this get subscription o k body
func (o *GetSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get subscription o k body based on the context it is used
func (o *GetSubscriptionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyLinks get subscription o k body links
swagger:model GetSubscriptionOKBodyLinks
*/
type GetSubscriptionOKBodyLinks struct {

	// activate
	Activate *GetSubscriptionOKBodyLinksActivate `json:"activate,omitempty"`

	// cancel
	Cancel *GetSubscriptionOKBodyLinksCancel `json:"cancel,omitempty"`

	// self
	Self *GetSubscriptionOKBodyLinksSelf `json:"self,omitempty"`

	// suspend
	Suspend *GetSubscriptionOKBodyLinksSuspend `json:"suspend,omitempty"`
}

// Validate validates this get subscription o k body links
func (o *GetSubscriptionOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyLinks) validateActivate(formats strfmt.Registry) error {
	if swag.IsZero(o.Activate) { // not required
		return nil
	}

	if o.Activate != nil {
		if err := o.Activate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) validateCancel(formats strfmt.Registry) error {
	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) validateSuspend(formats strfmt.Registry) error {
	if swag.IsZero(o.Suspend) { // not required
		return nil
	}

	if o.Suspend != nil {
		if err := o.Suspend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get subscription o k body links based on the context it is used
func (o *GetSubscriptionOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuspend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyLinks) contextValidateActivate(ctx context.Context, formats strfmt.Registry) error {

	if o.Activate != nil {

		if swag.IsZero(o.Activate) { // not required
			return nil
		}

		if err := o.Activate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) contextValidateCancel(ctx context.Context, formats strfmt.Registry) error {

	if o.Cancel != nil {

		if swag.IsZero(o.Cancel) { // not required
			return nil
		}

		if err := o.Cancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyLinks) contextValidateSuspend(ctx context.Context, formats strfmt.Registry) error {

	if o.Suspend != nil {

		if swag.IsZero(o.Suspend) { // not required
			return nil
		}

		if err := o.Suspend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyLinksActivate get subscription o k body links activate
swagger:model GetSubscriptionOKBodyLinksActivate
*/
type GetSubscriptionOKBodyLinksActivate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get subscription o k body links activate
func (o *GetSubscriptionOKBodyLinksActivate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body links activate based on context it is used
func (o *GetSubscriptionOKBodyLinksActivate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksActivate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksActivate) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyLinksActivate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyLinksCancel get subscription o k body links cancel
swagger:model GetSubscriptionOKBodyLinksCancel
*/
type GetSubscriptionOKBodyLinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get subscription o k body links cancel
func (o *GetSubscriptionOKBodyLinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body links cancel based on context it is used
func (o *GetSubscriptionOKBodyLinksCancel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksCancel) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyLinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyLinksSelf get subscription o k body links self
swagger:model GetSubscriptionOKBodyLinksSelf
*/
type GetSubscriptionOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get subscription o k body links self
func (o *GetSubscriptionOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body links self based on context it is used
func (o *GetSubscriptionOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyLinksSuspend get subscription o k body links suspend
swagger:model GetSubscriptionOKBodyLinksSuspend
*/
type GetSubscriptionOKBodyLinksSuspend struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get subscription o k body links suspend
func (o *GetSubscriptionOKBodyLinksSuspend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body links suspend based on context it is used
func (o *GetSubscriptionOKBodyLinksSuspend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksSuspend) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyLinksSuspend) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyLinksSuspend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyOrderInformation get subscription o k body order information
swagger:model GetSubscriptionOKBodyOrderInformation
*/
type GetSubscriptionOKBodyOrderInformation struct {

	// amount details
	AmountDetails *GetSubscriptionOKBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *GetSubscriptionOKBodyOrderInformationBillTo `json:"billTo,omitempty"`
}

// Validate validates this get subscription o k body order information
func (o *GetSubscriptionOKBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get subscription o k body order information based on the context it is used
func (o *GetSubscriptionOKBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyOrderInformationAmountDetails get subscription o k body order information amount details
swagger:model GetSubscriptionOKBodyOrderInformationAmountDetails
*/
type GetSubscriptionOKBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this get subscription o k body order information amount details
func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get subscription o k body order information amount details based on context it is used
func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyOrderInformationBillTo get subscription o k body order information bill to
swagger:model GetSubscriptionOKBodyOrderInformationBillTo
*/
type GetSubscriptionOKBodyOrderInformationBillTo struct {

	// Customer's first name.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`
}

// Validate validates this get subscription o k body order information bill to
func (o *GetSubscriptionOKBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get subscription o k body order information bill to based on context it is used
func (o *GetSubscriptionOKBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyPaymentInformation get subscription o k body payment information
swagger:model GetSubscriptionOKBodyPaymentInformation
*/
type GetSubscriptionOKBodyPaymentInformation struct {

	// customer
	Customer *GetSubscriptionOKBodyPaymentInformationCustomer `json:"customer,omitempty"`
}

// Validate validates this get subscription o k body payment information
func (o *GetSubscriptionOKBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get subscription o k body payment information based on the context it is used
func (o *GetSubscriptionOKBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyPaymentInformationCustomer get subscription o k body payment information customer
swagger:model GetSubscriptionOKBodyPaymentInformationCustomer
*/
type GetSubscriptionOKBodyPaymentInformationCustomer struct {

	// Unique identifier for the Customer token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this get subscription o k body payment information customer
func (o *GetSubscriptionOKBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyPaymentInformationCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getSubscriptionOK"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get subscription o k body payment information customer based on context it is used
func (o *GetSubscriptionOKBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyPlanInformation get subscription o k body plan information
swagger:model GetSubscriptionOKBodyPlanInformation
*/
type GetSubscriptionOKBodyPlanInformation struct {

	// billing cycles
	BillingCycles *GetSubscriptionOKBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	BillingPeriod *GetSubscriptionOKBodyPlanInformationBillingPeriod `json:"billingPeriod,omitempty"`

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this get subscription o k body plan information
func (o *GetSubscriptionOKBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) validateBillingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"planInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get subscription o k body plan information based on the context it is used
func (o *GetSubscriptionOKBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBodyPlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if swag.IsZero(o.BillingPeriod) { // not required
			return nil
		}

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSubscriptionOK" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyPlanInformationBillingCycles get subscription o k body plan information billing cycles
swagger:model GetSubscriptionOKBodyPlanInformationBillingCycles
*/
type GetSubscriptionOKBodyPlanInformationBillingCycles struct {

	// Current billing cycle
	//
	Current string `json:"current,omitempty"`

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this get subscription o k body plan information billing cycles
func (o *GetSubscriptionOKBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body plan information billing cycles based on context it is used
func (o *GetSubscriptionOKBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodyPlanInformationBillingPeriod Billing Frequency
//
swagger:model GetSubscriptionOKBodyPlanInformationBillingPeriod
*/
type GetSubscriptionOKBodyPlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this get subscription o k body plan information billing period
func (o *GetSubscriptionOKBodyPlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get subscription o k body plan information billing period based on context it is used
func (o *GetSubscriptionOKBodyPlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyPlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyPlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSubscriptionOKBodySubscriptionInformation get subscription o k body subscription information
swagger:model GetSubscriptionOKBodySubscriptionInformation
*/
type GetSubscriptionOKBodySubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// Plan Id.
	//
	// Max Length: 26
	PlanID string `json:"planId,omitempty"`

	// Start date of the Subscription
	//
	// Start date will be in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	// The T separates the date and the time. The Z indicates UTC.
	//
	// **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.).
	//
	StartDate string `json:"startDate,omitempty"`

	// Subscription Status:
	// - `PENDING`
	// - `ACTIVE`
	// - `FAILED`
	// - `COMPLETED`
	// - `DELINQUENT`
	// - `SUSPENDED`
	// - `CANCELLED`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get subscription o k body subscription information
func (o *GetSubscriptionOKBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodySubscriptionInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"subscriptionInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionOKBodySubscriptionInformation) validatePlanID(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanID) { // not required
		return nil
	}

	if err := validate.MaxLength("getSubscriptionOK"+"."+"subscriptionInformation"+"."+"planId", "body", o.PlanID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get subscription o k body subscription information based on context it is used
func (o *GetSubscriptionOKBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
