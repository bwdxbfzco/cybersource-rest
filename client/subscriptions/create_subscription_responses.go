// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateSubscriptionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateSubscriptionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rbs/v1/subscriptions] createSubscription", response, response.Code())
	}
}

// NewCreateSubscriptionCreated creates a CreateSubscriptionCreated with default headers values
func NewCreateSubscriptionCreated() *CreateSubscriptionCreated {
	return &CreateSubscriptionCreated{}
}

/*
CreateSubscriptionCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreateSubscriptionCreated struct {
	Payload *CreateSubscriptionCreatedBody
}

// IsSuccess returns true when this create subscription created response has a 2xx status code
func (o *CreateSubscriptionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create subscription created response has a 3xx status code
func (o *CreateSubscriptionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription created response has a 4xx status code
func (o *CreateSubscriptionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription created response has a 5xx status code
func (o *CreateSubscriptionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription created response a status code equal to that given
func (o *CreateSubscriptionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create subscription created response
func (o *CreateSubscriptionCreated) Code() int {
	return 201
}

func (o *CreateSubscriptionCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionCreated %s", 201, payload)
}

func (o *CreateSubscriptionCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionCreated %s", 201, payload)
}

func (o *CreateSubscriptionCreated) GetPayload() *CreateSubscriptionCreatedBody {
	return o.Payload
}

func (o *CreateSubscriptionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSubscriptionCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionBadRequest creates a CreateSubscriptionBadRequest with default headers values
func NewCreateSubscriptionBadRequest() *CreateSubscriptionBadRequest {
	return &CreateSubscriptionBadRequest{}
}

/*
CreateSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreateSubscriptionBadRequest struct {
	Payload *CreateSubscriptionBadRequestBody
}

// IsSuccess returns true when this create subscription bad request response has a 2xx status code
func (o *CreateSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription bad request response has a 3xx status code
func (o *CreateSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription bad request response has a 4xx status code
func (o *CreateSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription bad request response has a 5xx status code
func (o *CreateSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription bad request response a status code equal to that given
func (o *CreateSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create subscription bad request response
func (o *CreateSubscriptionBadRequest) Code() int {
	return 400
}

func (o *CreateSubscriptionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionBadRequest %s", 400, payload)
}

func (o *CreateSubscriptionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionBadRequest %s", 400, payload)
}

func (o *CreateSubscriptionBadRequest) GetPayload() *CreateSubscriptionBadRequestBody {
	return o.Payload
}

func (o *CreateSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionBadGateway creates a CreateSubscriptionBadGateway with default headers values
func NewCreateSubscriptionBadGateway() *CreateSubscriptionBadGateway {
	return &CreateSubscriptionBadGateway{}
}

/*
CreateSubscriptionBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateSubscriptionBadGateway struct {
	Payload *CreateSubscriptionBadGatewayBody
}

// IsSuccess returns true when this create subscription bad gateway response has a 2xx status code
func (o *CreateSubscriptionBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription bad gateway response has a 3xx status code
func (o *CreateSubscriptionBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription bad gateway response has a 4xx status code
func (o *CreateSubscriptionBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription bad gateway response has a 5xx status code
func (o *CreateSubscriptionBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create subscription bad gateway response a status code equal to that given
func (o *CreateSubscriptionBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create subscription bad gateway response
func (o *CreateSubscriptionBadGateway) Code() int {
	return 502
}

func (o *CreateSubscriptionBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionBadGateway %s", 502, payload)
}

func (o *CreateSubscriptionBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /rbs/v1/subscriptions][%d] createSubscriptionBadGateway %s", 502, payload)
}

func (o *CreateSubscriptionBadGateway) GetPayload() *CreateSubscriptionBadGatewayBody {
	return o.Payload
}

func (o *CreateSubscriptionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSubscriptionBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateSubscriptionBadGatewayBody create subscription bad gateway body
swagger:model CreateSubscriptionBadGatewayBody
*/
type CreateSubscriptionBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create subscription bad gateway body
func (o *CreateSubscriptionBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription bad gateway body based on context it is used
func (o *CreateSubscriptionBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionBadRequestBody create subscription bad request body
swagger:model CreateSubscriptionBadRequestBody
*/
type CreateSubscriptionBadRequestBody struct {

	// details
	Details []*CreateSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - CARD_TYPE_NOT_ACCEPTED
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//  - INVALID_CARD_TYPE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create subscription bad request body
func (o *CreateSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create subscription bad request body based on the context it is used
func (o *CreateSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionBadRequestBodyDetailsItems0 create subscription bad request body details items0
swagger:model CreateSubscriptionBadRequestBodyDetailsItems0
*/
type CreateSubscriptionBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create subscription bad request body details items0
func (o *CreateSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription bad request body details items0 based on context it is used
func (o *CreateSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionBody create subscription body
// Example: {"clientReferenceInformation":{"applicationName":"CYBS-SDK","applicationVersion":"v1","code":"TC501713","partner":{"developerId":"ABCD1234","solutionId":"GEF1234"}},"paymentInformation":{"customer":{"id":"C24F5921EB870D99E053AF598E0A4105"}},"processingInformation":{"authorizationOptions":{"initiator":{"type":"merchant"}},"commerceIndicator":"recurring"},"subscriptionInformation":{"name":"Subscription with PlanId","planId":"6868912495476705603955","startDate":"2024-06-11"}}
swagger:model CreateSubscriptionBody
*/
type CreateSubscriptionBody struct {

	// client reference information
	ClientReferenceInformation *CreateSubscriptionParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// order information
	OrderInformation *CreateSubscriptionParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *CreateSubscriptionParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// plan information
	PlanInformation *CreateSubscriptionParamsBodyPlanInformation `json:"planInformation,omitempty"`

	// processing information
	ProcessingInformation *CreateSubscriptionParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// subscription information
	SubscriptionInformation *CreateSubscriptionParamsBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this create subscription body
func (o *CreateSubscriptionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription body based on the context it is used
func (o *CreateSubscriptionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionBody) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBody createSubscriptionResponse
// Example: {"_links":{"activate":{"href":"/rbs/v1/subscriptions/4567000000000123456789/activate","method":"POST"},"cancel":{"href":"/rbs/v1/subscriptions/4567000000000123456789/cancel","method":"POST"},"self":{"href":"/rbs/v1/subscriptions/4567000000000123456789","method":"GET"},"suspend":{"href":"/rbs/v1/subscriptions/4567000000000123456789/suspend","method":"POST"},"update":{"href":"/rbs/v1/subscriptions/4567000000000123456789","method":"PATCH"}},"id":"4567000000000123456789","status":"COMPLETED","submitTimeUtc":"2020-11-01T071957Z","subscriptionInformation":{"code":"SUB1","status":"ACTIVE"}}
swagger:model CreateSubscriptionCreatedBody
*/
type CreateSubscriptionCreatedBody struct {

	// links
	Links *CreateSubscriptionCreatedBodyLinks `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - COMPLETED
	//  - PENDING_REVIEW
	//  - DECLINED
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscription information
	SubscriptionInformation *CreateSubscriptionCreatedBodySubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this create subscription created body
func (o *CreateSubscriptionCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionCreatedBody) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription created body based on the context it is used
func (o *CreateSubscriptionCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBody) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinks create subscription created body links
swagger:model CreateSubscriptionCreatedBodyLinks
*/
type CreateSubscriptionCreatedBodyLinks struct {

	// activate
	Activate *CreateSubscriptionCreatedBodyLinksActivate `json:"activate,omitempty"`

	// cancel
	Cancel *CreateSubscriptionCreatedBodyLinksCancel `json:"cancel,omitempty"`

	// self
	Self *CreateSubscriptionCreatedBodyLinksSelf `json:"self,omitempty"`

	// suspend
	Suspend *CreateSubscriptionCreatedBodyLinksSuspend `json:"suspend,omitempty"`

	// update
	Update *CreateSubscriptionCreatedBodyLinksUpdate `json:"update,omitempty"`
}

// Validate validates this create subscription created body links
func (o *CreateSubscriptionCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) validateActivate(formats strfmt.Registry) error {
	if swag.IsZero(o.Activate) { // not required
		return nil
	}

	if o.Activate != nil {
		if err := o.Activate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) validateCancel(formats strfmt.Registry) error {
	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) validateSuspend(formats strfmt.Registry) error {
	if swag.IsZero(o.Suspend) { // not required
		return nil
	}

	if o.Suspend != nil {
		if err := o.Suspend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) validateUpdate(formats strfmt.Registry) error {
	if swag.IsZero(o.Update) { // not required
		return nil
	}

	if o.Update != nil {
		if err := o.Update.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "update")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription created body links based on the context it is used
func (o *CreateSubscriptionCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuspend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) contextValidateActivate(ctx context.Context, formats strfmt.Registry) error {

	if o.Activate != nil {

		if swag.IsZero(o.Activate) { // not required
			return nil
		}

		if err := o.Activate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) contextValidateCancel(ctx context.Context, formats strfmt.Registry) error {

	if o.Cancel != nil {

		if swag.IsZero(o.Cancel) { // not required
			return nil
		}

		if err := o.Cancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) contextValidateSuspend(ctx context.Context, formats strfmt.Registry) error {

	if o.Suspend != nil {

		if swag.IsZero(o.Suspend) { // not required
			return nil
		}

		if err := o.Suspend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionCreatedBodyLinks) contextValidateUpdate(ctx context.Context, formats strfmt.Registry) error {

	if o.Update != nil {

		if swag.IsZero(o.Update) { // not required
			return nil
		}

		if err := o.Update.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionCreated" + "." + "_links" + "." + "update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinksActivate create subscription created body links activate
swagger:model CreateSubscriptionCreatedBodyLinksActivate
*/
type CreateSubscriptionCreatedBodyLinksActivate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create subscription created body links activate
func (o *CreateSubscriptionCreatedBodyLinksActivate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription created body links activate based on context it is used
func (o *CreateSubscriptionCreatedBodyLinksActivate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksActivate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksActivate) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinksActivate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinksCancel create subscription created body links cancel
swagger:model CreateSubscriptionCreatedBodyLinksCancel
*/
type CreateSubscriptionCreatedBodyLinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create subscription created body links cancel
func (o *CreateSubscriptionCreatedBodyLinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription created body links cancel based on context it is used
func (o *CreateSubscriptionCreatedBodyLinksCancel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksCancel) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinksSelf create subscription created body links self
swagger:model CreateSubscriptionCreatedBodyLinksSelf
*/
type CreateSubscriptionCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create subscription created body links self
func (o *CreateSubscriptionCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription created body links self based on context it is used
func (o *CreateSubscriptionCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinksSuspend create subscription created body links suspend
swagger:model CreateSubscriptionCreatedBodyLinksSuspend
*/
type CreateSubscriptionCreatedBodyLinksSuspend struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create subscription created body links suspend
func (o *CreateSubscriptionCreatedBodyLinksSuspend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription created body links suspend based on context it is used
func (o *CreateSubscriptionCreatedBodyLinksSuspend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksSuspend) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksSuspend) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinksSuspend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodyLinksUpdate create subscription created body links update
swagger:model CreateSubscriptionCreatedBodyLinksUpdate
*/
type CreateSubscriptionCreatedBodyLinksUpdate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create subscription created body links update
func (o *CreateSubscriptionCreatedBodyLinksUpdate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription created body links update based on context it is used
func (o *CreateSubscriptionCreatedBodyLinksUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksUpdate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodyLinksUpdate) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodyLinksUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionCreatedBodySubscriptionInformation create subscription created body subscription information
swagger:model CreateSubscriptionCreatedBodySubscriptionInformation
*/
type CreateSubscriptionCreatedBodySubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Status:
	//  - `PENDING`
	//  - `ACTIVE`
	//  - `FAILED`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create subscription created body subscription information
func (o *CreateSubscriptionCreatedBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionCreatedBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionCreated"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription created body subscription information based on context it is used
func (o *CreateSubscriptionCreatedBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionCreatedBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCreatedBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyClientReferenceInformation create subscription params body client reference information
swagger:model CreateSubscriptionParamsBodyClientReferenceInformation
*/
type CreateSubscriptionParamsBodyClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Version of the CyberSource application or integration used for a transaction.
	//
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateSubscriptionParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create subscription params body client reference information
func (o *CreateSubscriptionParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription params body client reference information based on the context it is used
func (o *CreateSubscriptionParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyClientReferenceInformationPartner create subscription params body client reference information partner
swagger:model CreateSubscriptionParamsBodyClientReferenceInformationPartner
*/
type CreateSubscriptionParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create subscription params body client reference information partner
func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription params body client reference information partner based on context it is used
func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyOrderInformation create subscription params body order information
swagger:model CreateSubscriptionParamsBodyOrderInformation
*/
type CreateSubscriptionParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateSubscriptionParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this create subscription params body order information
func (o *CreateSubscriptionParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription params body order information based on the context it is used
func (o *CreateSubscriptionParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyOrderInformationAmountDetails create subscription params body order information amount details
swagger:model CreateSubscriptionParamsBodyOrderInformationAmountDetails
*/
type CreateSubscriptionParamsBodyOrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this create subscription params body order information amount details
func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription params body order information amount details based on context it is used
func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyPaymentInformation create subscription params body payment information
swagger:model CreateSubscriptionParamsBodyPaymentInformation
*/
type CreateSubscriptionParamsBodyPaymentInformation struct {

	// customer
	Customer *CreateSubscriptionParamsBodyPaymentInformationCustomer `json:"customer,omitempty"`
}

// Validate validates this create subscription params body payment information
func (o *CreateSubscriptionParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription params body payment information based on the context it is used
func (o *CreateSubscriptionParamsBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyPaymentInformationCustomer create subscription params body payment information customer
swagger:model CreateSubscriptionParamsBodyPaymentInformationCustomer
*/
type CreateSubscriptionParamsBodyPaymentInformationCustomer struct {

	// Unique identifier for the Customer token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Required: true
	// Max Length: 32
	// Min Length: 1
	ID *string `json:"id"`
}

// Validate validates this create subscription params body payment information customer
func (o *CreateSubscriptionParamsBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyPaymentInformationCustomer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createSubscriptionRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.MinLength("createSubscriptionRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", *o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", *o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription params body payment information customer based on context it is used
func (o *CreateSubscriptionParamsBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyPlanInformation create subscription params body plan information
swagger:model CreateSubscriptionParamsBodyPlanInformation
*/
type CreateSubscriptionParamsBodyPlanInformation struct {

	// billing cycles
	BillingCycles *CreateSubscriptionParamsBodyPlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	BillingPeriod *CreateSubscriptionParamsBodyPlanInformationBillingPeriod `json:"billingPeriod,omitempty"`
}

// Validate validates this create subscription params body plan information
func (o *CreateSubscriptionParamsBodyPlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyPlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyPlanInformation) validateBillingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription params body plan information based on the context it is used
func (o *CreateSubscriptionParamsBodyPlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyPlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyPlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if swag.IsZero(o.BillingPeriod) { // not required
			return nil
		}

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyPlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyPlanInformationBillingCycles Number of times customer is going to be billed
//
swagger:model CreateSubscriptionParamsBodyPlanInformationBillingCycles
*/
type CreateSubscriptionParamsBodyPlanInformationBillingCycles struct {

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this create subscription params body plan information billing cycles
func (o *CreateSubscriptionParamsBodyPlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription params body plan information billing cycles based on context it is used
func (o *CreateSubscriptionParamsBodyPlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyPlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyPlanInformationBillingPeriod Billing Frequency
//
swagger:model CreateSubscriptionParamsBodyPlanInformationBillingPeriod
*/
type CreateSubscriptionParamsBodyPlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this create subscription params body plan information billing period
func (o *CreateSubscriptionParamsBodyPlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription params body plan information billing period based on context it is used
func (o *CreateSubscriptionParamsBodyPlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyPlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyPlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyProcessingInformation create subscription params body processing information
swagger:model CreateSubscriptionParamsBodyProcessingInformation
*/
type CreateSubscriptionParamsBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`

	// Commerce Indicator is a way to identify the type of transaction. Some payment card companies use this information when determining discount rates.
	//
	// Valid values:
	// - `MOTO`
	// - `RECURRING`
	//
	// Max Length: 20
	CommerceIndicator string `json:"commerceIndicator,omitempty"`
}

// Validate validates this create subscription params body processing information
func (o *CreateSubscriptionParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreateSubscriptionParamsBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"processingInformation"+"."+"commerceIndicator", "body", o.CommerceIndicator, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create subscription params body processing information based on the context it is used
func (o *CreateSubscriptionParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyProcessingInformation) contextValidateAuthorizationOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.AuthorizationOptions != nil {

		if swag.IsZero(o.AuthorizationOptions) { // not required
			return nil
		}

		if err := o.AuthorizationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions create subscription params body processing information authorization options
swagger:model CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions
*/
type CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create subscription params body processing information authorization options
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription params body processing information authorization options based on the context it is used
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSubscriptionRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator create subscription params body processing information authorization options initiator
swagger:model CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator
*/
type CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.
	//
	// Valid values:
	// - **customer**
	// - **merchant**
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create subscription params body processing information authorization options initiator
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create subscription params body processing information authorization options initiator based on context it is used
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateSubscriptionParamsBodySubscriptionInformation create subscription params body subscription information
swagger:model CreateSubscriptionParamsBodySubscriptionInformation
*/
type CreateSubscriptionParamsBodySubscriptionInformation struct {

	// Subscription code is an optional field, If not provided system generates and assign one
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Name
	//
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// Plan Id. Use Plan Id from Create Plan Service.
	//
	// Max Length: 26
	PlanID string `json:"planId,omitempty"`

	// Start date of the Subscription
	//
	// Start date must be in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	// The T separates the date and the time. The Z indicates UTC.
	//
	// Note: Subscription starts on the day provided in UTC.
	//
	// **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.).
	// Subscription will start on August 11,2022.
	//
	// Required: true
	StartDate *string `json:"startDate"`
}

// Validate validates this create subscription params body subscription information
func (o *CreateSubscriptionParamsBodySubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSubscriptionParamsBodySubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodySubscriptionInformation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createSubscriptionRequest"+"."+"subscriptionInformation"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"subscriptionInformation"+"."+"name", "body", *o.Name, 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodySubscriptionInformation) validatePlanID(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSubscriptionRequest"+"."+"subscriptionInformation"+"."+"planId", "body", o.PlanID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateSubscriptionParamsBodySubscriptionInformation) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("createSubscriptionRequest"+"."+"subscriptionInformation"+"."+"startDate", "body", o.StartDate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription params body subscription information based on context it is used
func (o *CreateSubscriptionParamsBodySubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodySubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSubscriptionParamsBodySubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionParamsBodySubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
