// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllSubscriptions1Reader is a Reader for the GetAllSubscriptions1 structure.
type GetAllSubscriptions1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllSubscriptions1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllSubscriptions1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllSubscriptions1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetAllSubscriptions1BadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /rbs/v1/subscriptions] getAllSubscriptions1", response, response.Code())
	}
}

// NewGetAllSubscriptions1OK creates a GetAllSubscriptions1OK with default headers values
func NewGetAllSubscriptions1OK() *GetAllSubscriptions1OK {
	return &GetAllSubscriptions1OK{}
}

/*
GetAllSubscriptions1OK describes a response with status code 200, with default header values.

Successful response.
*/
type GetAllSubscriptions1OK struct {
	Payload *GetAllSubscriptions1OKBody
}

// IsSuccess returns true when this get all subscriptions1 o k response has a 2xx status code
func (o *GetAllSubscriptions1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all subscriptions1 o k response has a 3xx status code
func (o *GetAllSubscriptions1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions1 o k response has a 4xx status code
func (o *GetAllSubscriptions1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions1 o k response has a 5xx status code
func (o *GetAllSubscriptions1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions1 o k response a status code equal to that given
func (o *GetAllSubscriptions1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all subscriptions1 o k response
func (o *GetAllSubscriptions1OK) Code() int {
	return 200
}

func (o *GetAllSubscriptions1OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1OK %s", 200, payload)
}

func (o *GetAllSubscriptions1OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1OK %s", 200, payload)
}

func (o *GetAllSubscriptions1OK) GetPayload() *GetAllSubscriptions1OKBody {
	return o.Payload
}

func (o *GetAllSubscriptions1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSubscriptions1OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptions1BadRequest creates a GetAllSubscriptions1BadRequest with default headers values
func NewGetAllSubscriptions1BadRequest() *GetAllSubscriptions1BadRequest {
	return &GetAllSubscriptions1BadRequest{}
}

/*
GetAllSubscriptions1BadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type GetAllSubscriptions1BadRequest struct {
	Payload *GetAllSubscriptions1BadRequestBody
}

// IsSuccess returns true when this get all subscriptions1 bad request response has a 2xx status code
func (o *GetAllSubscriptions1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions1 bad request response has a 3xx status code
func (o *GetAllSubscriptions1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions1 bad request response has a 4xx status code
func (o *GetAllSubscriptions1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions1 bad request response has a 5xx status code
func (o *GetAllSubscriptions1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions1 bad request response a status code equal to that given
func (o *GetAllSubscriptions1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all subscriptions1 bad request response
func (o *GetAllSubscriptions1BadRequest) Code() int {
	return 400
}

func (o *GetAllSubscriptions1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1BadRequest %s", 400, payload)
}

func (o *GetAllSubscriptions1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1BadRequest %s", 400, payload)
}

func (o *GetAllSubscriptions1BadRequest) GetPayload() *GetAllSubscriptions1BadRequestBody {
	return o.Payload
}

func (o *GetAllSubscriptions1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSubscriptions1BadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptions1BadGateway creates a GetAllSubscriptions1BadGateway with default headers values
func NewGetAllSubscriptions1BadGateway() *GetAllSubscriptions1BadGateway {
	return &GetAllSubscriptions1BadGateway{}
}

/*
GetAllSubscriptions1BadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetAllSubscriptions1BadGateway struct {
	Payload *GetAllSubscriptions1BadGatewayBody
}

// IsSuccess returns true when this get all subscriptions1 bad gateway response has a 2xx status code
func (o *GetAllSubscriptions1BadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions1 bad gateway response has a 3xx status code
func (o *GetAllSubscriptions1BadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions1 bad gateway response has a 4xx status code
func (o *GetAllSubscriptions1BadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions1 bad gateway response has a 5xx status code
func (o *GetAllSubscriptions1BadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get all subscriptions1 bad gateway response a status code equal to that given
func (o *GetAllSubscriptions1BadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get all subscriptions1 bad gateway response
func (o *GetAllSubscriptions1BadGateway) Code() int {
	return 502
}

func (o *GetAllSubscriptions1BadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1BadGateway %s", 502, payload)
}

func (o *GetAllSubscriptions1BadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /rbs/v1/subscriptions][%d] getAllSubscriptions1BadGateway %s", 502, payload)
}

func (o *GetAllSubscriptions1BadGateway) GetPayload() *GetAllSubscriptions1BadGatewayBody {
	return o.Payload
}

func (o *GetAllSubscriptions1BadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSubscriptions1BadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAllSubscriptions1BadGatewayBody get all subscriptions1 bad gateway body
swagger:model GetAllSubscriptions1BadGatewayBody
*/
type GetAllSubscriptions1BadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get all subscriptions1 bad gateway body
func (o *GetAllSubscriptions1BadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 bad gateway body based on context it is used
func (o *GetAllSubscriptions1BadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1BadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1BadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1BadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1BadRequestBody get all subscriptions1 bad request body
swagger:model GetAllSubscriptions1BadRequestBody
*/
type GetAllSubscriptions1BadRequestBody struct {

	// details
	Details []*GetAllSubscriptions1BadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get all subscriptions1 bad request body
func (o *GetAllSubscriptions1BadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1BadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptions1BadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptions1BadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all subscriptions1 bad request body based on the context it is used
func (o *GetAllSubscriptions1BadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1BadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptions1BadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptions1BadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1BadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1BadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1BadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1BadRequestBodyDetailsItems0 get all subscriptions1 bad request body details items0
swagger:model GetAllSubscriptions1BadRequestBodyDetailsItems0
*/
type GetAllSubscriptions1BadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get all subscriptions1 bad request body details items0
func (o *GetAllSubscriptions1BadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 bad request body details items0 based on context it is used
func (o *GetAllSubscriptions1BadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1BadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1BadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1BadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBody getAllSubscriptionsResponse
swagger:model GetAllSubscriptions1OKBody
*/
type GetAllSubscriptions1OKBody struct {

	// links
	Links *GetAllSubscriptions1OKBodyLinks `json:"_links,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// subscriptions
	Subscriptions []*GetAllSubscriptions1OKBodySubscriptionsItems0 `json:"subscriptions"`

	// total number of subscriptions created
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this get all subscriptions1 o k body
func (o *GetAllSubscriptions1OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBody) validateSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Subscriptions); i++ {
		if swag.IsZero(o.Subscriptions[i]) { // not required
			continue
		}

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptions1OK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptions1OK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body based on the context it is used
func (o *GetAllSubscriptions1OKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBody) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Subscriptions); i++ {

		if o.Subscriptions[i] != nil {

			if swag.IsZero(o.Subscriptions[i]) { // not required
				return nil
			}

			if err := o.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptions1OK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptions1OK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBody) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodyLinks get all subscriptions1 o k body links
swagger:model GetAllSubscriptions1OKBodyLinks
*/
type GetAllSubscriptions1OKBodyLinks struct {

	// next
	Next *GetAllSubscriptions1OKBodyLinksNext `json:"next,omitempty"`

	// previous
	Previous *GetAllSubscriptions1OKBodyLinksPrevious `json:"previous,omitempty"`

	// self
	Self *GetAllSubscriptions1OKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get all subscriptions1 o k body links
func (o *GetAllSubscriptions1OKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevious(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(o.Next) { // not required
		return nil
	}

	if o.Next != nil {
		if err := o.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) validatePrevious(formats strfmt.Registry) error {
	if swag.IsZero(o.Previous) { // not required
		return nil
	}

	if o.Previous != nil {
		if err := o.Previous.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "previous")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "previous")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body links based on the context it is used
func (o *GetAllSubscriptions1OKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePrevious(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if o.Next != nil {

		if swag.IsZero(o.Next) { // not required
			return nil
		}

		if err := o.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) contextValidatePrevious(ctx context.Context, formats strfmt.Registry) error {

	if o.Previous != nil {

		if swag.IsZero(o.Previous) { // not required
			return nil
		}

		if err := o.Previous.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "previous")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "previous")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllSubscriptions1OK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodyLinksNext get all subscriptions1 o k body links next
swagger:model GetAllSubscriptions1OKBodyLinksNext
*/
type GetAllSubscriptions1OKBodyLinksNext struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body links next
func (o *GetAllSubscriptions1OKBodyLinksNext) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body links next based on context it is used
func (o *GetAllSubscriptions1OKBodyLinksNext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksNext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksNext) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodyLinksNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodyLinksPrevious get all subscriptions1 o k body links previous
swagger:model GetAllSubscriptions1OKBodyLinksPrevious
*/
type GetAllSubscriptions1OKBodyLinksPrevious struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body links previous
func (o *GetAllSubscriptions1OKBodyLinksPrevious) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body links previous based on context it is used
func (o *GetAllSubscriptions1OKBodyLinksPrevious) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksPrevious) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksPrevious) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodyLinksPrevious
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodyLinksSelf get all subscriptions1 o k body links self
swagger:model GetAllSubscriptions1OKBodyLinksSelf
*/
type GetAllSubscriptions1OKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body links self
func (o *GetAllSubscriptions1OKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body links self based on context it is used
func (o *GetAllSubscriptions1OKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0 Subscription list
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0 struct {

	// links
	Links *GetAllSubscriptions1OKBodySubscriptionsItems0Links `json:"_links,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation `json:"paymentInformation,omitempty"`

	// plan information
	PlanInformation *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation `json:"planInformation,omitempty"`

	// subscription information
	SubscriptionInformation *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation `json:"subscriptionInformation,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscriptionInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validatePlanInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanInformation) { // not required
		return nil
	}

	if o.PlanInformation != nil {
		if err := o.PlanInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) validateSubscriptionInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.SubscriptionInformation) { // not required
		return nil
	}

	if o.SubscriptionInformation != nil {
		if err := o.SubscriptionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body subscriptions items0 based on the context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlanInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubscriptionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) contextValidatePlanInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PlanInformation != nil {

		if swag.IsZero(o.PlanInformation) { // not required
			return nil
		}

		if err := o.PlanInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) contextValidateSubscriptionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SubscriptionInformation != nil {

		if swag.IsZero(o.SubscriptionInformation) { // not required
			return nil
		}

		if err := o.SubscriptionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscriptionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscriptionInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0Links get all subscriptions1 o k body subscriptions items0 links
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0Links
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0Links struct {

	// activate
	Activate *GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate `json:"activate,omitempty"`

	// cancel
	Cancel *GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel `json:"cancel,omitempty"`

	// self
	Self *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf `json:"self,omitempty"`

	// suspend
	Suspend *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend `json:"suspend,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 links
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) validateActivate(formats strfmt.Registry) error {
	if swag.IsZero(o.Activate) { // not required
		return nil
	}

	if o.Activate != nil {
		if err := o.Activate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) validateCancel(formats strfmt.Registry) error {
	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) validateSuspend(formats strfmt.Registry) error {
	if swag.IsZero(o.Suspend) { // not required
		return nil
	}

	if o.Suspend != nil {
		if err := o.Suspend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body subscriptions items0 links based on the context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuspend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) contextValidateActivate(ctx context.Context, formats strfmt.Registry) error {

	if o.Activate != nil {

		if swag.IsZero(o.Activate) { // not required
			return nil
		}

		if err := o.Activate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "activate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "activate")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) contextValidateCancel(ctx context.Context, formats strfmt.Registry) error {

	if o.Cancel != nil {

		if swag.IsZero(o.Cancel) { // not required
			return nil
		}

		if err := o.Cancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) contextValidateSuspend(ctx context.Context, formats strfmt.Registry) error {

	if o.Suspend != nil {

		if swag.IsZero(o.Suspend) { // not required
			return nil
		}

		if err := o.Suspend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "suspend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "suspend")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0Links) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate get all subscriptions1 o k body subscriptions items0 links activate
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 links activate
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 links activate based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0LinksActivate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel get all subscriptions1 o k body subscriptions items0 links cancel
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 links cancel
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 links cancel based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0LinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf get all subscriptions1 o k body subscriptions items0 links self
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 links self
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 links self based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend get all subscriptions1 o k body subscriptions items0 links suspend
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 links suspend
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 links suspend based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0LinksSuspend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation get all subscriptions1 o k body subscriptions items0 order information
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation struct {

	// amount details
	AmountDetails *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo `json:"billTo,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 order information
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body subscriptions items0 order information based on the context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails get all subscriptions1 o k body subscriptions items0 order information amount details
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails struct {

	// Billing amount for the billing period.
	//
	// Max Length: 19
	BillingAmount string `json:"billingAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Subscription setup fee
	//
	// Max Length: 19
	SetupFee string `json:"setupFee,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 order information amount details
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSetupFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) validateBillingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"billingAmount", "body", o.BillingAmount, 19); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) validateSetupFee(formats strfmt.Registry) error {
	if swag.IsZero(o.SetupFee) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"setupFee", "body", o.SetupFee, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 order information amount details based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo get all subscriptions1 o k body subscriptions items0 order information bill to
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo struct {

	// Customer's first name.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 order information bill to
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 order information bill to based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0OrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation get all subscriptions1 o k body subscriptions items0 payment information
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation struct {

	// customer
	Customer *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer `json:"customer,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 payment information
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body subscriptions items0 payment information based on the context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer get all subscriptions1 o k body subscriptions items0 payment information customer
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer struct {

	// Unique identifier for the Customer token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 payment information customer
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 payment information customer based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0PaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation get all subscriptions1 o k body subscriptions items0 plan information
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation struct {

	// billing cycles
	BillingCycles *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles `json:"billingCycles,omitempty"`

	// billing period
	BillingPeriod *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod `json:"billingPeriod,omitempty"`

	// Plan code
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Plan name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 plan information
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingCycles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) validateBillingCycles(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingCycles) { // not required
		return nil
	}

	if o.BillingCycles != nil {
		if err := o.BillingCycles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) validateBillingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingPeriod) { // not required
		return nil
	}

	if o.BillingPeriod != nil {
		if err := o.BillingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("planInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("planInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get all subscriptions1 o k body subscriptions items0 plan information based on the context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillingCycles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) contextValidateBillingCycles(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingCycles != nil {

		if swag.IsZero(o.BillingCycles) { // not required
			return nil
		}

		if err := o.BillingCycles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation" + "." + "billingCycles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation" + "." + "billingCycles")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) contextValidateBillingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if o.BillingPeriod != nil {

		if swag.IsZero(o.BillingPeriod) { // not required
			return nil
		}

		if err := o.BillingPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planInformation" + "." + "billingPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planInformation" + "." + "billingPeriod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles get all subscriptions1 o k body subscriptions items0 plan information billing cycles
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles struct {

	// Current billing cycle
	//
	Current string `json:"current,omitempty"`

	// Describe total number of billing cycles
	//
	Total string `json:"total,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 plan information billing cycles
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 plan information billing cycles based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingCycles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod Billing Frequency
//
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod struct {

	// Example:
	// - If length=1 & unit=month then charge every month
	// - If length=7 & unit=day then charge every 7th day
	//
	Length string `json:"length,omitempty"`

	// Calendar unit values.
	//   possible values:
	//   - `D` - day
	//   - `M` - month
	//   - `W` - week
	//   - `Y` - year
	//
	Unit string `json:"unit,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 plan information billing period
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 plan information billing period based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0PlanInformationBillingPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation get all subscriptions1 o k body subscriptions items0 subscription information
swagger:model GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation
*/
type GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation struct {

	// Subscription code.
	//
	// Max Length: 10
	Code string `json:"code,omitempty"`

	// Subscription Name
	//
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// Plan Id.
	//
	// Max Length: 26
	PlanID string `json:"planId,omitempty"`

	// Start date of the Subscription
	//
	// Start date will be in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	// The T separates the date and the time. The Z indicates UTC.
	//
	// **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.).
	//
	StartDate string `json:"startDate,omitempty"`

	// Subscription Status:
	// - `PENDING`
	// - `ACTIVE`
	// - `FAILED`
	// - `COMPLETED`
	// - `DELINQUENT`
	// - `SUSPENDED`
	// - `CANCELLED`
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get all subscriptions1 o k body subscriptions items0 subscription information
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("subscriptionInformation"+"."+"code", "body", o.Code, 10); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("subscriptionInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) validatePlanID(formats strfmt.Registry) error {
	if swag.IsZero(o.PlanID) { // not required
		return nil
	}

	if err := validate.MaxLength("subscriptionInformation"+"."+"planId", "body", o.PlanID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all subscriptions1 o k body subscriptions items0 subscription information based on context it is used
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptions1OKBodySubscriptionsItems0SubscriptionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
