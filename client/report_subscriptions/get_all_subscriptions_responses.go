// Code generated by go-swagger; DO NOT EDIT.

package report_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllSubscriptionsReader is a Reader for the GetAllSubscriptions structure.
type GetAllSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllSubscriptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reporting/v3/report-subscriptions] getAllSubscriptions", response, response.Code())
	}
}

// NewGetAllSubscriptionsOK creates a GetAllSubscriptionsOK with default headers values
func NewGetAllSubscriptionsOK() *GetAllSubscriptionsOK {
	return &GetAllSubscriptionsOK{}
}

/*
GetAllSubscriptionsOK describes a response with status code 200, with default header values.

Ok
*/
type GetAllSubscriptionsOK struct {
	Payload *GetAllSubscriptionsOKBody
}

// IsSuccess returns true when this get all subscriptions o k response has a 2xx status code
func (o *GetAllSubscriptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all subscriptions o k response has a 3xx status code
func (o *GetAllSubscriptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions o k response has a 4xx status code
func (o *GetAllSubscriptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all subscriptions o k response has a 5xx status code
func (o *GetAllSubscriptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions o k response a status code equal to that given
func (o *GetAllSubscriptionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all subscriptions o k response
func (o *GetAllSubscriptionsOK) Code() int {
	return 200
}

func (o *GetAllSubscriptionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsOK %s", 200, payload)
}

func (o *GetAllSubscriptionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsOK %s", 200, payload)
}

func (o *GetAllSubscriptionsOK) GetPayload() *GetAllSubscriptionsOKBody {
	return o.Payload
}

func (o *GetAllSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSubscriptionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsBadRequest creates a GetAllSubscriptionsBadRequest with default headers values
func NewGetAllSubscriptionsBadRequest() *GetAllSubscriptionsBadRequest {
	return &GetAllSubscriptionsBadRequest{}
}

/*
GetAllSubscriptionsBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type GetAllSubscriptionsBadRequest struct {
	Payload *GetAllSubscriptionsBadRequestBody
}

// IsSuccess returns true when this get all subscriptions bad request response has a 2xx status code
func (o *GetAllSubscriptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions bad request response has a 3xx status code
func (o *GetAllSubscriptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions bad request response has a 4xx status code
func (o *GetAllSubscriptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions bad request response has a 5xx status code
func (o *GetAllSubscriptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions bad request response a status code equal to that given
func (o *GetAllSubscriptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all subscriptions bad request response
func (o *GetAllSubscriptionsBadRequest) Code() int {
	return 400
}

func (o *GetAllSubscriptionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetAllSubscriptionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsBadRequest %s", 400, payload)
}

func (o *GetAllSubscriptionsBadRequest) GetPayload() *GetAllSubscriptionsBadRequestBody {
	return o.Payload
}

func (o *GetAllSubscriptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllSubscriptionsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllSubscriptionsNotFound creates a GetAllSubscriptionsNotFound with default headers values
func NewGetAllSubscriptionsNotFound() *GetAllSubscriptionsNotFound {
	return &GetAllSubscriptionsNotFound{}
}

/*
GetAllSubscriptionsNotFound describes a response with status code 404, with default header values.

Subscriptions not found
*/
type GetAllSubscriptionsNotFound struct {
}

// IsSuccess returns true when this get all subscriptions not found response has a 2xx status code
func (o *GetAllSubscriptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all subscriptions not found response has a 3xx status code
func (o *GetAllSubscriptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all subscriptions not found response has a 4xx status code
func (o *GetAllSubscriptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all subscriptions not found response has a 5xx status code
func (o *GetAllSubscriptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all subscriptions not found response a status code equal to that given
func (o *GetAllSubscriptionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all subscriptions not found response
func (o *GetAllSubscriptionsNotFound) Code() int {
	return 404
}

func (o *GetAllSubscriptionsNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsNotFound", 404)
}

func (o *GetAllSubscriptionsNotFound) String() string {
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions][%d] getAllSubscriptionsNotFound", 404)
}

func (o *GetAllSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetAllSubscriptionsBadRequestBody reportingV3ReportSubscriptionsGet400Response
//
// HTTP status code for client application
swagger:model GetAllSubscriptionsBadRequestBody
*/
type GetAllSubscriptionsBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetAllSubscriptionsBadRequestBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get all subscriptions bad request body
func (o *GetAllSubscriptionsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getAllSubscriptionsBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptionsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptionsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAllSubscriptionsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getAllSubscriptionsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptionsBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getAllSubscriptionsBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptionsBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getAllSubscriptionsBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getAllSubscriptionsBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get all subscriptions bad request body based on the context it is used
func (o *GetAllSubscriptionsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptionsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptionsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptionsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptionsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptionsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptionsBadRequestBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetAllSubscriptionsBadRequestBodyDetailsItems0
*/
type GetAllSubscriptionsBadRequestBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get all subscriptions bad request body details items0
func (o *GetAllSubscriptionsBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions bad request body details items0 based on context it is used
func (o *GetAllSubscriptionsBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptionsBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptionsBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptionsBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptionsOKBody reportingV3ReportSubscriptionsGet200Response
swagger:model GetAllSubscriptionsOKBody
*/
type GetAllSubscriptionsOKBody struct {

	// subscriptions
	Subscriptions []*GetAllSubscriptionsOKBodySubscriptionsItems0 `json:"subscriptions"`
}

// Validate validates this get all subscriptions o k body
func (o *GetAllSubscriptionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsOKBody) validateSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(o.Subscriptions); i++ {
		if swag.IsZero(o.Subscriptions[i]) { // not required
			continue
		}

		if o.Subscriptions[i] != nil {
			if err := o.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all subscriptions o k body based on the context it is used
func (o *GetAllSubscriptionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsOKBody) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Subscriptions); i++ {

		if o.Subscriptions[i] != nil {

			if swag.IsZero(o.Subscriptions[i]) { // not required
				return nil
			}

			if err := o.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllSubscriptionsOK" + "." + "subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptionsOKBodySubscriptionsItems0 Subscription Details
swagger:model GetAllSubscriptionsOKBodySubscriptionsItems0
*/
type GetAllSubscriptionsOKBodySubscriptionsItems0 struct {

	// Id for the selected group.
	// Example: 12345
	GroupID string `json:"groupId,omitempty"`

	// Selected Organization Id
	// Example: Merchant 1
	OrganizationID string `json:"organizationId,omitempty"`

	// Report Definition Id
	// Example: 210
	ReportDefinitionID string `json:"reportDefinitionId,omitempty"`

	// Report Definition Class
	// Example: TransactionRequestDetailClass
	ReportDefinitionName string `json:"reportDefinitionName,omitempty"`

	// List of all fields String values
	// Example: ["Request.RequestID","Request.TransactionDate","Request.MerchantID"]
	ReportFields []string `json:"reportFields"`

	// List of filters to apply
	// Example: {"Application.Name":["ics_auth","ics_bill"]}
	ReportFilters map[string][]string `json:"reportFilters,omitempty"`

	// 'Report Frequency'
	// **NOTE: Do not document USER_DEFINED Frequency field in developer center**
	//
	// Valid values:
	// - DAILY
	// - WEEKLY
	// - MONTHLY
	// - USER_DEFINED
	//
	// Example: DAILY
	ReportFrequency string `json:"reportFrequency,omitempty"`

	// If the reportFrequency is User-defined, reportInterval should be in **ISO 8601 time format**
	// Please refer the following link to know more about ISO 8601 format.[Rfc Time Format](https://en.wikipedia.org/wiki/ISO_8601#Durations)
	//
	// **Example time format for 2 hours and 30 Mins:**
	//   - PT2H30M
	// **NOTE: Do not document reportInterval field in developer center**
	//
	// Pattern: ^PT((([1-9]|1[0-9]|2[0-3])H(([1-9]|[1-4][0-9]|5[0-9])M)?)|((([1-9]|1[0-9]|2[0-3])H)?([1-9]|[1-4][0-9]|5[0-9])M))$
	ReportInterval string `json:"reportInterval,omitempty"`

	// Report Format
	//
	// Valid values:
	// - application/xml
	// - text/csv
	//
	// Example: application/xml
	ReportMimeType string `json:"reportMimeType,omitempty"`

	// Report Name
	// Example: My Transaction Request Detail Report
	ReportName string `json:"reportName,omitempty"`

	// report preferences
	ReportPreferences *GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences `json:"reportPreferences,omitempty"`

	// Start Day
	// Example: 1
	StartDay int32 `json:"startDay,omitempty"`

	// Start Time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Time Zone
	// Example: America/Chicago
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this get all subscriptions o k body subscriptions items0
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReportInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReportPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) validateReportInterval(formats strfmt.Registry) error {
	if swag.IsZero(o.ReportInterval) { // not required
		return nil
	}

	if err := validate.Pattern("reportInterval", "body", o.ReportInterval, `^PT((([1-9]|1[0-9]|2[0-3])H(([1-9]|[1-4][0-9]|5[0-9])M)?)|((([1-9]|1[0-9]|2[0-3])H)?([1-9]|[1-4][0-9]|5[0-9])M))$`); err != nil {
		return err
	}

	return nil
}

func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) validateReportPreferences(formats strfmt.Registry) error {
	if swag.IsZero(o.ReportPreferences) { // not required
		return nil
	}

	if o.ReportPreferences != nil {
		if err := o.ReportPreferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reportPreferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reportPreferences")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get all subscriptions o k body subscriptions items0 based on the context it is used
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReportPreferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) contextValidateReportPreferences(ctx context.Context, formats strfmt.Registry) error {

	if o.ReportPreferences != nil {

		if swag.IsZero(o.ReportPreferences) { // not required
			return nil
		}

		if err := o.ReportPreferences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reportPreferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reportPreferences")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptionsOKBodySubscriptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences Report Preferences
swagger:model GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences
*/
type GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences struct {

	// Specify the field naming convention to be followed in reports (applicable to only csv report formats)
	//
	// Valid values:
	// - SOAPI
	// - SCMP
	//
	FieldNameConvention string `json:"fieldNameConvention,omitempty"`

	// Indicator to determine whether negative sign infront of amount for all refunded transaction
	SignedAmounts bool `json:"signedAmounts,omitempty"`
}

// Validate validates this get all subscriptions o k body subscriptions items0 report preferences
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all subscriptions o k body subscriptions items0 report preferences based on context it is used
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences) UnmarshalBinary(b []byte) error {
	var res GetAllSubscriptionsOKBodySubscriptionsItems0ReportPreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
