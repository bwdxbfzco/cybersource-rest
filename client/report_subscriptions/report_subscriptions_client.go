// Code generated by go-swagger; DO NOT EDIT.

package report_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new report subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new report subscriptions API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new report subscriptions API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for report subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationHalJSON sets the Accept header to "application/hal+json".
func WithAcceptApplicationHalJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStandardOrClassicSubscription(params *CreateStandardOrClassicSubscriptionParams, opts ...ClientOption) (*CreateStandardOrClassicSubscriptionOK, *CreateStandardOrClassicSubscriptionCreated, error)

	CreateSubscriptionReport(params *CreateSubscriptionReportParams, opts ...ClientOption) (*CreateSubscriptionReportOK, error)

	DeleteSubscription(params *DeleteSubscriptionParams, opts ...ClientOption) (*DeleteSubscriptionOK, error)

	GetAllSubscriptions(params *GetAllSubscriptionsParams, opts ...ClientOption) (*GetAllSubscriptionsOK, error)

	GetSubscriptionReport(params *GetSubscriptionReportParams, opts ...ClientOption) (*GetSubscriptionReportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateStandardOrClassicSubscription creates a standard or classic subscription

Create or update an already existing classic or standard subscription.
*/
func (a *Client) CreateStandardOrClassicSubscription(params *CreateStandardOrClassicSubscriptionParams, opts ...ClientOption) (*CreateStandardOrClassicSubscriptionOK, *CreateStandardOrClassicSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStandardOrClassicSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStandardOrClassicSubscription",
		Method:             "PUT",
		PathPattern:        "/reporting/v3/predefined-report-subscriptions",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStandardOrClassicSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStandardOrClassicSubscriptionOK:
		return value, nil, nil
	case *CreateStandardOrClassicSubscriptionCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for report_subscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionReport creates report subscription for a report name by organization

Create a report subscription for your organization. The report name must be unique.
*/
func (a *Client) CreateSubscriptionReport(params *CreateSubscriptionReportParams, opts ...ClientOption) (*CreateSubscriptionReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionReport",
		Method:             "PUT",
		PathPattern:        "/reporting/v3/report-subscriptions",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSubscriptionReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscriptionReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubscription deletes subscription of a report name by organization

Delete a report subscription for your organization. You must know the unique name of the report you want to delete.
*/
func (a *Client) DeleteSubscription(params *DeleteSubscriptionParams, opts ...ClientOption) (*DeleteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/reporting/v3/report-subscriptions/{reportName}",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubscriptions gets all subscriptions

View a summary of all report subscriptions.
*/
func (a *Client) GetAllSubscriptions(params *GetAllSubscriptionsParams, opts ...ClientOption) (*GetAllSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubscriptions",
		Method:             "GET",
		PathPattern:        "/reporting/v3/report-subscriptions",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionReport gets subscription for report name

View the details of a report subscription, such as the report format or report frequency, using the report's unique name.
*/
func (a *Client) GetSubscriptionReport(params *GetSubscriptionReportParams, opts ...ClientOption) (*GetSubscriptionReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionReport",
		Method:             "GET",
		PathPattern:        "/reporting/v3/report-subscriptions/{reportName}",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubscriptionReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
