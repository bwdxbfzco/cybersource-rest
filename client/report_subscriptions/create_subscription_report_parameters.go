// Code generated by go-swagger; DO NOT EDIT.

package report_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateSubscriptionReportParams creates a new CreateSubscriptionReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateSubscriptionReportParams() *CreateSubscriptionReportParams {
	return &CreateSubscriptionReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSubscriptionReportParamsWithTimeout creates a new CreateSubscriptionReportParams object
// with the ability to set a timeout on a request.
func NewCreateSubscriptionReportParamsWithTimeout(timeout time.Duration) *CreateSubscriptionReportParams {
	return &CreateSubscriptionReportParams{
		timeout: timeout,
	}
}

// NewCreateSubscriptionReportParamsWithContext creates a new CreateSubscriptionReportParams object
// with the ability to set a context for a request.
func NewCreateSubscriptionReportParamsWithContext(ctx context.Context) *CreateSubscriptionReportParams {
	return &CreateSubscriptionReportParams{
		Context: ctx,
	}
}

// NewCreateSubscriptionReportParamsWithHTTPClient creates a new CreateSubscriptionReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateSubscriptionReportParamsWithHTTPClient(client *http.Client) *CreateSubscriptionReportParams {
	return &CreateSubscriptionReportParams{
		HTTPClient: client,
	}
}

/*
CreateSubscriptionReportParams contains all the parameters to send to the API endpoint

	for the create subscription report operation.

	Typically these are written to a http.Request.
*/
type CreateSubscriptionReportParams struct {

	/* CreateReportSubscriptionRequest.

	   Report subscription request payload
	*/
	CreateReportSubscriptionRequest CreateSubscriptionReportBody

	/* OrganizationID.

	   Valid Organization Id
	*/
	OrganizationID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create subscription report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSubscriptionReportParams) WithDefaults() *CreateSubscriptionReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create subscription report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSubscriptionReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create subscription report params
func (o *CreateSubscriptionReportParams) WithTimeout(timeout time.Duration) *CreateSubscriptionReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create subscription report params
func (o *CreateSubscriptionReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create subscription report params
func (o *CreateSubscriptionReportParams) WithContext(ctx context.Context) *CreateSubscriptionReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create subscription report params
func (o *CreateSubscriptionReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create subscription report params
func (o *CreateSubscriptionReportParams) WithHTTPClient(client *http.Client) *CreateSubscriptionReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create subscription report params
func (o *CreateSubscriptionReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateReportSubscriptionRequest adds the createReportSubscriptionRequest to the create subscription report params
func (o *CreateSubscriptionReportParams) WithCreateReportSubscriptionRequest(createReportSubscriptionRequest CreateSubscriptionReportBody) *CreateSubscriptionReportParams {
	o.SetCreateReportSubscriptionRequest(createReportSubscriptionRequest)
	return o
}

// SetCreateReportSubscriptionRequest adds the createReportSubscriptionRequest to the create subscription report params
func (o *CreateSubscriptionReportParams) SetCreateReportSubscriptionRequest(createReportSubscriptionRequest CreateSubscriptionReportBody) {
	o.CreateReportSubscriptionRequest = createReportSubscriptionRequest
}

// WithOrganizationID adds the organizationID to the create subscription report params
func (o *CreateSubscriptionReportParams) WithOrganizationID(organizationID *string) *CreateSubscriptionReportParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the create subscription report params
func (o *CreateSubscriptionReportParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSubscriptionReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.CreateReportSubscriptionRequest); err != nil {
		return err
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
