// Code generated by go-swagger; DO NOT EDIT.

package chargeback_summaries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetChargebackSummariesParams creates a new GetChargebackSummariesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetChargebackSummariesParams() *GetChargebackSummariesParams {
	return &GetChargebackSummariesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetChargebackSummariesParamsWithTimeout creates a new GetChargebackSummariesParams object
// with the ability to set a timeout on a request.
func NewGetChargebackSummariesParamsWithTimeout(timeout time.Duration) *GetChargebackSummariesParams {
	return &GetChargebackSummariesParams{
		timeout: timeout,
	}
}

// NewGetChargebackSummariesParamsWithContext creates a new GetChargebackSummariesParams object
// with the ability to set a context for a request.
func NewGetChargebackSummariesParamsWithContext(ctx context.Context) *GetChargebackSummariesParams {
	return &GetChargebackSummariesParams{
		Context: ctx,
	}
}

// NewGetChargebackSummariesParamsWithHTTPClient creates a new GetChargebackSummariesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetChargebackSummariesParamsWithHTTPClient(client *http.Client) *GetChargebackSummariesParams {
	return &GetChargebackSummariesParams{
		HTTPClient: client,
	}
}

/*
GetChargebackSummariesParams contains all the parameters to send to the API endpoint

	for the get chargeback summaries operation.

	Typically these are written to a http.Request.
*/
type GetChargebackSummariesParams struct {

	/* EndTime.

	     Valid report End Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	     Format: date-time
	*/
	EndTime strfmt.DateTime

	/* OrganizationID.

	   Valid Organization Id
	*/
	OrganizationID *string

	/* StartTime.

	     Valid report Start Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	     Format: date-time
	*/
	StartTime strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get chargeback summaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChargebackSummariesParams) WithDefaults() *GetChargebackSummariesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get chargeback summaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChargebackSummariesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithTimeout(timeout time.Duration) *GetChargebackSummariesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithContext(ctx context.Context) *GetChargebackSummariesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithHTTPClient(client *http.Client) *GetChargebackSummariesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithEndTime(endTime strfmt.DateTime) *GetChargebackSummariesParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetEndTime(endTime strfmt.DateTime) {
	o.EndTime = endTime
}

// WithOrganizationID adds the organizationID to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithOrganizationID(organizationID *string) *GetChargebackSummariesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithStartTime adds the startTime to the get chargeback summaries params
func (o *GetChargebackSummariesParams) WithStartTime(startTime strfmt.DateTime) *GetChargebackSummariesParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get chargeback summaries params
func (o *GetChargebackSummariesParams) SetStartTime(startTime strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetChargebackSummariesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endTime
	qrEndTime := o.EndTime
	qEndTime := qrEndTime.String()
	if qEndTime != "" {

		if err := r.SetQueryParam("endTime", qEndTime); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime.String()
	if qStartTime != "" {

		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
