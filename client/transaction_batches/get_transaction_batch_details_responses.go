// Code generated by go-swagger; DO NOT EDIT.

package transaction_batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTransactionBatchDetailsReader is a Reader for the GetTransactionBatchDetails structure.
type GetTransactionBatchDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionBatchDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionBatchDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTransactionBatchDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTransactionBatchDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTransactionBatchDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTransactionBatchDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetTransactionBatchDetailsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /pts/v1/transaction-batch-details/{id}] getTransactionBatchDetails", response, response.Code())
	}
}

// NewGetTransactionBatchDetailsOK creates a GetTransactionBatchDetailsOK with default headers values
func NewGetTransactionBatchDetailsOK() *GetTransactionBatchDetailsOK {
	return &GetTransactionBatchDetailsOK{}
}

/*
GetTransactionBatchDetailsOK describes a response with status code 200, with default header values.

OK
*/
type GetTransactionBatchDetailsOK struct {
}

// IsSuccess returns true when this get transaction batch details o k response has a 2xx status code
func (o *GetTransactionBatchDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get transaction batch details o k response has a 3xx status code
func (o *GetTransactionBatchDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details o k response has a 4xx status code
func (o *GetTransactionBatchDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction batch details o k response has a 5xx status code
func (o *GetTransactionBatchDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction batch details o k response a status code equal to that given
func (o *GetTransactionBatchDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get transaction batch details o k response
func (o *GetTransactionBatchDetailsOK) Code() int {
	return 200
}

func (o *GetTransactionBatchDetailsOK) Error() string {
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsOK", 200)
}

func (o *GetTransactionBatchDetailsOK) String() string {
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsOK", 200)
}

func (o *GetTransactionBatchDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTransactionBatchDetailsBadRequest creates a GetTransactionBatchDetailsBadRequest with default headers values
func NewGetTransactionBatchDetailsBadRequest() *GetTransactionBatchDetailsBadRequest {
	return &GetTransactionBatchDetailsBadRequest{}
}

/*
GetTransactionBatchDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTransactionBatchDetailsBadRequest struct {
	Payload *GetTransactionBatchDetailsBadRequestBody
}

// IsSuccess returns true when this get transaction batch details bad request response has a 2xx status code
func (o *GetTransactionBatchDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction batch details bad request response has a 3xx status code
func (o *GetTransactionBatchDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details bad request response has a 4xx status code
func (o *GetTransactionBatchDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction batch details bad request response has a 5xx status code
func (o *GetTransactionBatchDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction batch details bad request response a status code equal to that given
func (o *GetTransactionBatchDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get transaction batch details bad request response
func (o *GetTransactionBatchDetailsBadRequest) Code() int {
	return 400
}

func (o *GetTransactionBatchDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsBadRequest %s", 400, payload)
}

func (o *GetTransactionBatchDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsBadRequest %s", 400, payload)
}

func (o *GetTransactionBatchDetailsBadRequest) GetPayload() *GetTransactionBatchDetailsBadRequestBody {
	return o.Payload
}

func (o *GetTransactionBatchDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionBatchDetailsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionBatchDetailsUnauthorized creates a GetTransactionBatchDetailsUnauthorized with default headers values
func NewGetTransactionBatchDetailsUnauthorized() *GetTransactionBatchDetailsUnauthorized {
	return &GetTransactionBatchDetailsUnauthorized{}
}

/*
GetTransactionBatchDetailsUnauthorized describes a response with status code 401, with default header values.

Not Authorized
*/
type GetTransactionBatchDetailsUnauthorized struct {
	Payload *GetTransactionBatchDetailsUnauthorizedBody
}

// IsSuccess returns true when this get transaction batch details unauthorized response has a 2xx status code
func (o *GetTransactionBatchDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction batch details unauthorized response has a 3xx status code
func (o *GetTransactionBatchDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details unauthorized response has a 4xx status code
func (o *GetTransactionBatchDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction batch details unauthorized response has a 5xx status code
func (o *GetTransactionBatchDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction batch details unauthorized response a status code equal to that given
func (o *GetTransactionBatchDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get transaction batch details unauthorized response
func (o *GetTransactionBatchDetailsUnauthorized) Code() int {
	return 401
}

func (o *GetTransactionBatchDetailsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsUnauthorized %s", 401, payload)
}

func (o *GetTransactionBatchDetailsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsUnauthorized %s", 401, payload)
}

func (o *GetTransactionBatchDetailsUnauthorized) GetPayload() *GetTransactionBatchDetailsUnauthorizedBody {
	return o.Payload
}

func (o *GetTransactionBatchDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionBatchDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionBatchDetailsForbidden creates a GetTransactionBatchDetailsForbidden with default headers values
func NewGetTransactionBatchDetailsForbidden() *GetTransactionBatchDetailsForbidden {
	return &GetTransactionBatchDetailsForbidden{}
}

/*
GetTransactionBatchDetailsForbidden describes a response with status code 403, with default header values.

No Authenticated
*/
type GetTransactionBatchDetailsForbidden struct {
	Payload *GetTransactionBatchDetailsForbiddenBody
}

// IsSuccess returns true when this get transaction batch details forbidden response has a 2xx status code
func (o *GetTransactionBatchDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction batch details forbidden response has a 3xx status code
func (o *GetTransactionBatchDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details forbidden response has a 4xx status code
func (o *GetTransactionBatchDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction batch details forbidden response has a 5xx status code
func (o *GetTransactionBatchDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction batch details forbidden response a status code equal to that given
func (o *GetTransactionBatchDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get transaction batch details forbidden response
func (o *GetTransactionBatchDetailsForbidden) Code() int {
	return 403
}

func (o *GetTransactionBatchDetailsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsForbidden %s", 403, payload)
}

func (o *GetTransactionBatchDetailsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsForbidden %s", 403, payload)
}

func (o *GetTransactionBatchDetailsForbidden) GetPayload() *GetTransactionBatchDetailsForbiddenBody {
	return o.Payload
}

func (o *GetTransactionBatchDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionBatchDetailsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionBatchDetailsNotFound creates a GetTransactionBatchDetailsNotFound with default headers values
func NewGetTransactionBatchDetailsNotFound() *GetTransactionBatchDetailsNotFound {
	return &GetTransactionBatchDetailsNotFound{}
}

/*
GetTransactionBatchDetailsNotFound describes a response with status code 404, with default header values.

No Reports Found
*/
type GetTransactionBatchDetailsNotFound struct {
	Payload *GetTransactionBatchDetailsNotFoundBody
}

// IsSuccess returns true when this get transaction batch details not found response has a 2xx status code
func (o *GetTransactionBatchDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction batch details not found response has a 3xx status code
func (o *GetTransactionBatchDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details not found response has a 4xx status code
func (o *GetTransactionBatchDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction batch details not found response has a 5xx status code
func (o *GetTransactionBatchDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction batch details not found response a status code equal to that given
func (o *GetTransactionBatchDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get transaction batch details not found response
func (o *GetTransactionBatchDetailsNotFound) Code() int {
	return 404
}

func (o *GetTransactionBatchDetailsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsNotFound %s", 404, payload)
}

func (o *GetTransactionBatchDetailsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsNotFound %s", 404, payload)
}

func (o *GetTransactionBatchDetailsNotFound) GetPayload() *GetTransactionBatchDetailsNotFoundBody {
	return o.Payload
}

func (o *GetTransactionBatchDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionBatchDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionBatchDetailsBadGateway creates a GetTransactionBatchDetailsBadGateway with default headers values
func NewGetTransactionBatchDetailsBadGateway() *GetTransactionBatchDetailsBadGateway {
	return &GetTransactionBatchDetailsBadGateway{}
}

/*
GetTransactionBatchDetailsBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type GetTransactionBatchDetailsBadGateway struct {
	Payload *GetTransactionBatchDetailsBadGatewayBody
}

// IsSuccess returns true when this get transaction batch details bad gateway response has a 2xx status code
func (o *GetTransactionBatchDetailsBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction batch details bad gateway response has a 3xx status code
func (o *GetTransactionBatchDetailsBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction batch details bad gateway response has a 4xx status code
func (o *GetTransactionBatchDetailsBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction batch details bad gateway response has a 5xx status code
func (o *GetTransactionBatchDetailsBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get transaction batch details bad gateway response a status code equal to that given
func (o *GetTransactionBatchDetailsBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get transaction batch details bad gateway response
func (o *GetTransactionBatchDetailsBadGateway) Code() int {
	return 502
}

func (o *GetTransactionBatchDetailsBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsBadGateway %s", 502, payload)
}

func (o *GetTransactionBatchDetailsBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /pts/v1/transaction-batch-details/{id}][%d] getTransactionBatchDetailsBadGateway %s", 502, payload)
}

func (o *GetTransactionBatchDetailsBadGateway) GetPayload() *GetTransactionBatchDetailsBadGatewayBody {
	return o.Payload
}

func (o *GetTransactionBatchDetailsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionBatchDetailsBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetTransactionBatchDetailsBadGatewayBody ptsV1TransactionBatchDetailsGet502Response
swagger:model GetTransactionBatchDetailsBadGatewayBody
*/
type GetTransactionBatchDetailsBadGatewayBody struct {

	// error information
	ErrorInformation *GetTransactionBatchDetailsBadGatewayBodyErrorInformation `json:"errorInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get transaction batch details bad gateway body
func (o *GetTransactionBatchDetailsBadGatewayBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadGatewayBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsBadGateway" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsBadGateway" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get transaction batch details bad gateway body based on the context it is used
func (o *GetTransactionBatchDetailsBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadGatewayBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsBadGateway" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsBadGateway" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsBadGatewayBodyErrorInformation get transaction batch details bad gateway body error information
swagger:model GetTransactionBatchDetailsBadGatewayBodyErrorInformation
*/
type GetTransactionBatchDetailsBadGatewayBodyErrorInformation struct {

	// The detailed message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of status
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction batch details bad gateway body error information
func (o *GetTransactionBatchDetailsBadGatewayBodyErrorInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get transaction batch details bad gateway body error information based on context it is used
func (o *GetTransactionBatchDetailsBadGatewayBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadGatewayBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadGatewayBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsBadGatewayBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsBadRequestBody ptsV1TransactionBatchDetailsGet400Response
swagger:model GetTransactionBatchDetailsBadRequestBody
*/
type GetTransactionBatchDetailsBadRequestBody struct {

	// error information
	ErrorInformation *GetTransactionBatchDetailsBadRequestBodyErrorInformation `json:"errorInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get transaction batch details bad request body
func (o *GetTransactionBatchDetailsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadRequestBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get transaction batch details bad request body based on the context it is used
func (o *GetTransactionBatchDetailsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadRequestBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsBadRequestBodyErrorInformation get transaction batch details bad request body error information
swagger:model GetTransactionBatchDetailsBadRequestBodyErrorInformation
*/
type GetTransactionBatchDetailsBadRequestBodyErrorInformation struct {

	// details
	Details []*GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction batch details bad request body error information
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get transaction batch details bad request body error information based on the context it is used
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsBadRequest" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsBadRequestBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0 get transaction batch details bad request body error information details items0
swagger:model GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0
*/
type GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	Field string `json:"field,omitempty"`

	// The detailed message related to the status and reason listed above.
	//
	Message string `json:"message,omitempty"`
}

// Validate validates this get transaction batch details bad request body error information details items0
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get transaction batch details bad request body error information details items0 based on context it is used
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsBadRequestBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsForbiddenBody ptsV1TransactionBatchDetailsGet403Response
swagger:model GetTransactionBatchDetailsForbiddenBody
*/
type GetTransactionBatchDetailsForbiddenBody struct {

	// error information
	ErrorInformation *GetTransactionBatchDetailsForbiddenBodyErrorInformation `json:"errorInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get transaction batch details forbidden body
func (o *GetTransactionBatchDetailsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsForbiddenBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get transaction batch details forbidden body based on the context it is used
func (o *GetTransactionBatchDetailsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsForbiddenBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsForbiddenBodyErrorInformation get transaction batch details forbidden body error information
swagger:model GetTransactionBatchDetailsForbiddenBodyErrorInformation
*/
type GetTransactionBatchDetailsForbiddenBodyErrorInformation struct {

	// details
	Details []*GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction batch details forbidden body error information
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get transaction batch details forbidden body error information based on the context it is used
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsForbidden" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsForbiddenBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0 get transaction batch details forbidden body error information details items0
swagger:model GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0
*/
type GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	Field string `json:"field,omitempty"`

	// The detailed message related to the status and reason listed above.
	//
	Message string `json:"message,omitempty"`
}

// Validate validates this get transaction batch details forbidden body error information details items0
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get transaction batch details forbidden body error information details items0 based on context it is used
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsForbiddenBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsNotFoundBody ptsV1TransactionBatchDetailsGet404Response
swagger:model GetTransactionBatchDetailsNotFoundBody
*/
type GetTransactionBatchDetailsNotFoundBody struct {

	// error information
	ErrorInformation *GetTransactionBatchDetailsNotFoundBodyErrorInformation `json:"errorInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get transaction batch details not found body
func (o *GetTransactionBatchDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsNotFoundBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get transaction batch details not found body based on the context it is used
func (o *GetTransactionBatchDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsNotFoundBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsNotFoundBodyErrorInformation get transaction batch details not found body error information
swagger:model GetTransactionBatchDetailsNotFoundBodyErrorInformation
*/
type GetTransactionBatchDetailsNotFoundBodyErrorInformation struct {

	// details
	Details []*GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction batch details not found body error information
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get transaction batch details not found body error information based on the context it is used
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsNotFound" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsNotFoundBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0 get transaction batch details not found body error information details items0
swagger:model GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0
*/
type GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	Field string `json:"field,omitempty"`

	// The detailed message related to the status and reason listed above.
	//
	Message string `json:"message,omitempty"`
}

// Validate validates this get transaction batch details not found body error information details items0
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get transaction batch details not found body error information details items0 based on context it is used
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsNotFoundBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsUnauthorizedBody ptsV1TransactionBatchDetailsGet401Response
swagger:model GetTransactionBatchDetailsUnauthorizedBody
*/
type GetTransactionBatchDetailsUnauthorizedBody struct {

	// error information
	ErrorInformation *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation `json:"errorInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get transaction batch details unauthorized body
func (o *GetTransactionBatchDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsUnauthorizedBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get transaction batch details unauthorized body based on the context it is used
func (o *GetTransactionBatchDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsUnauthorizedBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsUnauthorizedBodyErrorInformation get transaction batch details unauthorized body error information
swagger:model GetTransactionBatchDetailsUnauthorizedBodyErrorInformation
*/
type GetTransactionBatchDetailsUnauthorizedBodyErrorInformation struct {

	// details
	Details []*GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction batch details unauthorized body error information
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get transaction batch details unauthorized body error information based on the context it is used
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTransactionBatchDetailsUnauthorized" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsUnauthorizedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0 get transaction batch details unauthorized body error information details items0
swagger:model GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0
*/
type GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	Field string `json:"field,omitempty"`

	// The detailed message related to the status and reason listed above.
	//
	Message string `json:"message,omitempty"`
}

// Validate validates this get transaction batch details unauthorized body error information details items0
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get transaction batch details unauthorized body error information details items0 based on context it is used
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionBatchDetailsUnauthorizedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
