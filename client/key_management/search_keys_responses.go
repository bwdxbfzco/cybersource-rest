// Code generated by go-swagger; DO NOT EDIT.

package key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchKeysReader is a Reader for the SearchKeys structure.
type SearchKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchKeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /kms/v2/keys] searchKeys", response, response.Code())
	}
}

// NewSearchKeysOK creates a SearchKeysOK with default headers values
func NewSearchKeysOK() *SearchKeysOK {
	return &SearchKeysOK{}
}

/*
SearchKeysOK describes a response with status code 200, with default header values.

Successful response.
*/
type SearchKeysOK struct {
	Payload *SearchKeysOKBody
}

// IsSuccess returns true when this search keys o k response has a 2xx status code
func (o *SearchKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search keys o k response has a 3xx status code
func (o *SearchKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search keys o k response has a 4xx status code
func (o *SearchKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search keys o k response has a 5xx status code
func (o *SearchKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search keys o k response a status code equal to that given
func (o *SearchKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search keys o k response
func (o *SearchKeysOK) Code() int {
	return 200
}

func (o *SearchKeysOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysOK %s", 200, payload)
}

func (o *SearchKeysOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysOK %s", 200, payload)
}

func (o *SearchKeysOK) GetPayload() *SearchKeysOKBody {
	return o.Payload
}

func (o *SearchKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchKeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchKeysBadRequest creates a SearchKeysBadRequest with default headers values
func NewSearchKeysBadRequest() *SearchKeysBadRequest {
	return &SearchKeysBadRequest{}
}

/*
SearchKeysBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type SearchKeysBadRequest struct {
	Payload *SearchKeysBadRequestBody
}

// IsSuccess returns true when this search keys bad request response has a 2xx status code
func (o *SearchKeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search keys bad request response has a 3xx status code
func (o *SearchKeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search keys bad request response has a 4xx status code
func (o *SearchKeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search keys bad request response has a 5xx status code
func (o *SearchKeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search keys bad request response a status code equal to that given
func (o *SearchKeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search keys bad request response
func (o *SearchKeysBadRequest) Code() int {
	return 400
}

func (o *SearchKeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysBadRequest %s", 400, payload)
}

func (o *SearchKeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysBadRequest %s", 400, payload)
}

func (o *SearchKeysBadRequest) GetPayload() *SearchKeysBadRequestBody {
	return o.Payload
}

func (o *SearchKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchKeysBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchKeysInternalServerError creates a SearchKeysInternalServerError with default headers values
func NewSearchKeysInternalServerError() *SearchKeysInternalServerError {
	return &SearchKeysInternalServerError{}
}

/*
SearchKeysInternalServerError describes a response with status code 500, with default header values.

Unexpected system error or system timeout.
*/
type SearchKeysInternalServerError struct {
	Payload *SearchKeysInternalServerErrorBody
}

// IsSuccess returns true when this search keys internal server error response has a 2xx status code
func (o *SearchKeysInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search keys internal server error response has a 3xx status code
func (o *SearchKeysInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search keys internal server error response has a 4xx status code
func (o *SearchKeysInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search keys internal server error response has a 5xx status code
func (o *SearchKeysInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search keys internal server error response a status code equal to that given
func (o *SearchKeysInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search keys internal server error response
func (o *SearchKeysInternalServerError) Code() int {
	return 500
}

func (o *SearchKeysInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysInternalServerError %s", 500, payload)
}

func (o *SearchKeysInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys][%d] searchKeysInternalServerError %s", 500, payload)
}

func (o *SearchKeysInternalServerError) GetPayload() *SearchKeysInternalServerErrorBody {
	return o.Payload
}

func (o *SearchKeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchKeysInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SearchKeysBadRequestBody search keys bad request body
swagger:model SearchKeysBadRequestBody
*/
type SearchKeysBadRequestBody struct {

	// details
	Details []*SearchKeysBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this search keys bad request body
func (o *SearchKeysBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchKeysBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchKeysBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchKeysBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search keys bad request body based on the context it is used
func (o *SearchKeysBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchKeysBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchKeysBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchKeysBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchKeysBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchKeysBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchKeysBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchKeysBadRequestBodyDetailsItems0 search keys bad request body details items0
swagger:model SearchKeysBadRequestBodyDetailsItems0
*/
type SearchKeysBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this search keys bad request body details items0
func (o *SearchKeysBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search keys bad request body details items0 based on context it is used
func (o *SearchKeysBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchKeysBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchKeysBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SearchKeysBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchKeysInternalServerErrorBody search keys internal server error body
swagger:model SearchKeysInternalServerErrorBody
*/
type SearchKeysInternalServerErrorBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted request.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this search keys internal server error body
func (o *SearchKeysInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search keys internal server error body based on context it is used
func (o *SearchKeysInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchKeysInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchKeysInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SearchKeysInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchKeysOKBody Successful searchKeysResponse
swagger:model SearchKeysOKBody
*/
type SearchKeysOKBody struct {

	// keys
	Keys []*SearchKeysOKBodyKeysItems0 `json:"keys"`

	// Specifies the maximum number of records requested part of the response
	Limit int64 `json:"limit,omitempty"`

	// Specifies the record offset from the records are returned part of the response
	Offset int64 `json:"offset,omitempty"`

	// Specifies a comma separated list of field names based on which the result is sorted.
	Sort string `json:"sort,omitempty"`

	// Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the
	// time. The Z indicates UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// Specifies the total number of items found based on the request
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this search keys o k body
func (o *SearchKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchKeysOKBody) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchKeysOK" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchKeysOK" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search keys o k body based on the context it is used
func (o *SearchKeysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchKeysOKBody) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Keys); i++ {

		if o.Keys[i] != nil {

			if swag.IsZero(o.Keys[i]) { // not required
				return nil
			}

			if err := o.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchKeysOK" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchKeysOK" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchKeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchKeysOKBody) UnmarshalBinary(b []byte) error {
	var res SearchKeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchKeysOKBodyKeysItems0 KeyResponseEntry
swagger:model SearchKeysOKBodyKeysItems0
*/
type SearchKeysOKBodyKeysItems0 struct {

	// Added By
	AddedBy string `json:"addedBy,omitempty"`

	// Date Addded. example - 2018-04-25 22:11:56 UTC
	// Pattern: yyyy-mm-dd hh:mm:ss zzz
	// Format: date
	DateAdded strfmt.Date `json:"dateAdded,omitempty"`

	// Modified Date.
	// Example: 2022-04-25 22:11:56 UTC
	// Pattern: yyyy-mm-dd hh:mm:ss zzz
	// Format: date
	DateModified strfmt.Date `json:"dateModified,omitempty"`

	// Expiry Date. example - 2028-07-15 22:11:56 UTC
	// Pattern: yyyy-mm-dd hh:mm:ss zzz
	// Format: date
	ExpirationDate strfmt.Date `json:"expirationDate,omitempty"`

	// Issuer Name
	IssuerName string `json:"issuerName,omitempty"`

	// Key Id
	KeyID string `json:"keyId,omitempty"`

	// Key Type
	KeyType string `json:"keyType,omitempty"`

	// Merchant Name
	MerchantName string `json:"merchantName,omitempty"`

	// Modified By
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// Merchant Id
	OrganizationID string `json:"organizationId,omitempty"`

	// Serial Number
	SerialNumber string `json:"serialNumber,omitempty"`

	// Status can be active/inactive
	Status string `json:"status,omitempty"`

	// Version
	Version string `json:"version,omitempty"`
}

// Validate validates this search keys o k body keys items0
func (o *SearchKeysOKBodyKeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchKeysOKBodyKeysItems0) validateDateAdded(formats strfmt.Registry) error {
	if swag.IsZero(o.DateAdded) { // not required
		return nil
	}

	if err := validate.Pattern("dateAdded", "body", o.DateAdded.String(), `yyyy-mm-dd hh:mm:ss zzz`); err != nil {
		return err
	}

	if err := validate.FormatOf("dateAdded", "body", "date", o.DateAdded.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SearchKeysOKBodyKeysItems0) validateDateModified(formats strfmt.Registry) error {
	if swag.IsZero(o.DateModified) { // not required
		return nil
	}

	if err := validate.Pattern("dateModified", "body", o.DateModified.String(), `yyyy-mm-dd hh:mm:ss zzz`); err != nil {
		return err
	}

	if err := validate.FormatOf("dateModified", "body", "date", o.DateModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SearchKeysOKBodyKeysItems0) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationDate) { // not required
		return nil
	}

	if err := validate.Pattern("expirationDate", "body", o.ExpirationDate.String(), `yyyy-mm-dd hh:mm:ss zzz`); err != nil {
		return err
	}

	if err := validate.FormatOf("expirationDate", "body", "date", o.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search keys o k body keys items0 based on context it is used
func (o *SearchKeysOKBodyKeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchKeysOKBodyKeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchKeysOKBodyKeysItems0) UnmarshalBinary(b []byte) error {
	var res SearchKeysOKBodyKeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
