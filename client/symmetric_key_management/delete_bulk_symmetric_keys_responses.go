// Code generated by go-swagger; DO NOT EDIT.

package symmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteBulkSymmetricKeysReader is a Reader for the DeleteBulkSymmetricKeys structure.
type DeleteBulkSymmetricKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBulkSymmetricKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBulkSymmetricKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteBulkSymmetricKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDeleteBulkSymmetricKeysBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/v2/keys-sym/deletes] deleteBulkSymmetricKeys", response, response.Code())
	}
}

// NewDeleteBulkSymmetricKeysOK creates a DeleteBulkSymmetricKeysOK with default headers values
func NewDeleteBulkSymmetricKeysOK() *DeleteBulkSymmetricKeysOK {
	return &DeleteBulkSymmetricKeysOK{}
}

/*
DeleteBulkSymmetricKeysOK describes a response with status code 200, with default header values.

Successful response
*/
type DeleteBulkSymmetricKeysOK struct {
	Payload *DeleteBulkSymmetricKeysOKBody
}

// IsSuccess returns true when this delete bulk symmetric keys o k response has a 2xx status code
func (o *DeleteBulkSymmetricKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete bulk symmetric keys o k response has a 3xx status code
func (o *DeleteBulkSymmetricKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk symmetric keys o k response has a 4xx status code
func (o *DeleteBulkSymmetricKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete bulk symmetric keys o k response has a 5xx status code
func (o *DeleteBulkSymmetricKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bulk symmetric keys o k response a status code equal to that given
func (o *DeleteBulkSymmetricKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete bulk symmetric keys o k response
func (o *DeleteBulkSymmetricKeysOK) Code() int {
	return 200
}

func (o *DeleteBulkSymmetricKeysOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysOK %s", 200, payload)
}

func (o *DeleteBulkSymmetricKeysOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysOK %s", 200, payload)
}

func (o *DeleteBulkSymmetricKeysOK) GetPayload() *DeleteBulkSymmetricKeysOKBody {
	return o.Payload
}

func (o *DeleteBulkSymmetricKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkSymmetricKeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBulkSymmetricKeysBadRequest creates a DeleteBulkSymmetricKeysBadRequest with default headers values
func NewDeleteBulkSymmetricKeysBadRequest() *DeleteBulkSymmetricKeysBadRequest {
	return &DeleteBulkSymmetricKeysBadRequest{}
}

/*
DeleteBulkSymmetricKeysBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type DeleteBulkSymmetricKeysBadRequest struct {
	Payload *DeleteBulkSymmetricKeysBadRequestBody
}

// IsSuccess returns true when this delete bulk symmetric keys bad request response has a 2xx status code
func (o *DeleteBulkSymmetricKeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bulk symmetric keys bad request response has a 3xx status code
func (o *DeleteBulkSymmetricKeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk symmetric keys bad request response has a 4xx status code
func (o *DeleteBulkSymmetricKeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete bulk symmetric keys bad request response has a 5xx status code
func (o *DeleteBulkSymmetricKeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bulk symmetric keys bad request response a status code equal to that given
func (o *DeleteBulkSymmetricKeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete bulk symmetric keys bad request response
func (o *DeleteBulkSymmetricKeysBadRequest) Code() int {
	return 400
}

func (o *DeleteBulkSymmetricKeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysBadRequest %s", 400, payload)
}

func (o *DeleteBulkSymmetricKeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysBadRequest %s", 400, payload)
}

func (o *DeleteBulkSymmetricKeysBadRequest) GetPayload() *DeleteBulkSymmetricKeysBadRequestBody {
	return o.Payload
}

func (o *DeleteBulkSymmetricKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkSymmetricKeysBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBulkSymmetricKeysBadGateway creates a DeleteBulkSymmetricKeysBadGateway with default headers values
func NewDeleteBulkSymmetricKeysBadGateway() *DeleteBulkSymmetricKeysBadGateway {
	return &DeleteBulkSymmetricKeysBadGateway{}
}

/*
DeleteBulkSymmetricKeysBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type DeleteBulkSymmetricKeysBadGateway struct {
	Payload *DeleteBulkSymmetricKeysBadGatewayBody
}

// IsSuccess returns true when this delete bulk symmetric keys bad gateway response has a 2xx status code
func (o *DeleteBulkSymmetricKeysBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bulk symmetric keys bad gateway response has a 3xx status code
func (o *DeleteBulkSymmetricKeysBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk symmetric keys bad gateway response has a 4xx status code
func (o *DeleteBulkSymmetricKeysBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete bulk symmetric keys bad gateway response has a 5xx status code
func (o *DeleteBulkSymmetricKeysBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this delete bulk symmetric keys bad gateway response a status code equal to that given
func (o *DeleteBulkSymmetricKeysBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the delete bulk symmetric keys bad gateway response
func (o *DeleteBulkSymmetricKeysBadGateway) Code() int {
	return 502
}

func (o *DeleteBulkSymmetricKeysBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysBadGateway %s", 502, payload)
}

func (o *DeleteBulkSymmetricKeysBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/deletes][%d] deleteBulkSymmetricKeysBadGateway %s", 502, payload)
}

func (o *DeleteBulkSymmetricKeysBadGateway) GetPayload() *DeleteBulkSymmetricKeysBadGatewayBody {
	return o.Payload
}

func (o *DeleteBulkSymmetricKeysBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkSymmetricKeysBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteBulkSymmetricKeysBadGatewayBody delete bulk symmetric keys bad gateway body
swagger:model DeleteBulkSymmetricKeysBadGatewayBody
*/
type DeleteBulkSymmetricKeysBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk symmetric keys bad gateway body
func (o *DeleteBulkSymmetricKeysBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk symmetric keys bad gateway body based on context it is used
func (o *DeleteBulkSymmetricKeysBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysBadRequestBody delete bulk symmetric keys bad request body
swagger:model DeleteBulkSymmetricKeysBadRequestBody
*/
type DeleteBulkSymmetricKeysBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk symmetric keys bad request body
func (o *DeleteBulkSymmetricKeysBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk symmetric keys bad request body based on context it is used
func (o *DeleteBulkSymmetricKeysBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysBody delete bulk symmetric keys body
swagger:model DeleteBulkSymmetricKeysBody
*/
type DeleteBulkSymmetricKeysBody struct {

	// client reference information
	ClientReferenceInformation *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0 `json:"keyInformation"`
}

// Validate validates this delete bulk symmetric keys body
func (o *DeleteBulkSymmetricKeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys body based on the context it is used
func (o *DeleteBulkSymmetricKeysBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBody kmsV2KeysSymDeletesPost200Response
swagger:model DeleteBulkSymmetricKeysOKBody
*/
type DeleteBulkSymmetricKeysOKBody struct {

	// client reference information
	ClientReferenceInformation *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*DeleteBulkSymmetricKeysOKBodyKeyInformationItems0 `json:"keyInformation"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body
func (o *DeleteBulkSymmetricKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysOKBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys o k body based on the context it is used
func (o *DeleteBulkSymmetricKeysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysOKBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBodyClientReferenceInformation delete bulk symmetric keys o k body client reference information
swagger:model DeleteBulkSymmetricKeysOKBodyClientReferenceInformation
*/
type DeleteBulkSymmetricKeysOKBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body client reference information
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysOK"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys o k body client reference information based on the context it is used
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner delete bulk symmetric keys o k body client reference information partner
swagger:model DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner
*/
type DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body client reference information partner
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysOK"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysOK"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk symmetric keys o k body client reference information partner based on context it is used
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBodyKeyInformationItems0 key information
//
swagger:model DeleteBulkSymmetricKeysOKBodyKeyInformationItems0
*/
type DeleteBulkSymmetricKeysOKBodyKeyInformationItems0 struct {

	// error information
	ErrorInformation *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation `json:"errorInformation,omitempty"`

	// Key serial number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	//
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//  - INACTIVE
	//  - EXPIRED
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body key information items0
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys o k body key information items0 based on the context it is used
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation delete bulk symmetric keys o k body key information items0 error information
swagger:model DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation
*/
type DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation struct {

	// details
	Details []*DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body key information items0 error information
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys o k body key information items0 error information based on the context it is used
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 delete bulk symmetric keys o k body key information items0 error information details items0
swagger:model DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0
*/
type DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete bulk symmetric keys o k body key information items0 error information details items0
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk symmetric keys o k body key information items0 error information details items0 based on context it is used
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation delete bulk symmetric keys params body client reference information
swagger:model DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation
*/
type DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this delete bulk symmetric keys params body client reference information
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk symmetric keys params body client reference information based on the context it is used
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkSymmetricKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner delete bulk symmetric keys params body client reference information partner
swagger:model DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner
*/
type DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this delete bulk symmetric keys params body client reference information partner
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkSymmetricKeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk symmetric keys params body client reference information partner based on context it is used
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0 key information
//
swagger:model DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0
*/
type DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0 struct {

	// Key Serial Number
	// Required: true
	KeyID *string `json:"keyId"`

	// Merchant Id
	//
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this delete bulk symmetric keys params body key information items0
func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("keyId", "body", o.KeyID); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk symmetric keys params body key information items0 based on context it is used
func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkSymmetricKeysParamsBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
