// Code generated by go-swagger; DO NOT EDIT.

package symmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateV2SharedSecretKeysReader is a Reader for the CreateV2SharedSecretKeys structure.
type CreateV2SharedSecretKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateV2SharedSecretKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateV2SharedSecretKeysCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateV2SharedSecretKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateV2SharedSecretKeysBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/v2/keys-sym] createV2SharedSecretKeys", response, response.Code())
	}
}

// NewCreateV2SharedSecretKeysCreated creates a CreateV2SharedSecretKeysCreated with default headers values
func NewCreateV2SharedSecretKeysCreated() *CreateV2SharedSecretKeysCreated {
	return &CreateV2SharedSecretKeysCreated{}
}

/*
CreateV2SharedSecretKeysCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreateV2SharedSecretKeysCreated struct {
	Payload *CreateV2SharedSecretKeysCreatedBody
}

// IsSuccess returns true when this create v2 shared secret keys created response has a 2xx status code
func (o *CreateV2SharedSecretKeysCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create v2 shared secret keys created response has a 3xx status code
func (o *CreateV2SharedSecretKeysCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys created response has a 4xx status code
func (o *CreateV2SharedSecretKeysCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create v2 shared secret keys created response has a 5xx status code
func (o *CreateV2SharedSecretKeysCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create v2 shared secret keys created response a status code equal to that given
func (o *CreateV2SharedSecretKeysCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create v2 shared secret keys created response
func (o *CreateV2SharedSecretKeysCreated) Code() int {
	return 201
}

func (o *CreateV2SharedSecretKeysCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysCreated %s", 201, payload)
}

func (o *CreateV2SharedSecretKeysCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysCreated %s", 201, payload)
}

func (o *CreateV2SharedSecretKeysCreated) GetPayload() *CreateV2SharedSecretKeysCreatedBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateV2SharedSecretKeysBadRequest creates a CreateV2SharedSecretKeysBadRequest with default headers values
func NewCreateV2SharedSecretKeysBadRequest() *CreateV2SharedSecretKeysBadRequest {
	return &CreateV2SharedSecretKeysBadRequest{}
}

/*
CreateV2SharedSecretKeysBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreateV2SharedSecretKeysBadRequest struct {
	Payload *CreateV2SharedSecretKeysBadRequestBody
}

// IsSuccess returns true when this create v2 shared secret keys bad request response has a 2xx status code
func (o *CreateV2SharedSecretKeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create v2 shared secret keys bad request response has a 3xx status code
func (o *CreateV2SharedSecretKeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys bad request response has a 4xx status code
func (o *CreateV2SharedSecretKeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create v2 shared secret keys bad request response has a 5xx status code
func (o *CreateV2SharedSecretKeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create v2 shared secret keys bad request response a status code equal to that given
func (o *CreateV2SharedSecretKeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create v2 shared secret keys bad request response
func (o *CreateV2SharedSecretKeysBadRequest) Code() int {
	return 400
}

func (o *CreateV2SharedSecretKeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysBadRequest %s", 400, payload)
}

func (o *CreateV2SharedSecretKeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysBadRequest %s", 400, payload)
}

func (o *CreateV2SharedSecretKeysBadRequest) GetPayload() *CreateV2SharedSecretKeysBadRequestBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateV2SharedSecretKeysBadGateway creates a CreateV2SharedSecretKeysBadGateway with default headers values
func NewCreateV2SharedSecretKeysBadGateway() *CreateV2SharedSecretKeysBadGateway {
	return &CreateV2SharedSecretKeysBadGateway{}
}

/*
CreateV2SharedSecretKeysBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateV2SharedSecretKeysBadGateway struct {
	Payload *CreateV2SharedSecretKeysBadGatewayBody
}

// IsSuccess returns true when this create v2 shared secret keys bad gateway response has a 2xx status code
func (o *CreateV2SharedSecretKeysBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create v2 shared secret keys bad gateway response has a 3xx status code
func (o *CreateV2SharedSecretKeysBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys bad gateway response has a 4xx status code
func (o *CreateV2SharedSecretKeysBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create v2 shared secret keys bad gateway response has a 5xx status code
func (o *CreateV2SharedSecretKeysBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create v2 shared secret keys bad gateway response a status code equal to that given
func (o *CreateV2SharedSecretKeysBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create v2 shared secret keys bad gateway response
func (o *CreateV2SharedSecretKeysBadGateway) Code() int {
	return 502
}

func (o *CreateV2SharedSecretKeysBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysBadGateway %s", 502, payload)
}

func (o *CreateV2SharedSecretKeysBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym][%d] createV2SharedSecretKeysBadGateway %s", 502, payload)
}

func (o *CreateV2SharedSecretKeysBadGateway) GetPayload() *CreateV2SharedSecretKeysBadGatewayBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateV2SharedSecretKeysBadGatewayBody create v2 shared secret keys bad gateway body
swagger:model CreateV2SharedSecretKeysBadGatewayBody
*/
type CreateV2SharedSecretKeysBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys bad gateway body
func (o *CreateV2SharedSecretKeysBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys bad gateway body based on context it is used
func (o *CreateV2SharedSecretKeysBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysBadRequestBody create v2 shared secret keys bad request body
swagger:model CreateV2SharedSecretKeysBadRequestBody
*/
type CreateV2SharedSecretKeysBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys bad request body
func (o *CreateV2SharedSecretKeysBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys bad request body based on context it is used
func (o *CreateV2SharedSecretKeysBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysBody create v2 shared secret keys body
swagger:model CreateV2SharedSecretKeysBody
*/
type CreateV2SharedSecretKeysBody struct {

	// client reference information
	ClientReferenceInformation *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateV2SharedSecretKeysParamsBodyKeyInformationItems0 `json:"keyInformation"`
}

// Validate validates this create v2 shared secret keys body
func (o *CreateV2SharedSecretKeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSharedSecretKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSharedSecretKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys body based on the context it is used
func (o *CreateV2SharedSecretKeysBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSharedSecretKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSharedSecretKeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBody kmsV2KeysSymPost201Response
swagger:model CreateV2SharedSecretKeysCreatedBody
*/
type CreateV2SharedSecretKeysCreatedBody struct {

	// client reference information
	ClientReferenceInformation *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0 `json:"keyInformation"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys created body
func (o *CreateV2SharedSecretKeysCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys created body based on the context it is used
func (o *CreateV2SharedSecretKeysCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation create v2 shared secret keys created body client reference information
swagger:model CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation
*/
type CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create v2 shared secret keys created body client reference information
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys created body client reference information based on the context it is used
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner create v2 shared secret keys created body client reference information partner
swagger:model CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner
*/
type CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create v2 shared secret keys created body client reference information partner
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys created body client reference information partner based on context it is used
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0 key information
//
swagger:model CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0
*/
type CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0 struct {

	// error information
	ErrorInformation *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Payworks MerchantId for given organizationId.
	//
	// Max Length: 36
	ExternalOrganizationID string `json:"externalOrganizationId,omitempty"`

	// value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create v2 shared secret keys created body key information items0
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) validateExternalOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ExternalOrganizationID) { // not required
		return nil
	}

	if err := validate.MaxLength("externalOrganizationId", "body", o.ExternalOrganizationID, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys created body key information items0 based on the context it is used
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation create v2 shared secret keys created body key information items0 error information
swagger:model CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation
*/
type CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation struct {

	// details
	Details []*CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create v2 shared secret keys created body key information items0 error information
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys created body key information items0 error information based on the context it is used
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 create v2 shared secret keys created body key information items0 error information details items0
swagger:model CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
*/
type CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create v2 shared secret keys created body key information items0 error information details items0
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys created body key information items0 error information details items0 based on context it is used
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysParamsBodyClientReferenceInformation create v2 shared secret keys params body client reference information
swagger:model CreateV2SharedSecretKeysParamsBodyClientReferenceInformation
*/
type CreateV2SharedSecretKeysParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create v2 shared secret keys params body client reference information
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys params body client reference information based on the context it is used
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner create v2 shared secret keys params body client reference information partner
swagger:model CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner
*/
type CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create v2 shared secret keys params body client reference information partner
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys params body client reference information partner based on context it is used
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysParamsBodyKeyInformationItems0 key information
//
swagger:model CreateV2SharedSecretKeysParamsBodyKeyInformationItems0
*/
type CreateV2SharedSecretKeysParamsBodyKeyInformationItems0 struct {

	// Merchant Id
	//
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this create v2 shared secret keys params body key information items0
func (o *CreateV2SharedSecretKeysParamsBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysParamsBodyKeyInformationItems0) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys params body key information items0 based on context it is used
func (o *CreateV2SharedSecretKeysParamsBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysParamsBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysParamsBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
