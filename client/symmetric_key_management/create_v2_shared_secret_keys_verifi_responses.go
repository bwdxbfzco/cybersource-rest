// Code generated by go-swagger; DO NOT EDIT.

package symmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateV2SharedSecretKeysVerifiReader is a Reader for the CreateV2SharedSecretKeysVerifi structure.
type CreateV2SharedSecretKeysVerifiReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateV2SharedSecretKeysVerifiReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateV2SharedSecretKeysVerifiCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateV2SharedSecretKeysVerifiBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateV2SharedSecretKeysVerifiBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/v2/keys-sym/verifi] createV2SharedSecretKeys-verifi", response, response.Code())
	}
}

// NewCreateV2SharedSecretKeysVerifiCreated creates a CreateV2SharedSecretKeysVerifiCreated with default headers values
func NewCreateV2SharedSecretKeysVerifiCreated() *CreateV2SharedSecretKeysVerifiCreated {
	return &CreateV2SharedSecretKeysVerifiCreated{}
}

/*
CreateV2SharedSecretKeysVerifiCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreateV2SharedSecretKeysVerifiCreated struct {
	Payload *CreateV2SharedSecretKeysVerifiCreatedBody
}

// IsSuccess returns true when this create v2 shared secret keys verifi created response has a 2xx status code
func (o *CreateV2SharedSecretKeysVerifiCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create v2 shared secret keys verifi created response has a 3xx status code
func (o *CreateV2SharedSecretKeysVerifiCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys verifi created response has a 4xx status code
func (o *CreateV2SharedSecretKeysVerifiCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create v2 shared secret keys verifi created response has a 5xx status code
func (o *CreateV2SharedSecretKeysVerifiCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create v2 shared secret keys verifi created response a status code equal to that given
func (o *CreateV2SharedSecretKeysVerifiCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create v2 shared secret keys verifi created response
func (o *CreateV2SharedSecretKeysVerifiCreated) Code() int {
	return 201
}

func (o *CreateV2SharedSecretKeysVerifiCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiCreated %s", 201, payload)
}

func (o *CreateV2SharedSecretKeysVerifiCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiCreated %s", 201, payload)
}

func (o *CreateV2SharedSecretKeysVerifiCreated) GetPayload() *CreateV2SharedSecretKeysVerifiCreatedBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysVerifiCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysVerifiCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateV2SharedSecretKeysVerifiBadRequest creates a CreateV2SharedSecretKeysVerifiBadRequest with default headers values
func NewCreateV2SharedSecretKeysVerifiBadRequest() *CreateV2SharedSecretKeysVerifiBadRequest {
	return &CreateV2SharedSecretKeysVerifiBadRequest{}
}

/*
CreateV2SharedSecretKeysVerifiBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreateV2SharedSecretKeysVerifiBadRequest struct {
	Payload *CreateV2SharedSecretKeysVerifiBadRequestBody
}

// IsSuccess returns true when this create v2 shared secret keys verifi bad request response has a 2xx status code
func (o *CreateV2SharedSecretKeysVerifiBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create v2 shared secret keys verifi bad request response has a 3xx status code
func (o *CreateV2SharedSecretKeysVerifiBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys verifi bad request response has a 4xx status code
func (o *CreateV2SharedSecretKeysVerifiBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create v2 shared secret keys verifi bad request response has a 5xx status code
func (o *CreateV2SharedSecretKeysVerifiBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create v2 shared secret keys verifi bad request response a status code equal to that given
func (o *CreateV2SharedSecretKeysVerifiBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create v2 shared secret keys verifi bad request response
func (o *CreateV2SharedSecretKeysVerifiBadRequest) Code() int {
	return 400
}

func (o *CreateV2SharedSecretKeysVerifiBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiBadRequest %s", 400, payload)
}

func (o *CreateV2SharedSecretKeysVerifiBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiBadRequest %s", 400, payload)
}

func (o *CreateV2SharedSecretKeysVerifiBadRequest) GetPayload() *CreateV2SharedSecretKeysVerifiBadRequestBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysVerifiBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysVerifiBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateV2SharedSecretKeysVerifiBadGateway creates a CreateV2SharedSecretKeysVerifiBadGateway with default headers values
func NewCreateV2SharedSecretKeysVerifiBadGateway() *CreateV2SharedSecretKeysVerifiBadGateway {
	return &CreateV2SharedSecretKeysVerifiBadGateway{}
}

/*
CreateV2SharedSecretKeysVerifiBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateV2SharedSecretKeysVerifiBadGateway struct {
	Payload *CreateV2SharedSecretKeysVerifiBadGatewayBody
}

// IsSuccess returns true when this create v2 shared secret keys verifi bad gateway response has a 2xx status code
func (o *CreateV2SharedSecretKeysVerifiBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create v2 shared secret keys verifi bad gateway response has a 3xx status code
func (o *CreateV2SharedSecretKeysVerifiBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create v2 shared secret keys verifi bad gateway response has a 4xx status code
func (o *CreateV2SharedSecretKeysVerifiBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create v2 shared secret keys verifi bad gateway response has a 5xx status code
func (o *CreateV2SharedSecretKeysVerifiBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create v2 shared secret keys verifi bad gateway response a status code equal to that given
func (o *CreateV2SharedSecretKeysVerifiBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create v2 shared secret keys verifi bad gateway response
func (o *CreateV2SharedSecretKeysVerifiBadGateway) Code() int {
	return 502
}

func (o *CreateV2SharedSecretKeysVerifiBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiBadGateway %s", 502, payload)
}

func (o *CreateV2SharedSecretKeysVerifiBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-sym/verifi][%d] createV2SharedSecretKeysVerifiBadGateway %s", 502, payload)
}

func (o *CreateV2SharedSecretKeysVerifiBadGateway) GetPayload() *CreateV2SharedSecretKeysVerifiBadGatewayBody {
	return o.Payload
}

func (o *CreateV2SharedSecretKeysVerifiBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateV2SharedSecretKeysVerifiBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateV2SharedSecretKeysVerifiBadGatewayBody create v2 shared secret keys verifi bad gateway body
swagger:model CreateV2SharedSecretKeysVerifiBadGatewayBody
*/
type CreateV2SharedSecretKeysVerifiBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi bad gateway body
func (o *CreateV2SharedSecretKeysVerifiBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi bad gateway body based on context it is used
func (o *CreateV2SharedSecretKeysVerifiBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiBadRequestBody create v2 shared secret keys verifi bad request body
swagger:model CreateV2SharedSecretKeysVerifiBadRequestBody
*/
type CreateV2SharedSecretKeysVerifiBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi bad request body
func (o *CreateV2SharedSecretKeysVerifiBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi bad request body based on context it is used
func (o *CreateV2SharedSecretKeysVerifiBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiBody create v2 shared secret keys verifi body
swagger:model CreateV2SharedSecretKeysVerifiBody
*/
type CreateV2SharedSecretKeysVerifiBody struct {

	// client reference information
	ClientReferenceInformation *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0 `json:"keyInformation"`
}

// Validate validates this create v2 shared secret keys verifi body
func (o *CreateV2SharedSecretKeysVerifiBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi body based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBody kmsV2KeysSymPost201Response
swagger:model CreateV2SharedSecretKeysVerifiCreatedBody
*/
type CreateV2SharedSecretKeysVerifiCreatedBody struct {

	// client reference information
	ClientReferenceInformation *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0 `json:"keyInformation"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body
func (o *CreateV2SharedSecretKeysVerifiCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi created body based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation create v2 shared secret keys verifi created body client reference information
swagger:model CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation
*/
type CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body client reference information
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysVerifiCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi created body client reference information based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createV2SharedSecretKeysVerifiCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner create v2 shared secret keys verifi created body client reference information partner
swagger:model CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner
*/
type CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body client reference information partner
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysVerifiCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createV2SharedSecretKeysVerifiCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi created body client reference information partner based on context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0 key information
//
swagger:model CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0
*/
type CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0 struct {

	// error information
	ErrorInformation *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Payworks MerchantId for given organizationId.
	//
	// Max Length: 36
	ExternalOrganizationID string `json:"externalOrganizationId,omitempty"`

	// value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body key information items0
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) validateExternalOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ExternalOrganizationID) { // not required
		return nil
	}

	if err := validate.MaxLength("externalOrganizationId", "body", o.ExternalOrganizationID, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi created body key information items0 based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation create v2 shared secret keys verifi created body key information items0 error information
swagger:model CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation
*/
type CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation struct {

	// details
	Details []*CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body key information items0 error information
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi created body key information items0 error information based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 create v2 shared secret keys verifi created body key information items0 error information details items0
swagger:model CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
*/
type CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi created body key information items0 error information details items0
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi created body key information items0 error information details items0 based on context it is used
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation create v2 shared secret keys verifi params body client reference information
swagger:model CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation
*/
type CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi params body client reference information
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysVerifiRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create v2 shared secret keys verifi params body client reference information based on the context it is used
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createSharedSecretKeysVerifiRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner create v2 shared secret keys verifi params body client reference information partner
swagger:model CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner
*/
type CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi params body client reference information partner
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysVerifiRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createSharedSecretKeysVerifiRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi params body client reference information partner based on context it is used
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0 key information
//
swagger:model CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0
*/
type CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0 struct {

	// Algorithm for message signature authentication
	//
	// Enum: ["HMACSHA1","HMACSHA2"]
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty"`

	// Merchant Id
	//
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this create v2 shared secret keys verifi params body key information items0
func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDigestAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0TypeDigestAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HMACSHA1","HMACSHA2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0TypeDigestAlgorithmPropEnum = append(createV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0TypeDigestAlgorithmPropEnum, v)
	}
}

const (

	// CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0DigestAlgorithmHMACSHA1 captures enum value "HMACSHA1"
	CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0DigestAlgorithmHMACSHA1 string = "HMACSHA1"

	// CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0DigestAlgorithmHMACSHA2 captures enum value "HMACSHA2"
	CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0DigestAlgorithmHMACSHA2 string = "HMACSHA2"
)

// prop value enum
func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) validateDigestAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0TypeDigestAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) validateDigestAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(o.DigestAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := o.validateDigestAlgorithmEnum("digestAlgorithm", "body", *o.DigestAlgorithm); err != nil {
		return err
	}

	return nil
}

func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create v2 shared secret keys verifi params body key information items0 based on context it is used
func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateV2SharedSecretKeysVerifiParamsBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
