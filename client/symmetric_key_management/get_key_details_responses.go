// Code generated by go-swagger; DO NOT EDIT.

package symmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetKeyDetailsReader is a Reader for the GetKeyDetails structure.
type GetKeyDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKeyDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKeyDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKeyDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetKeyDetailsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /kms/v2/keys-sym/{keyId}] getKeyDetails", response, response.Code())
	}
}

// NewGetKeyDetailsOK creates a GetKeyDetailsOK with default headers values
func NewGetKeyDetailsOK() *GetKeyDetailsOK {
	return &GetKeyDetailsOK{}
}

/*
GetKeyDetailsOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetKeyDetailsOK struct {
	Payload *GetKeyDetailsOKBody
}

// IsSuccess returns true when this get key details o k response has a 2xx status code
func (o *GetKeyDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get key details o k response has a 3xx status code
func (o *GetKeyDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key details o k response has a 4xx status code
func (o *GetKeyDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get key details o k response has a 5xx status code
func (o *GetKeyDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get key details o k response a status code equal to that given
func (o *GetKeyDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get key details o k response
func (o *GetKeyDetailsOK) Code() int {
	return 200
}

func (o *GetKeyDetailsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsOK %s", 200, payload)
}

func (o *GetKeyDetailsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsOK %s", 200, payload)
}

func (o *GetKeyDetailsOK) GetPayload() *GetKeyDetailsOKBody {
	return o.Payload
}

func (o *GetKeyDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetKeyDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyDetailsBadRequest creates a GetKeyDetailsBadRequest with default headers values
func NewGetKeyDetailsBadRequest() *GetKeyDetailsBadRequest {
	return &GetKeyDetailsBadRequest{}
}

/*
GetKeyDetailsBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type GetKeyDetailsBadRequest struct {
	Payload *GetKeyDetailsBadRequestBody
}

// IsSuccess returns true when this get key details bad request response has a 2xx status code
func (o *GetKeyDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key details bad request response has a 3xx status code
func (o *GetKeyDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key details bad request response has a 4xx status code
func (o *GetKeyDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key details bad request response has a 5xx status code
func (o *GetKeyDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get key details bad request response a status code equal to that given
func (o *GetKeyDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get key details bad request response
func (o *GetKeyDetailsBadRequest) Code() int {
	return 400
}

func (o *GetKeyDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsBadRequest %s", 400, payload)
}

func (o *GetKeyDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsBadRequest %s", 400, payload)
}

func (o *GetKeyDetailsBadRequest) GetPayload() *GetKeyDetailsBadRequestBody {
	return o.Payload
}

func (o *GetKeyDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetKeyDetailsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyDetailsBadGateway creates a GetKeyDetailsBadGateway with default headers values
func NewGetKeyDetailsBadGateway() *GetKeyDetailsBadGateway {
	return &GetKeyDetailsBadGateway{}
}

/*
GetKeyDetailsBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetKeyDetailsBadGateway struct {
	Payload *GetKeyDetailsBadGatewayBody
}

// IsSuccess returns true when this get key details bad gateway response has a 2xx status code
func (o *GetKeyDetailsBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key details bad gateway response has a 3xx status code
func (o *GetKeyDetailsBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key details bad gateway response has a 4xx status code
func (o *GetKeyDetailsBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get key details bad gateway response has a 5xx status code
func (o *GetKeyDetailsBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get key details bad gateway response a status code equal to that given
func (o *GetKeyDetailsBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get key details bad gateway response
func (o *GetKeyDetailsBadGateway) Code() int {
	return 502
}

func (o *GetKeyDetailsBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsBadGateway %s", 502, payload)
}

func (o *GetKeyDetailsBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-sym/{keyId}][%d] getKeyDetailsBadGateway %s", 502, payload)
}

func (o *GetKeyDetailsBadGateway) GetPayload() *GetKeyDetailsBadGatewayBody {
	return o.Payload
}

func (o *GetKeyDetailsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetKeyDetailsBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetKeyDetailsBadGatewayBody get key details bad gateway body
swagger:model GetKeyDetailsBadGatewayBody
*/
type GetKeyDetailsBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get key details bad gateway body
func (o *GetKeyDetailsBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get key details bad gateway body based on context it is used
func (o *GetKeyDetailsBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetKeyDetailsBadRequestBody get key details bad request body
swagger:model GetKeyDetailsBadRequestBody
*/
type GetKeyDetailsBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get key details bad request body
func (o *GetKeyDetailsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get key details bad request body based on context it is used
func (o *GetKeyDetailsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetKeyDetailsOKBody kmsV2KeysSymGet200Response
swagger:model GetKeyDetailsOKBody
*/
type GetKeyDetailsOKBody struct {

	// key information
	KeyInformation *GetKeyDetailsOKBodyKeyInformation `json:"keyInformation,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get key details o k body
func (o *GetKeyDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get key details o k body based on the context it is used
func (o *GetKeyDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if swag.IsZero(o.KeyInformation) { // not required
			return nil
		}

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetKeyDetailsOKBodyKeyInformation key information
//
swagger:model GetKeyDetailsOKBodyKeyInformation
*/
type GetKeyDetailsOKBodyKeyInformation struct {

	// error information
	ErrorInformation *GetKeyDetailsOKBodyKeyInformationErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Key serial number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	//
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//  - INACTIVE
	//  - EXPIRED
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get key details o k body key information
func (o *GetKeyDetailsOKBodyKeyInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBodyKeyInformation) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get key details o k body key information based on the context it is used
func (o *GetKeyDetailsOKBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBodyKeyInformation) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsOKBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetKeyDetailsOKBodyKeyInformationErrorInformation get key details o k body key information error information
swagger:model GetKeyDetailsOKBodyKeyInformationErrorInformation
*/
type GetKeyDetailsOKBodyKeyInformationErrorInformation struct {

	// details
	Details []*GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get key details o k body key information error information
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get key details o k body key information error information based on the context it is used
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getKeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsOKBodyKeyInformationErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 get key details o k body key information error information details items0
swagger:model GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0
*/
type GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get key details o k body key information error information details items0
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get key details o k body key information error information details items0 based on context it is used
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetKeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
