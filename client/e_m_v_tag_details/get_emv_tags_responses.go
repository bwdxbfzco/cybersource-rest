// Code generated by go-swagger; DO NOT EDIT.

package e_m_v_tag_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEmvTagsReader is a Reader for the GetEmvTags structure.
type GetEmvTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEmvTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEmvTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEmvTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEmvTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tss/v2/transactions/emvTagDetails] getEmvTags", response, response.Code())
	}
}

// NewGetEmvTagsOK creates a GetEmvTagsOK with default headers values
func NewGetEmvTagsOK() *GetEmvTagsOK {
	return &GetEmvTagsOK{}
}

/*
GetEmvTagsOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetEmvTagsOK struct {
	Payload *GetEmvTagsOKBody
}

// IsSuccess returns true when this get emv tags o k response has a 2xx status code
func (o *GetEmvTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get emv tags o k response has a 3xx status code
func (o *GetEmvTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get emv tags o k response has a 4xx status code
func (o *GetEmvTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get emv tags o k response has a 5xx status code
func (o *GetEmvTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get emv tags o k response a status code equal to that given
func (o *GetEmvTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get emv tags o k response
func (o *GetEmvTagsOK) Code() int {
	return 200
}

func (o *GetEmvTagsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsOK %s", 200, payload)
}

func (o *GetEmvTagsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsOK %s", 200, payload)
}

func (o *GetEmvTagsOK) GetPayload() *GetEmvTagsOKBody {
	return o.Payload
}

func (o *GetEmvTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEmvTagsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEmvTagsNotFound creates a GetEmvTagsNotFound with default headers values
func NewGetEmvTagsNotFound() *GetEmvTagsNotFound {
	return &GetEmvTagsNotFound{}
}

/*
GetEmvTagsNotFound describes a response with status code 404, with default header values.

The specified resource not found in the system.
*/
type GetEmvTagsNotFound struct {
}

// IsSuccess returns true when this get emv tags not found response has a 2xx status code
func (o *GetEmvTagsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get emv tags not found response has a 3xx status code
func (o *GetEmvTagsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get emv tags not found response has a 4xx status code
func (o *GetEmvTagsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get emv tags not found response has a 5xx status code
func (o *GetEmvTagsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get emv tags not found response a status code equal to that given
func (o *GetEmvTagsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get emv tags not found response
func (o *GetEmvTagsNotFound) Code() int {
	return 404
}

func (o *GetEmvTagsNotFound) Error() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsNotFound", 404)
}

func (o *GetEmvTagsNotFound) String() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsNotFound", 404)
}

func (o *GetEmvTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEmvTagsInternalServerError creates a GetEmvTagsInternalServerError with default headers values
func NewGetEmvTagsInternalServerError() *GetEmvTagsInternalServerError {
	return &GetEmvTagsInternalServerError{}
}

/*
GetEmvTagsInternalServerError describes a response with status code 500, with default header values.

Unexpected server error
*/
type GetEmvTagsInternalServerError struct {
}

// IsSuccess returns true when this get emv tags internal server error response has a 2xx status code
func (o *GetEmvTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get emv tags internal server error response has a 3xx status code
func (o *GetEmvTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get emv tags internal server error response has a 4xx status code
func (o *GetEmvTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get emv tags internal server error response has a 5xx status code
func (o *GetEmvTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get emv tags internal server error response a status code equal to that given
func (o *GetEmvTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get emv tags internal server error response
func (o *GetEmvTagsInternalServerError) Code() int {
	return 500
}

func (o *GetEmvTagsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsInternalServerError", 500)
}

func (o *GetEmvTagsInternalServerError) String() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/emvTagDetails][%d] getEmvTagsInternalServerError", 500)
}

func (o *GetEmvTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetEmvTagsOKBody tssV2GetEmvTags200Response
swagger:model GetEmvTagsOKBody
*/
type GetEmvTagsOKBody struct {

	// An array of objects with each object containing a single EMV tag from the dictionary.
	//
	EmvTagBreakdownList []*GetEmvTagsOKBodyEmvTagBreakdownListItems0 `json:"emvTagBreakdownList"`
}

// Validate validates this get emv tags o k body
func (o *GetEmvTagsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmvTagBreakdownList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmvTagsOKBody) validateEmvTagBreakdownList(formats strfmt.Registry) error {
	if swag.IsZero(o.EmvTagBreakdownList) { // not required
		return nil
	}

	for i := 0; i < len(o.EmvTagBreakdownList); i++ {
		if swag.IsZero(o.EmvTagBreakdownList[i]) { // not required
			continue
		}

		if o.EmvTagBreakdownList[i] != nil {
			if err := o.EmvTagBreakdownList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEmvTagsOK" + "." + "emvTagBreakdownList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getEmvTagsOK" + "." + "emvTagBreakdownList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get emv tags o k body based on the context it is used
func (o *GetEmvTagsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmvTagBreakdownList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmvTagsOKBody) contextValidateEmvTagBreakdownList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.EmvTagBreakdownList); i++ {

		if o.EmvTagBreakdownList[i] != nil {

			if swag.IsZero(o.EmvTagBreakdownList[i]) { // not required
				return nil
			}

			if err := o.EmvTagBreakdownList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEmvTagsOK" + "." + "emvTagBreakdownList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getEmvTagsOK" + "." + "emvTagBreakdownList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEmvTagsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmvTagsOKBody) UnmarshalBinary(b []byte) error {
	var res GetEmvTagsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetEmvTagsOKBodyEmvTagBreakdownListItems0 get emv tags o k body emv tag breakdown list items0
swagger:model GetEmvTagsOKBodyEmvTagBreakdownListItems0
*/
type GetEmvTagsOKBodyEmvTagBreakdownListItems0 struct {

	// Name of tag.
	//
	// Max Length: 70
	Name string `json:"name,omitempty"`

	// Hexadecimal code of tag.
	//
	// Pattern: ^[0-9A-F]*$
	Tag string `json:"tag,omitempty"`
}

// Validate validates this get emv tags o k body emv tag breakdown list items0
func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", o.Name, 70); err != nil {
		return err
	}

	return nil
}

func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) validateTag(formats strfmt.Registry) error {
	if swag.IsZero(o.Tag) { // not required
		return nil
	}

	if err := validate.Pattern("tag", "body", o.Tag, `^[0-9A-F]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get emv tags o k body emv tag breakdown list items0 based on context it is used
func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmvTagsOKBodyEmvTagBreakdownListItems0) UnmarshalBinary(b []byte) error {
	var res GetEmvTagsOKBodyEmvTagBreakdownListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
