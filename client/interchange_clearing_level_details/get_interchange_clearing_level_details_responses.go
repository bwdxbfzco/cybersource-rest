// Code generated by go-swagger; DO NOT EDIT.

package interchange_clearing_level_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInterchangeClearingLevelDetailsReader is a Reader for the GetInterchangeClearingLevelDetails structure.
type GetInterchangeClearingLevelDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInterchangeClearingLevelDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInterchangeClearingLevelDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /reporting/v3/interchange-clearing-level-details] getInterchangeClearingLevelDetails", response, response.Code())
	}
}

// NewGetInterchangeClearingLevelDetailsOK creates a GetInterchangeClearingLevelDetailsOK with default headers values
func NewGetInterchangeClearingLevelDetailsOK() *GetInterchangeClearingLevelDetailsOK {
	return &GetInterchangeClearingLevelDetailsOK{}
}

/*
GetInterchangeClearingLevelDetailsOK describes a response with status code 200, with default header values.

Ok
*/
type GetInterchangeClearingLevelDetailsOK struct {
	Payload *GetInterchangeClearingLevelDetailsOKBody
}

// IsSuccess returns true when this get interchange clearing level details o k response has a 2xx status code
func (o *GetInterchangeClearingLevelDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get interchange clearing level details o k response has a 3xx status code
func (o *GetInterchangeClearingLevelDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get interchange clearing level details o k response has a 4xx status code
func (o *GetInterchangeClearingLevelDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get interchange clearing level details o k response has a 5xx status code
func (o *GetInterchangeClearingLevelDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get interchange clearing level details o k response a status code equal to that given
func (o *GetInterchangeClearingLevelDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get interchange clearing level details o k response
func (o *GetInterchangeClearingLevelDetailsOK) Code() int {
	return 200
}

func (o *GetInterchangeClearingLevelDetailsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/interchange-clearing-level-details][%d] getInterchangeClearingLevelDetailsOK %s", 200, payload)
}

func (o *GetInterchangeClearingLevelDetailsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/interchange-clearing-level-details][%d] getInterchangeClearingLevelDetailsOK %s", 200, payload)
}

func (o *GetInterchangeClearingLevelDetailsOK) GetPayload() *GetInterchangeClearingLevelDetailsOKBody {
	return o.Payload
}

func (o *GetInterchangeClearingLevelDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetInterchangeClearingLevelDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetInterchangeClearingLevelDetailsOKBody reportingV3InterchangeClearingLevelDetailsGet200Response
swagger:model GetInterchangeClearingLevelDetailsOKBody
*/
type GetInterchangeClearingLevelDetailsOKBody struct {

	// Valid report Start Date in **ISO 8601 format**.
	//
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// List of InterchangeClearingLevelDetail
	InterchangeClearingLevelDetails []*GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0 `json:"interchangeClearingLevelDetails"`

	// Valid report Start Date in **ISO 8601 format**.
	// Please refer the following link to know more about ISO 8601 format.
	// - https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14
	//
	// **Example:**
	// - yyyy-MM-dd'T'HH:mm:ss.SSSZZ
	//
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this get interchange clearing level details o k body
func (o *GetInterchangeClearingLevelDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterchangeClearingLevelDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBody) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(o.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("getInterchangeClearingLevelDetailsOK"+"."+"endDate", "body", "date-time", o.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBody) validateInterchangeClearingLevelDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.InterchangeClearingLevelDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.InterchangeClearingLevelDetails); i++ {
		if swag.IsZero(o.InterchangeClearingLevelDetails[i]) { // not required
			continue
		}

		if o.InterchangeClearingLevelDetails[i] != nil {
			if err := o.InterchangeClearingLevelDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInterchangeClearingLevelDetailsOK" + "." + "interchangeClearingLevelDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInterchangeClearingLevelDetailsOK" + "." + "interchangeClearingLevelDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBody) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(o.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("getInterchangeClearingLevelDetailsOK"+"."+"startDate", "body", "date-time", o.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get interchange clearing level details o k body based on the context it is used
func (o *GetInterchangeClearingLevelDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInterchangeClearingLevelDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBody) contextValidateInterchangeClearingLevelDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.InterchangeClearingLevelDetails); i++ {

		if o.InterchangeClearingLevelDetails[i] != nil {

			if swag.IsZero(o.InterchangeClearingLevelDetails[i]) { // not required
				return nil
			}

			if err := o.InterchangeClearingLevelDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInterchangeClearingLevelDetailsOK" + "." + "interchangeClearingLevelDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getInterchangeClearingLevelDetailsOK" + "." + "interchangeClearingLevelDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInterchangeClearingLevelDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInterchangeClearingLevelDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res GetInterchangeClearingLevelDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0 get interchange clearing level details o k body interchange clearing level details items0
swagger:model GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0
*/
type GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0 struct {

	// account Id
	// Example: testrest_acct
	AccountID string `json:"accountId,omitempty"`

	// account suffix
	// Example: 2393
	AccountSuffix string `json:"accountSuffix,omitempty"`

	// amount
	// Example: 90.50
	Amount string `json:"amount,omitempty"`

	// application name
	// Example: ics_auth
	ApplicationName string `json:"applicationName,omitempty"`

	// auth code
	// Example: 012628
	AuthCode string `json:"authCode,omitempty"`

	// batch time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	BatchTime strfmt.DateTime `json:"batchTime,omitempty"`

	// billback amount
	// Example: -1.46
	BillbackAmount string `json:"billbackAmount,omitempty"`

	// billback reason code
	// Example: VI
	BillbackReasonCode string `json:"billbackReasonCode,omitempty"`

	// billback reason description
	// Example: B278-TRANSACTION CLEARED AS REGULATED
	BillbackReasonDescription string `json:"billbackReasonDescription,omitempty"`

	// card indicator
	// Example: P
	CardIndicator string `json:"cardIndicator,omitempty"`

	// cleared level
	// Example: REG
	ClearedLevel string `json:"clearedLevel,omitempty"`

	// clearing rate amount one
	// Example: 0.005
	ClearingRateAmountOne string `json:"clearingRateAmountOne,omitempty"`

	// clearing rate amount three
	// Example: 0.0
	ClearingRateAmountThree string `json:"clearingRateAmountThree,omitempty"`

	// clearing rate amount two
	// Example: 0.22
	ClearingRateAmountTwo string `json:"clearingRateAmountTwo,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	ClearingRateCurrencyCode string `json:"clearingRateCurrencyCode,omitempty"`

	// conversion rate
	// Example: 1.0
	ConversionRate string `json:"conversionRate,omitempty"`

	// credit delta indicator
	// Example: N
	CreditDeltaIndicator string `json:"creditDeltaIndicator,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	CurrencyCode string `json:"currencyCode,omitempty"`

	// delta cost
	// Example: 5.0
	DeltaCost string `json:"deltaCost,omitempty"`

	// discount amount
	// Example: 0.0
	DiscountAmount string `json:"discountAmount,omitempty"`

	// discount rate
	// Example: 0.0
	DiscountRate string `json:"discountRate,omitempty"`

	// downgrade reason code
	// Example: 1
	DowngradeReasonCode string `json:"downgradeReasonCode,omitempty"`

	// fee category
	// Example: A
	FeeCategory string `json:"feeCategory,omitempty"`

	// interchange amount
	// Example: 0.27
	InterchangeAmount string `json:"interchangeAmount,omitempty"`

	// merchant batch number
	// Example: 000000037800
	MerchantBatchNumber string `json:"merchantBatchNumber,omitempty"`

	// merchant priced level
	// Example: 1.72
	MerchantPricedLevel string `json:"merchantPricedLevel,omitempty"`

	// merchant reference number
	// Example: 33557799
	MerchantReferenceNumber string `json:"merchantReferenceNumber,omitempty"`

	// minimum unit
	// Example: 1
	MinimumUnit int64 `json:"minimumUnit,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	MinimumUnitCurrencyCode string `json:"minimumUnitCurrencyCode,omitempty"`

	// organization Id
	// Example: testrest
	OrganizationID string `json:"organizationId,omitempty"`

	// payment sub type
	// Example: VI
	PaymentSubType string `json:"paymentSubType,omitempty"`

	// payment sub type description
	// Example: Visa
	PaymentSubTypeDescription string `json:"paymentSubTypeDescription,omitempty"`

	// per transaction charged
	// Example: 5.0
	PerTransactionCharged string `json:"perTransactionCharged,omitempty"`

	// percent rate charged
	// Example: 5.5
	PercentRateCharged string `json:"percentRateCharged,omitempty"`

	// price amount one
	// Example: 0.018
	PriceAmountOne string `json:"priceAmountOne,omitempty"`

	// price amount two
	// Example: 0.1
	PriceAmountTwo string `json:"priceAmountTwo,omitempty"`

	// price type
	// Example: 077
	PriceType string `json:"priceType,omitempty"`

	// process time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	ProcessTime strfmt.DateTime `json:"processTime,omitempty"`

	// processed time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	ProcessedTime strfmt.DateTime `json:"processedTime,omitempty"`

	// processor batch number
	// Example: 00001
	ProcessorBatchNumber string `json:"processorBatchNumber,omitempty"`

	// processor merchant Id
	// Example: 174180221999
	ProcessorMerchantID string `json:"processorMerchantId,omitempty"`

	// re class
	// Example: 0
	ReClass string `json:"reClass,omitempty"`

	// request Id
	// Example: 5166566062346232701541
	RequestID string `json:"requestId,omitempty"`

	// settlement amount
	// Example: 1.23
	SettlementAmount string `json:"settlementAmount,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	SettlementCurrencyCode string `json:"settlementCurrencyCode,omitempty"`

	// settlement processor
	// Example: fdiglobal
	SettlementProcessor string `json:"settlementProcessor,omitempty"`

	// settlement time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	SettlementTime strfmt.DateTime `json:"settlementTime,omitempty"`

	// surcharge amount
	// Example: 5.0
	SurchargeAmount string `json:"surchargeAmount,omitempty"`

	// transaction reference number
	// Example: 21339480
	TransactionReferenceNumber string `json:"transactionReferenceNumber,omitempty"`

	// transaction time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	TransactionTime strfmt.DateTime `json:"transactionTime,omitempty"`

	// transaction type
	// Example: Sale
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this get interchange clearing level details o k body interchange clearing level details items0
func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBatchTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) validateBatchTime(formats strfmt.Registry) error {
	if swag.IsZero(o.BatchTime) { // not required
		return nil
	}

	if err := validate.FormatOf("batchTime", "body", "date-time", o.BatchTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) validateProcessTime(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessTime) { // not required
		return nil
	}

	if err := validate.FormatOf("processTime", "body", "date-time", o.ProcessTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) validateProcessedTime(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("processedTime", "body", "date-time", o.ProcessedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) validateSettlementTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementTime) { // not required
		return nil
	}

	if err := validate.FormatOf("settlementTime", "body", "date-time", o.SettlementTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) validateTransactionTime(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("transactionTime", "body", "date-time", o.TransactionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get interchange clearing level details o k body interchange clearing level details items0 based on context it is used
func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInterchangeClearingLevelDetailsOKBodyInterchangeClearingLevelDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
