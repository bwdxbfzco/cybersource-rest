// Code generated by go-swagger; DO NOT EDIT.

package manage_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaveAsymEgressKeyReader is a Reader for the SaveAsymEgressKey structure.
type SaveAsymEgressKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveAsymEgressKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSaveAsymEgressKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSaveAsymEgressKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSaveAsymEgressKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewSaveAsymEgressKeyBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/egress/v2/keys-asym] saveAsymEgressKey", response, response.Code())
	}
}

// NewSaveAsymEgressKeyCreated creates a SaveAsymEgressKeyCreated with default headers values
func NewSaveAsymEgressKeyCreated() *SaveAsymEgressKeyCreated {
	return &SaveAsymEgressKeyCreated{}
}

/*
SaveAsymEgressKeyCreated describes a response with status code 201, with default header values.

Successful Response
*/
type SaveAsymEgressKeyCreated struct {
	Payload *SaveAsymEgressKeyCreatedBody
}

// IsSuccess returns true when this save asym egress key created response has a 2xx status code
func (o *SaveAsymEgressKeyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this save asym egress key created response has a 3xx status code
func (o *SaveAsymEgressKeyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save asym egress key created response has a 4xx status code
func (o *SaveAsymEgressKeyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this save asym egress key created response has a 5xx status code
func (o *SaveAsymEgressKeyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this save asym egress key created response a status code equal to that given
func (o *SaveAsymEgressKeyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the save asym egress key created response
func (o *SaveAsymEgressKeyCreated) Code() int {
	return 201
}

func (o *SaveAsymEgressKeyCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyCreated %s", 201, payload)
}

func (o *SaveAsymEgressKeyCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyCreated %s", 201, payload)
}

func (o *SaveAsymEgressKeyCreated) GetPayload() *SaveAsymEgressKeyCreatedBody {
	return o.Payload
}

func (o *SaveAsymEgressKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SaveAsymEgressKeyCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveAsymEgressKeyBadRequest creates a SaveAsymEgressKeyBadRequest with default headers values
func NewSaveAsymEgressKeyBadRequest() *SaveAsymEgressKeyBadRequest {
	return &SaveAsymEgressKeyBadRequest{}
}

/*
SaveAsymEgressKeyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SaveAsymEgressKeyBadRequest struct {
}

// IsSuccess returns true when this save asym egress key bad request response has a 2xx status code
func (o *SaveAsymEgressKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save asym egress key bad request response has a 3xx status code
func (o *SaveAsymEgressKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save asym egress key bad request response has a 4xx status code
func (o *SaveAsymEgressKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this save asym egress key bad request response has a 5xx status code
func (o *SaveAsymEgressKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this save asym egress key bad request response a status code equal to that given
func (o *SaveAsymEgressKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the save asym egress key bad request response
func (o *SaveAsymEgressKeyBadRequest) Code() int {
	return 400
}

func (o *SaveAsymEgressKeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyBadRequest", 400)
}

func (o *SaveAsymEgressKeyBadRequest) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyBadRequest", 400)
}

func (o *SaveAsymEgressKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveAsymEgressKeyUnauthorized creates a SaveAsymEgressKeyUnauthorized with default headers values
func NewSaveAsymEgressKeyUnauthorized() *SaveAsymEgressKeyUnauthorized {
	return &SaveAsymEgressKeyUnauthorized{}
}

/*
SaveAsymEgressKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type SaveAsymEgressKeyUnauthorized struct {
}

// IsSuccess returns true when this save asym egress key unauthorized response has a 2xx status code
func (o *SaveAsymEgressKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save asym egress key unauthorized response has a 3xx status code
func (o *SaveAsymEgressKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save asym egress key unauthorized response has a 4xx status code
func (o *SaveAsymEgressKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this save asym egress key unauthorized response has a 5xx status code
func (o *SaveAsymEgressKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this save asym egress key unauthorized response a status code equal to that given
func (o *SaveAsymEgressKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the save asym egress key unauthorized response
func (o *SaveAsymEgressKeyUnauthorized) Code() int {
	return 401
}

func (o *SaveAsymEgressKeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyUnauthorized", 401)
}

func (o *SaveAsymEgressKeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyUnauthorized", 401)
}

func (o *SaveAsymEgressKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSaveAsymEgressKeyBadGateway creates a SaveAsymEgressKeyBadGateway with default headers values
func NewSaveAsymEgressKeyBadGateway() *SaveAsymEgressKeyBadGateway {
	return &SaveAsymEgressKeyBadGateway{}
}

/*
SaveAsymEgressKeyBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout
*/
type SaveAsymEgressKeyBadGateway struct {
}

// IsSuccess returns true when this save asym egress key bad gateway response has a 2xx status code
func (o *SaveAsymEgressKeyBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this save asym egress key bad gateway response has a 3xx status code
func (o *SaveAsymEgressKeyBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this save asym egress key bad gateway response has a 4xx status code
func (o *SaveAsymEgressKeyBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this save asym egress key bad gateway response has a 5xx status code
func (o *SaveAsymEgressKeyBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this save asym egress key bad gateway response a status code equal to that given
func (o *SaveAsymEgressKeyBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the save asym egress key bad gateway response
func (o *SaveAsymEgressKeyBadGateway) Code() int {
	return 502
}

func (o *SaveAsymEgressKeyBadGateway) Error() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyBadGateway", 502)
}

func (o *SaveAsymEgressKeyBadGateway) String() string {
	return fmt.Sprintf("[POST /kms/egress/v2/keys-asym][%d] saveAsymEgressKeyBadGateway", 502)
}

func (o *SaveAsymEgressKeyBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SaveAsymEgressKeyBody save asym egress key body
swagger:model SaveAsymEgressKeyBody
*/
type SaveAsymEgressKeyBody struct {

	// client reference information
	ClientReferenceInformation *SaveAsymEgressKeyParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// Client request action.
	//
	// Required: true
	ClientRequestAction *string `json:"clientRequestAction"`

	// key information
	// Required: true
	KeyInformation *SaveAsymEgressKeyParamsBodyKeyInformation `json:"keyInformation"`
}

// Validate validates this save asym egress key body
func (o *SaveAsymEgressKeyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientRequestAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveAsymEgressKey" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveAsymEgressKey" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveAsymEgressKeyBody) validateClientRequestAction(formats strfmt.Registry) error {

	if err := validate.Required("SaveAsymEgressKey"+"."+"clientRequestAction", "body", o.ClientRequestAction); err != nil {
		return err
	}

	return nil
}

func (o *SaveAsymEgressKeyBody) validateKeyInformation(formats strfmt.Registry) error {

	if err := validate.Required("SaveAsymEgressKey"+"."+"keyInformation", "body", o.KeyInformation); err != nil {
		return err
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveAsymEgressKey" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveAsymEgressKey" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this save asym egress key body based on the context it is used
func (o *SaveAsymEgressKeyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveAsymEgressKey" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveAsymEgressKey" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveAsymEgressKeyBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SaveAsymEgressKey" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SaveAsymEgressKey" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyBody) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveAsymEgressKeyCreatedBody Egress Asymmetric Key Information Response.
//
swagger:model SaveAsymEgressKeyCreatedBody
*/
type SaveAsymEgressKeyCreatedBody struct {

	// client reference information
	ClientReferenceInformation *SaveAsymEgressKeyCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation *SaveAsymEgressKeyCreatedBodyKeyInformation `json:"keyInformation,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this save asym egress key created body
func (o *SaveAsymEgressKeyCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveAsymEgressKeyCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveAsymEgressKeyCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveAsymEgressKeyCreatedBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveAsymEgressKeyCreated" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveAsymEgressKeyCreated" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this save asym egress key created body based on the context it is used
func (o *SaveAsymEgressKeyCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveAsymEgressKeyCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveAsymEgressKeyCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SaveAsymEgressKeyCreatedBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if swag.IsZero(o.KeyInformation) { // not required
			return nil
		}

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saveAsymEgressKeyCreated" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saveAsymEgressKeyCreated" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBody) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveAsymEgressKeyCreatedBodyClientReferenceInformation Object for client references.
swagger:model SaveAsymEgressKeyCreatedBodyClientReferenceInformation
*/
type SaveAsymEgressKeyCreatedBodyClientReferenceInformation struct {

	// Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this save asym egress key created body client reference information
func (o *SaveAsymEgressKeyCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("saveAsymEgressKeyCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this save asym egress key created body client reference information based on context it is used
func (o *SaveAsymEgressKeyCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveAsymEgressKeyCreatedBodyKeyInformation Egress Asymmetric  Key Information Request
//
swagger:model SaveAsymEgressKeyCreatedBodyKeyInformation
*/
type SaveAsymEgressKeyCreatedBodyKeyInformation struct {

	// Key expiry duration in days
	//
	ExpiryDuration string `json:"expiryDuration,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// Type of the key
	//
	KeyType string `json:"keyType,omitempty"`

	// Organization Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Provider name
	//
	Provider string `json:"provider,omitempty"`

	// Public certificate with only base64 encoded payload and not the header (BEGIN CERTIFICATE) and footer (END CERTIFICATE)
	//
	Pub string `json:"pub,omitempty"`

	// Private certificate with only base64 encoded payload and not header (BEGIN CERTIFICATE) and footer (END CERTIFICATE)
	//
	Pvt string `json:"pvt,omitempty"`

	// The status of the key
	//
	Status string `json:"status,omitempty"`

	// Tenant name
	//
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this save asym egress key created body key information
func (o *SaveAsymEgressKeyCreatedBodyKeyInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this save asym egress key created body key information based on context it is used
func (o *SaveAsymEgressKeyCreatedBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyCreatedBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyCreatedBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveAsymEgressKeyParamsBodyClientReferenceInformation Client object
swagger:model SaveAsymEgressKeyParamsBodyClientReferenceInformation
*/
type SaveAsymEgressKeyParamsBodyClientReferenceInformation struct {

	// Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this save asym egress key params body client reference information
func (o *SaveAsymEgressKeyParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveAsymEgressKeyParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("SaveAsymEgressKey"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this save asym egress key params body client reference information based on context it is used
func (o *SaveAsymEgressKeyParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SaveAsymEgressKeyParamsBodyKeyInformation Egress Asymmetric  Key Information Request
//
swagger:model SaveAsymEgressKeyParamsBodyKeyInformation
*/
type SaveAsymEgressKeyParamsBodyKeyInformation struct {

	// Key expiry duration in days
	//
	ExpiryDuration string `json:"expiryDuration,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// Type of the key
	//
	KeyType string `json:"keyType,omitempty"`

	// Organization Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Provider name
	//
	Provider string `json:"provider,omitempty"`

	// Public certificate with only base64 encoded payload and not the header (BEGIN CERTIFICATE) and footer (END CERTIFICATE)
	//
	Pub string `json:"pub,omitempty"`

	// Private certificate with only base64 encoded payload and not header (BEGIN CERTIFICATE) and footer (END CERTIFICATE)
	//
	Pvt string `json:"pvt,omitempty"`

	// The status of the key
	//
	Status string `json:"status,omitempty"`

	// Tenant name
	//
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this save asym egress key params body key information
func (o *SaveAsymEgressKeyParamsBodyKeyInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this save asym egress key params body key information based on context it is used
func (o *SaveAsymEgressKeyParamsBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SaveAsymEgressKeyParamsBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SaveAsymEgressKeyParamsBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res SaveAsymEgressKeyParamsBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
