// Code generated by go-swagger; DO NOT EDIT.

package manage_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new manage webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new manage webhooks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new manage webhooks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for manage webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationJSONCharsetUTF8 sets the Accept header to "application/json;charset=utf-8".
func WithAcceptApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json;charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWebhookSubscription(params *DeleteWebhookSubscriptionParams, opts ...ClientOption) (*DeleteWebhookSubscriptionOK, error)

	GetWebhookSubscriptionByID(params *GetWebhookSubscriptionByIDParams, opts ...ClientOption) (*GetWebhookSubscriptionByIDOK, error)

	GetWebhookSubscriptionsByOrg(params *GetWebhookSubscriptionsByOrgParams, opts ...ClientOption) (*GetWebhookSubscriptionsByOrgOK, error)

	SaveAsymEgressKey(params *SaveAsymEgressKeyParams, opts ...ClientOption) (*SaveAsymEgressKeyCreated, error)

	UpdateWebhookSubscription(params *UpdateWebhookSubscriptionParams, opts ...ClientOption) (*UpdateWebhookSubscriptionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteWebhookSubscription deletes a webhook subscription

Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
*/
func (a *Client) DeleteWebhookSubscription(params *DeleteWebhookSubscriptionParams, opts ...ClientOption) (*DeleteWebhookSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWebhookSubscription",
		Method:             "DELETE",
		PathPattern:        "/notification-subscriptions/v1/webhooks/{webhookId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhookSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWebhookSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWebhookSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWebhookSubscriptionByID gets details on a single webhook

Retrieve the details of a specific webhook by supplying the webhook ID in the path.
*/
func (a *Client) GetWebhookSubscriptionByID(params *GetWebhookSubscriptionByIDParams, opts ...ClientOption) (*GetWebhookSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookSubscriptionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebhookSubscriptionById",
		Method:             "GET",
		PathPattern:        "/notification-subscriptions/v1/webhooks/{webhookId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebhookSubscriptionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebhookSubscriptionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWebhookSubscriptionsByOrg gets details on all created webhooks

Retrieve a list of all previously created webhooks.
*/
func (a *Client) GetWebhookSubscriptionsByOrg(params *GetWebhookSubscriptionsByOrgParams, opts ...ClientOption) (*GetWebhookSubscriptionsByOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookSubscriptionsByOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebhookSubscriptionsByOrg",
		Method:             "GET",
		PathPattern:        "/notification-subscriptions/v1/webhooks",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookSubscriptionsByOrgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebhookSubscriptionsByOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebhookSubscriptionsByOrg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SaveAsymEgressKey messages level encryption

	Store and manage certificates that will be used to preform Message Level Encryption (MLE).

Each new webhook will need its own unique asymmetric certificate.
You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide.
*/
func (a *Client) SaveAsymEgressKey(params *SaveAsymEgressKeyParams, opts ...ClientOption) (*SaveAsymEgressKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAsymEgressKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAsymEgressKey",
		Method:             "POST",
		PathPattern:        "/kms/egress/v2/keys-asym",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveAsymEgressKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveAsymEgressKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveAsymEgressKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWebhookSubscription updates a webhook subscription

Update the webhook subscription using PATCH.
*/
func (a *Client) UpdateWebhookSubscription(params *UpdateWebhookSubscriptionParams, opts ...ClientOption) (*UpdateWebhookSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebhookSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWebhookSubscription",
		Method:             "PATCH",
		PathPattern:        "/notification-subscriptions/v1/webhooks/{webhookId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebhookSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebhookSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWebhookSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
