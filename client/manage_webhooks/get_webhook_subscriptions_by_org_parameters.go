// Code generated by go-swagger; DO NOT EDIT.

package manage_webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetWebhookSubscriptionsByOrgParams creates a new GetWebhookSubscriptionsByOrgParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWebhookSubscriptionsByOrgParams() *GetWebhookSubscriptionsByOrgParams {
	return &GetWebhookSubscriptionsByOrgParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWebhookSubscriptionsByOrgParamsWithTimeout creates a new GetWebhookSubscriptionsByOrgParams object
// with the ability to set a timeout on a request.
func NewGetWebhookSubscriptionsByOrgParamsWithTimeout(timeout time.Duration) *GetWebhookSubscriptionsByOrgParams {
	return &GetWebhookSubscriptionsByOrgParams{
		timeout: timeout,
	}
}

// NewGetWebhookSubscriptionsByOrgParamsWithContext creates a new GetWebhookSubscriptionsByOrgParams object
// with the ability to set a context for a request.
func NewGetWebhookSubscriptionsByOrgParamsWithContext(ctx context.Context) *GetWebhookSubscriptionsByOrgParams {
	return &GetWebhookSubscriptionsByOrgParams{
		Context: ctx,
	}
}

// NewGetWebhookSubscriptionsByOrgParamsWithHTTPClient creates a new GetWebhookSubscriptionsByOrgParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWebhookSubscriptionsByOrgParamsWithHTTPClient(client *http.Client) *GetWebhookSubscriptionsByOrgParams {
	return &GetWebhookSubscriptionsByOrgParams{
		HTTPClient: client,
	}
}

/*
GetWebhookSubscriptionsByOrgParams contains all the parameters to send to the API endpoint

	for the get webhook subscriptions by org operation.

	Typically these are written to a http.Request.
*/
type GetWebhookSubscriptionsByOrgParams struct {

	/* EventType.

	   The Event Type.
	*/
	EventType string

	/* OrganizationID.

	   The Organization Identifier.
	*/
	OrganizationID string

	/* ProductID.

	   The Product Identifier.
	*/
	ProductID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get webhook subscriptions by org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebhookSubscriptionsByOrgParams) WithDefaults() *GetWebhookSubscriptionsByOrgParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get webhook subscriptions by org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebhookSubscriptionsByOrgParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithTimeout(timeout time.Duration) *GetWebhookSubscriptionsByOrgParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithContext(ctx context.Context) *GetWebhookSubscriptionsByOrgParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithHTTPClient(client *http.Client) *GetWebhookSubscriptionsByOrgParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventType adds the eventType to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithEventType(eventType string) *GetWebhookSubscriptionsByOrgParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetEventType(eventType string) {
	o.EventType = eventType
}

// WithOrganizationID adds the organizationID to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithOrganizationID(organizationID string) *GetWebhookSubscriptionsByOrgParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithProductID adds the productID to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) WithProductID(productID string) *GetWebhookSubscriptionsByOrgParams {
	o.SetProductID(productID)
	return o
}

// SetProductID adds the productId to the get webhook subscriptions by org params
func (o *GetWebhookSubscriptionsByOrgParams) SetProductID(productID string) {
	o.ProductID = productID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWebhookSubscriptionsByOrgParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param eventType
	qrEventType := o.EventType
	qEventType := qrEventType
	if qEventType != "" {

		if err := r.SetQueryParam("eventType", qEventType); err != nil {
			return err
		}
	}

	// query param organizationId
	qrOrganizationID := o.OrganizationID
	qOrganizationID := qrOrganizationID
	if qOrganizationID != "" {

		if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
			return err
		}
	}

	// query param productId
	qrProductID := o.ProductID
	qProductID := qrProductID
	if qProductID != "" {

		if err := r.SetQueryParam("productId", qProductID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
