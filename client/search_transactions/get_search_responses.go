// Code generated by go-swagger; DO NOT EDIT.

package search_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSearchReader is a Reader for the GetSearch structure.
type GetSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tss/v2/searches/{searchId}] getSearch", response, response.Code())
	}
}

// NewGetSearchOK creates a GetSearchOK with default headers values
func NewGetSearchOK() *GetSearchOK {
	return &GetSearchOK{}
}

/*
GetSearchOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetSearchOK struct {
	Payload *GetSearchOKBody
}

// IsSuccess returns true when this get search o k response has a 2xx status code
func (o *GetSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get search o k response has a 3xx status code
func (o *GetSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search o k response has a 4xx status code
func (o *GetSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search o k response has a 5xx status code
func (o *GetSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get search o k response a status code equal to that given
func (o *GetSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get search o k response
func (o *GetSearchOK) Code() int {
	return 200
}

func (o *GetSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchOK %s", 200, payload)
}

func (o *GetSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchOK %s", 200, payload)
}

func (o *GetSearchOK) GetPayload() *GetSearchOKBody {
	return o.Payload
}

func (o *GetSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchNotFound creates a GetSearchNotFound with default headers values
func NewGetSearchNotFound() *GetSearchNotFound {
	return &GetSearchNotFound{}
}

/*
GetSearchNotFound describes a response with status code 404, with default header values.

The specified resource not found in the system.
*/
type GetSearchNotFound struct {
}

// IsSuccess returns true when this get search not found response has a 2xx status code
func (o *GetSearchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search not found response has a 3xx status code
func (o *GetSearchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search not found response has a 4xx status code
func (o *GetSearchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search not found response has a 5xx status code
func (o *GetSearchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get search not found response a status code equal to that given
func (o *GetSearchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get search not found response
func (o *GetSearchNotFound) Code() int {
	return 404
}

func (o *GetSearchNotFound) Error() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchNotFound", 404)
}

func (o *GetSearchNotFound) String() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchNotFound", 404)
}

func (o *GetSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchInternalServerError creates a GetSearchInternalServerError with default headers values
func NewGetSearchInternalServerError() *GetSearchInternalServerError {
	return &GetSearchInternalServerError{}
}

/*
GetSearchInternalServerError describes a response with status code 500, with default header values.

Unexpected server error.
*/
type GetSearchInternalServerError struct {
}

// IsSuccess returns true when this get search internal server error response has a 2xx status code
func (o *GetSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search internal server error response has a 3xx status code
func (o *GetSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search internal server error response has a 4xx status code
func (o *GetSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search internal server error response has a 5xx status code
func (o *GetSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get search internal server error response a status code equal to that given
func (o *GetSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get search internal server error response
func (o *GetSearchInternalServerError) Code() int {
	return 500
}

func (o *GetSearchInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchInternalServerError", 500)
}

func (o *GetSearchInternalServerError) String() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchInternalServerError", 500)
}

func (o *GetSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetSearchOKBody tssV2TransactionsPost201Response
// Example: {"_embedded":{"transactionSummaries":[{"_links":{"transactionDetail":{"href":"https://sl73paysvapq002.visa.com:2031/payment/tss/v2/transactions/5217848115816817001541","method":"GET"}},"applicationInformation":{"applications":[{"name":"ics_service_fee_calculate","rCode":"1","rFlag":"SOK","rMessage":"Request was processed successfully","reason":"MISSING_FIELD","reasonCode":"123","reconciliationId":"55557","returnCode":1040000,"status":"TRANSMITTED"}],"rCode":"1","rFlag":"SOK","reasonCode":"123","returnCode":1040000},"buyerInformation":{"merchantCustomerId":"123456"},"clientReferenceInformation":{"applicationName":"Service Fee Request","applicationUser":"sandeep_wf","code":"12345","partner":{"solutionId":"89012345"}},"consumerAuthenticationInformation":{"eciRaw":"02","transactionId":"00152259513040478521","xid":"12345678"},"deviceInformation":{"ipAddress":"1.10.10.10"},"errorInformation":{"reason":"MISSING_FIELD"},"fraudMarkingInformation":{"reason":"fraud txn"},"id":"5217848115816817001541","merchantDefinedInformation":[{"key":"abc","value":"xyz"}],"merchantId":"sandeep_wf","merchantInformation":{"resellerId":"wfbmcp"},"orderInformation":{"amountDetails":{"currency":"USD","totalAmount":"100.00"},"billTo":{"address1":"201S.DivisionSt._1","country":"US","email":"null@cybersource.com","firstName":"Test","lastName":"TSS","phoneNumber":"5120000000"},"shipTo":{"address1":"201S.DivisionSt._1","country":"US","firstName":"Test","lastName":"TSS","phoneNumber":"5120000000"}},"paymentInformation":{"bank":{"account":{"prefix":"123456","suffix":"1111"}},"card":{"prefix":"123456","suffix":"1111","type":"001"},"customer":{"customerId":"12345"},"paymentType":{"method":{"name":"method name"},"name":"CARD"}},"pointOfSaleInformation":{"deviceId":"asfaf12312313","emv":{"tags":"5F25"},"partner":{"originalTransactionId":"131231414414"},"terminalId":"1","terminalSerialNumber":"123111123"},"processingInformation":{"businessApplicationId":"12345","commerceIndicator":"7","paymentSolution":"xyz"},"processorInformation":{"approvalCode":"authcode1234567","processor":{"name":"FirstData"}},"riskInformation":{"providers":{"fingerprint":{"hash":"tuWmt8Ubw0EAybBF3wrZcEqIcZsLr8YPldTQDUxAg2k=","smart_id":"23442fdadfa","true_ipaddress":"1.101.102.112"}}},"status":"TRANSMITTED","submitTimeUtc":"2018-03-23T06:00:11Z"}]},"_links":{"self":{"href":"https://sl73paysvapq002.visa.com:2031/payment/tss/v2/searches/87e1e4bd-cac2-49b1-919a-4d5e29a2e55d","method":"GET"}},"count":22,"limit":2000,"name":"Search By Code","offset":0,"query":"clientReferenceInformation.code:12345 AND submitTimeUtc:[NOW/DAY-7DAYS TO NOW/DAY+1DAY}","save":"false","searchId":"87e1e4bd-cac2-49b1-919a-4d5e29a2e55d","sort":"id:asc, submitTimeUtc:asc","submitTimeUtc":"2018-09-18T16:59:28Z","timezone":"America/Chicago","totalCount":22}
swagger:model GetSearchOKBody
*/
type GetSearchOKBody struct {

	// embedded
	Embedded *GetSearchOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetSearchOKBodyLinks `json:"_links,omitempty"`

	// Results for this page, this could be below the limit.
	Count int64 `json:"count,omitempty"`

	// Controls the maximum number of items that may be returned for a single request. The default is 20, the maximum is 2500.
	//
	Limit int64 `json:"limit,omitempty"`

	// Name of this search. When `save` is set to `true`, this search is saved with this name.
	//
	Name string `json:"name,omitempty"`

	// Controls the starting point within the collection of results, which defaults to 0. The first item in the collection is retrieved by setting a zero offset.
	//
	// For example, if you have a collection of 15 items to be retrieved from a resource and you specify limit=5, you can retrieve the entire set of results in 3 successive requests by varying the offset value like this:
	//
	// `offset=0`
	// `offset=5`
	// `offset=10`
	//
	// **Note:** If an offset larger than the number of results is provided, this will result in no embedded object being returned.
	//
	Offset int64 `json:"offset,omitempty"`

	// String that contains the filters and variables for which you want to search. For information about supported field-filters and operators, see the [Query Filters]( https://developer.cybersource.com/api/developer-guides/dita-txn-search-details-rest-api-dev-guide-102718/txn-search-intro/txn-filtering.html) section of the Transaction Search Developer Guide.
	//
	Query string `json:"query,omitempty"`

	// Indicates whether or not you want to save this search request for future use. The options are:
	//
	// * `true`
	// * `false` (default value)
	//
	// If set to `true`, this field returns
	// `searchID` in the response. You can use this value to retrieve the details of the saved search.
	//
	Save bool `json:"save,omitempty"`

	// An unique identification number assigned by CyberSource to identify each Search request.
	// Max Length: 60
	SearchID string `json:"searchId,omitempty"`

	// A comma separated list of the following form:
	//
	// `submitTimeUtc:desc`
	//
	Sort string `json:"sort,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// Merchant's time zone in ISO standard, using the TZ database format. For example: `America/Chicago`
	//
	Timezone string `json:"timezone,omitempty"`

	// Total number of results.
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this get search o k body
func (o *GetSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearchID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBody) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBody) validateSearchID(formats strfmt.Registry) error {
	if swag.IsZero(o.SearchID) { // not required
		return nil
	}

	if err := validate.MaxLength("getSearchOK"+"."+"searchId", "body", o.SearchID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get search o k body based on the context it is used
func (o *GetSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBody) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbedded get search o k body embedded
swagger:model GetSearchOKBodyEmbedded
*/
type GetSearchOKBodyEmbedded struct {

	// transaction search summary
	TransactionSummaries []*GetSearchOKBodyEmbeddedTransactionSummariesItems0 `json:"transactionSummaries"`
}

// Validate validates this get search o k body embedded
func (o *GetSearchOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionSummaries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbedded) validateTransactionSummaries(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionSummaries) { // not required
		return nil
	}

	for i := 0; i < len(o.TransactionSummaries); i++ {
		if swag.IsZero(o.TransactionSummaries[i]) { // not required
			continue
		}

		if o.TransactionSummaries[i] != nil {
			if err := o.TransactionSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchOK" + "." + "_embedded" + "." + "transactionSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSearchOK" + "." + "_embedded" + "." + "transactionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get search o k body embedded based on the context it is used
func (o *GetSearchOKBodyEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionSummaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbedded) contextValidateTransactionSummaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TransactionSummaries); i++ {

		if o.TransactionSummaries[i] != nil {

			if swag.IsZero(o.TransactionSummaries[i]) { // not required
				return nil
			}

			if err := o.TransactionSummaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchOK" + "." + "_embedded" + "." + "transactionSummaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSearchOK" + "." + "_embedded" + "." + "transactionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0 get search o k body embedded transaction summaries items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0 struct {

	// links
	Links *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links `json:"_links,omitempty"`

	// application information
	ApplicationInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation `json:"applicationInformation,omitempty"`

	// buyer information
	BuyerInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// device information
	DeviceInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation `json:"deviceInformation,omitempty"`

	// error information
	ErrorInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation `json:"errorInformation,omitempty"`

	// fraud marking information
	FraudMarkingInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation `json:"fraudMarkingInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The object containing the custom data that the merchant defines.
	//
	MerchantDefinedInformation []*GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// Your CyberSource merchant ID.
	MerchantID string `json:"merchantId,omitempty"`

	// merchant information
	MerchantInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation `json:"paymentInformation,omitempty"`

	// point of sale information
	PointOfSaleInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation `json:"pointOfSaleInformation,omitempty"`

	// processing information
	ProcessingInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation `json:"processingInformation,omitempty"`

	// processor information
	ProcessorInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation `json:"processorInformation,omitempty"`

	// risk information
	RiskInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation `json:"riskInformation,omitempty"`

	// The status of the submitted transaction.
	// Note: This field may not be returned for all transactions.
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFraudMarkingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePointOfSaleInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateApplicationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicationInformation) { // not required
		return nil
	}

	if o.ApplicationInformation != nil {
		if err := o.ApplicationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateDeviceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.DeviceInformation) { // not required
		return nil
	}

	if o.DeviceInformation != nil {
		if err := o.DeviceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateFraudMarkingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.FraudMarkingInformation) { // not required
		return nil
	}

	if o.FraudMarkingInformation != nil {
		if err := o.FraudMarkingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudMarkingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fraudMarkingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateMerchantDefinedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {
		if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if o.MerchantDefinedInformation[i] != nil {
			if err := o.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validatePointOfSaleInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PointOfSaleInformation) { // not required
		return nil
	}

	if o.PointOfSaleInformation != nil {
		if err := o.PointOfSaleInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateRiskInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateApplicationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConsumerAuthenticationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeviceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFraudMarkingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantDefinedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePointOfSaleInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRiskInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateApplicationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ApplicationInformation != nil {

		if swag.IsZero(o.ApplicationInformation) { // not required
			return nil
		}

		if err := o.ApplicationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateConsumerAuthenticationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ConsumerAuthenticationInformation != nil {

		if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
			return nil
		}

		if err := o.ConsumerAuthenticationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateDeviceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.DeviceInformation != nil {

		if swag.IsZero(o.DeviceInformation) { // not required
			return nil
		}

		if err := o.DeviceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateFraudMarkingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.FraudMarkingInformation != nil {

		if swag.IsZero(o.FraudMarkingInformation) { // not required
			return nil
		}

		if err := o.FraudMarkingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudMarkingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fraudMarkingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateMerchantDefinedInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {

		if o.MerchantDefinedInformation[i] != nil {

			if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
				return nil
			}

			if err := o.MerchantDefinedInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidatePointOfSaleInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PointOfSaleInformation != nil {

		if swag.IsZero(o.PointOfSaleInformation) { // not required
			return nil
		}

		if err := o.PointOfSaleInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) contextValidateRiskInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RiskInformation != nil {

		if swag.IsZero(o.RiskInformation) { // not required
			return nil
		}

		if err := o.RiskInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation get search o k body embedded transaction summaries items0 application information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation struct {

	// applications
	Applications []*GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 `json:"applications"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	RFlag string `json:"rFlag,omitempty"`

	// Indicates the reason why a request succeeded or failed and possible action to take if a request fails.
	//
	// For details, see the appendix of reason codes in the documentation for the relevant payment method.
	//
	ReasonCode string `json:"reasonCode,omitempty"`

	// The description for this field is not available.
	ReturnCode int64 `json:"returnCode,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 application information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(o.Applications) { // not required
		return nil
	}

	for i := 0; i < len(o.Applications); i++ {
		if swag.IsZero(o.Applications[i]) { // not required
			continue
		}

		if o.Applications[i] != nil {
			if err := o.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 application information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Applications); i++ {

		if o.Applications[i] != nil {

			if swag.IsZero(o.Applications[i]) { // not required
				return nil
			}

			if err := o.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 get search o k body embedded transaction summaries items0 application information applications items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 struct {

	// The name of the CyberSource transaction type (such as CC settlement or CC authorization) that the merchant wants to process in a transaction request. More than one transaction type can included in a transaction request. Each transaction type separately returns their own status, reasonCode, rCode, and rFlag messages.
	//
	Name string `json:"name,omitempty"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	RFlag string `json:"rFlag,omitempty"`

	// Message that explains the reply flag for the application.
	//
	RMessage string `json:"rMessage,omitempty"`

	// Description of why a request failed.
	// Note: This field may not be returned for all transactions.
	//
	Reason string `json:"reason,omitempty"`

	// 3-digit reason code that indicates why the customer profile payment succeeded or failed.
	ReasonCode string `json:"reasonCode,omitempty"`

	// Reference number that you use to reconcile your CyberSource reports with your processor reports.
	//
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The description for this field is not available.
	ReturnCode int64 `json:"returnCode,omitempty"`

	// The status of the submitted transaction.
	// Note: This field may not be returned for all transactions.
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 application information applications items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 application information applications items0 based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation get search o k body embedded transaction summaries items0 buyer information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation struct {

	// Your identifier for the customer.
	//
	// When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.
	//
	// #### Comercio Latino
	// For recurring payments in Mexico, the value is the customer's contract number.
	// Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.
	//
	// #### Worldpay VAP
	// For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order
	// given, for a customer account ID value and uses the first value it finds:
	// 1. `customer_account_id` value in the follow-on credit request
	// 2. Customer account ID value that was used for the capture that is being credited
	// 3. Customer account ID value that was used for the original authorization
	// If a customer account ID value cannot be found in any of these locations, then no value is used.
	//
	// For processor-specific information, see the `customer_account_id` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 buyer information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"merchantCustomerId", "body", o.MerchantCustomerID, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 buyer information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation get search o k body embedded transaction summaries items0 client reference information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// partner
	Partner *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 client reference information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 client reference information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner get search o k body embedded transaction summaries items0 client reference information partner
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner struct {

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 client reference information partner
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 client reference information partner based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation get search o k body embedded transaction summaries items0 consumer authentication information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation struct {

	// Raw electronic commerce indicator (ECI).
	//
	// For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 2
	EciRaw string `json:"eciRaw,omitempty"`

	// Payer auth Transaction identifier.
	TransactionID string `json:"transactionId,omitempty"`

	// Transaction identifier.
	//
	// For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 40
	Xid string `json:"xid,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 consumer authentication information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEciRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateXid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) validateEciRaw(formats strfmt.Registry) error {
	if swag.IsZero(o.EciRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("consumerAuthenticationInformation"+"."+"eciRaw", "body", o.EciRaw, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) validateXid(formats strfmt.Registry) error {
	if swag.IsZero(o.Xid) { // not required
		return nil
	}

	if err := validate.MaxLength("consumerAuthenticationInformation"+"."+"xid", "body", o.Xid, 40); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 consumer authentication information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation get search o k body embedded transaction summaries items0 device information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation struct {

	// IP address of the customer.
	//
	// #### Used by
	// **Authorization, Capture, and Credit**
	// Optional field.
	//
	// Max Length: 45
	IPAddress string `json:"ipAddress,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 device information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) validateIPAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.IPAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("deviceInformation"+"."+"ipAddress", "body", o.IPAddress, 45); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 device information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation get search o k body embedded transaction summaries items0 error information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation struct {

	// Description of why a request failed.
	// Note: This field may not be returned for all transactions.
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 error information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 error information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation get search o k body embedded transaction summaries items0 fraud marking information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation struct {

	// Reason for adding the transaction to the negative list. This field can contain one of the following values:
	// - fraud_chargeback: You have received a fraudrelated chargeback for the transaction.
	// - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction.
	// - suspected: You believe that you will probably receive a chargeback for the transaction.
	// - creditback: You issued a refund to the customer to avoid a chargeback for the transaction.
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 fraud marking information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 fraud marking information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0Links get search o k body embedded transaction summaries items0 links
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0Links
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0Links struct {

	// transaction detail
	TransactionDetail *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail `json:"transactionDetail,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 links
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) validateTransactionDetail(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionDetail) { // not required
		return nil
	}

	if o.TransactionDetail != nil {
		if err := o.TransactionDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "transactionDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "transactionDetail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 links based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) contextValidateTransactionDetail(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionDetail != nil {

		if swag.IsZero(o.TransactionDetail) { // not required
			return nil
		}

		if err := o.TransactionDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "transactionDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "transactionDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail get search o k body embedded transaction summaries items0 links transaction detail
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 links transaction detail
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 links transaction detail based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 get search o k body embedded transaction summaries items0 merchant defined information items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 struct {

	// The number you assign for as the key for your merchant-defined data field. Valid values are 0 to 100.
	//
	// For example, to set or access the key for the 2nd merchant-defined data field in the array, you would reference `merchantDefinedInformation[1].key`.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].key` and
	// `merchantDefinedInformation[1].key` for data that you want to provide to the issuer to identify the
	// transaction.
	//
	// For details, see the `merchant_defined_data1` request-level field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 50
	Key string `json:"key,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// For details, see `merchant_defined_data1` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not
	// limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV,
	// CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].value` and
	// `merchantDefinedInformation[1].value` for data that you want to provide to the issuer to identify the
	// transaction. For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For installment payments with Mastercard in Brazil:
	// - The value for merchantDefinedInformation[0].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 25-44
	//   - Field: Reference Field 2
	// - The value for merchantDefinedInformation[1].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 45-64
	//   - Field: Reference Field 3
	//
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 merchant defined information items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("key", "body", o.Key, 50); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", o.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 merchant defined information items0 based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation get search o k body embedded transaction summaries items0 merchant information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation struct {

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ResellerID string `json:"resellerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 merchant information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResellerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) validateResellerID(formats strfmt.Registry) error {
	if swag.IsZero(o.ResellerID) { // not required
		return nil
	}

	if err := validate.MaxLength("merchantInformation"+"."+"resellerId", "body", o.ResellerID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 merchant information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation get search o k body embedded transaction summaries items0 order information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation struct {

	// amount details
	AmountDetails *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo `json:"billTo,omitempty"`

	// ship to
	ShipTo *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo `json:"shipTo,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 order information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails get search o k body embedded transaction summaries items0 order information amount details
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information amount details
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 order information amount details based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo get search o k body embedded transaction summaries items0 order information bill to
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_,
	// it must be sent as _1 1st Street_.
	//
	// Required if keyed; not used if swiped.
	//
	// String (20)
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional.
	// String (60)
	//
	// #### For Payouts
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// #### SEPA/BACS
	// Required for Create Mandate and Import Mandate
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### RBS WorldPay Atlanta
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Customer's phone number.
	//
	// It is recommended that you include the country code when the order is from outside the U.S.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Optional field.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information bill to
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 order information bill to based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo get search o k body embedded transaction summaries items0 order information ship to
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo struct {

	// First line of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// First name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Phone number associated with the shipping address.
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information ship to
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 order information ship to based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation get search o k body embedded transaction summaries items0 payment information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation struct {

	// bank
	Bank *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank `json:"bank,omitempty"`

	// card
	Card *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer `json:"customer,omitempty"`

	// payment type
	PaymentType *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validateBank(formats strfmt.Registry) error {
	if swag.IsZero(o.Bank) { // not required
		return nil
	}

	if o.Bank != nil {
		if err := o.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validatePaymentType(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 payment information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) contextValidateBank(ctx context.Context, formats strfmt.Registry) error {

	if o.Bank != nil {

		if swag.IsZero(o.Bank) { // not required
			return nil
		}

		if err := o.Bank.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) contextValidatePaymentType(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentType != nil {

		if swag.IsZero(o.PaymentType) { // not required
			return nil
		}

		if err := o.PaymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank get search o k body embedded transaction summaries items0 payment information bank
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank struct {

	// account
	Account *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount `json:"account,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information bank
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 payment information bank based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.Account != nil {

		if swag.IsZero(o.Account) { // not required
			return nil
		}

		if err := o.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount get search o k body embedded transaction summaries items0 payment information bank account
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount struct {

	// Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
	//
	Prefix string `json:"prefix,omitempty"`

	// Last four digits of the customer's payment account number.
	//
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information bank account
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 payment information bank account based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard get search o k body embedded transaction summaries items0 payment information card
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard struct {

	// Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// Max Length: 6
	Prefix string `json:"prefix,omitempty"`

	// Last four digits of the cardholder's account number. This field is included in the reply message when the client software
	// that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details.
	//
	// You must contact customer support to have your account enabled to receive these fields in the credit reply message.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### PIN debit
	// This field is returned only for tokenized transactions. You can use this value on the receipt that you give to the cardholder.
	//
	// Returned by PIN debit credit and PIN debit purchase.
	//
	// This field is supported only by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	Suffix string `json:"suffix,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1,4]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	// - '070': EFTPOS
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	// [^4]: For this card type, you must include the `paymentInformation.card.type` in your request for any payer authentication services.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information card
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) validatePrefix(formats strfmt.Registry) error {
	if swag.IsZero(o.Prefix) { // not required
		return nil
	}

	if err := validate.MaxLength("paymentInformation"+"."+"card"+"."+"prefix", "body", o.Prefix, 6); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 payment information card based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer get search o k body embedded transaction summaries items0 payment information customer
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer's card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information customer
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 payment information customer based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType get search o k body embedded transaction summaries items0 payment information payment type
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType struct {

	// Indicates the payment method used in this payment transaction.
	Method string `json:"method,omitempty"`

	// Indicates the payment type used in this payment transaction. Example: credit card, check
	Type string `json:"type,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information payment type
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 payment information payment type based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation get search o k body embedded transaction summaries items0 point of sale information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation struct {

	// Value created by the client software that uniquely identifies the POS device.
	// CyberSource does not forward this value to the processor. Instead, the value is forwarded to
	// the CyberSource reporting functionality.
	//
	// This field is supported only for authorizations and credits on these processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// Optional field.
	// String (32)
	//
	DeviceID string `json:"deviceId,omitempty"`

	// emv
	Emv *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv `json:"emv,omitempty"`

	// partner
	Partner *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner `json:"partner,omitempty"`

	// Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.
	//
	// #### CyberSource through VisaNet
	// A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for
	// your CyberSource account, the value you send for this field is validated against the list each time you include
	// the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.
	//
	// When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.
	//
	// #### FDC Nashville Global
	// To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.
	//
	// #### For Payouts
	// This field is applicable for CyberSource through VisaNet.
	//
	// #### GPX
	// Identifier for the terminal at your retail location. A list of all possible values is stored in your account.
	// If terminal ID validation is enabled for your account, the value you send for this field is validated against
	// the list each time you include the field in a request. To enable or disable terminal ID validation, contact
	// customer support.
	//
	// When you do not include this field in a request, the default value that is defined in your account is used.
	//
	// Optional for authorizations.
	//
	// #### Used by
	// **Authorization**
	// Optional for the following processors. When you do not include this field in a request, the default value that is
	// defined in your account is used.
	//   - American Express Direct
	//   - Credit Mutuel-CIC
	//   - FDC Nashville Global
	//   - SIX
	// - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`.
	// - FDMS Nashville: The default value that is defined in your account is used.
	// - GPX
	// - OmniPay Direct: Optional field.
	//
	// For the following processors, this field is not used.
	// - GPN
	// - JCN Gateway
	// - RBS WorldPay Atlanta
	// - TSYS Acquiring Solutions
	// - Worldpay VAP
	//
	// #### Card Present reply
	// Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
	//
	// Max Length: 8
	TerminalID string `json:"terminalId,omitempty"`

	// Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that
	// is installed on the POS terminal.
	//
	// This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.
	//
	// #### Used by
	// **Authorization and Credit**
	// Optional. This field is supported only by client software that is installed on your POS terminals for the
	// following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// Max Length: 32
	TerminalSerialNumber string `json:"terminalSerialNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 point of sale information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmv(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validateEmv(formats strfmt.Registry) error {
	if swag.IsZero(o.Emv) { // not required
		return nil
	}

	if o.Emv != nil {
		if err := o.Emv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation" + "." + "emv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation" + "." + "emv")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validateTerminalID(formats strfmt.Registry) error {
	if swag.IsZero(o.TerminalID) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"terminalId", "body", o.TerminalID, 8); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validateTerminalSerialNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.TerminalSerialNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"terminalSerialNumber", "body", o.TerminalSerialNumber, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 point of sale information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) contextValidateEmv(ctx context.Context, formats strfmt.Registry) error {

	if o.Emv != nil {

		if swag.IsZero(o.Emv) { // not required
			return nil
		}

		if err := o.Emv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation" + "." + "emv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation" + "." + "emv")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pointOfSaleInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv get search o k body embedded transaction summaries items0 point of sale information emv
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv struct {

	// EMV data that is transmitted from the chip card to the issuer, and from the issuer to the chip card. The EMV
	// data is in the tag-length-value format and includes chip card tags, terminal tags, and transaction detail tags.
	//
	// For information about the individual tags, see the "Application Specification" section in the EMV 4.3 Specifications: http://emvco.com
	//
	// **Note** Card present information about EMV applies only to credit card processing and PIN debit processing.
	// All other card present information applies only to credit card processing. PIN debit processing is available only
	// on FDC Nashville Global.
	//
	// **Important** The following tags contain sensitive information and **must not** be included in this field:
	//
	//  - `56`: Track 1 equivalent data
	//  - `57`: Track 2 equivalent data
	//  - `5A`: Application PAN
	//  - `5F20`: Cardholder name
	//  - `5F24`: Application expiration date (This sensitivity has been relaxed for Credit Mutuel-CIC, American Express Direct, FDC Nashville Global, First Data Merchant Solutions, and SIX)
	//  - `99`: Transaction PIN
	//  - `9F0B`: Cardholder name (extended)
	//  - `9F1F`: Track 1 discretionary data
	//  - `9F20`: Track 2 discretionary data
	//
	// For captures, this field is required for contact EMV transactions. Otherwise, it is optional.
	//
	// For credits, this field is required for contact EMV stand-alone credits and contactless EMV stand-alone credits.
	// Otherwise, it is optional.
	//
	// **Important** For contact EMV captures, contact EMV stand-alone credits, and contactless EMV stand-alone credits,
	// you must include the following tags in this field. For all other types of EMV transactions, the following tags
	// are optional.
	//
	//  - `95`: Terminal verification results
	//  - `9F10`: Issuer application data
	//  - `9F26`: Application cryptogram
	//
	//
	// #### CyberSource through VisaNet
	// - In Japan: 199 bytes
	// - In other countries: String (252)
	//
	// For Mastercard Transactions, Optionally Tag 9F60 (Authenticated Application Data) and
	// Tag 96 (Kernel Identifier - Terminal) can be included in the Field.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	// #### JCN Gateway
	// The following tags must be included:
	// - `4F`: Application identifier
	// - `84`: Dedicated file name
	//
	// Data length: 199 bytes
	//
	// #### All other processors:
	// String (999)
	//
	// #### Used by
	// Authorization: Optional
	// Authorization Reversal: Optional
	// Credit: Optional
	// PIN Debit processing (purchase, credit and reversal): Optional
	//
	// Max Length: 1998
	Tags string `json:"tags,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 point of sale information emv
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"emv"+"."+"tags", "body", o.Tags, 1998); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 point of sale information emv based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationEmv
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner get search o k body embedded transaction summaries items0 point of sale information partner
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner struct {

	// Value that links the previous transaction to the current follow-on request. This value is assigned by the client
	// software that is installed on the POS terminal, which makes it available to the terminal's software and to
	// CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal's
	// software.
	//
	// CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource
	// reporting functionality.
	//
	// This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
	//
	// Max Length: 32
	OriginalTransactionID string `json:"originalTransactionId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 point of sale information partner
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOriginalTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) validateOriginalTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginalTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"partner"+"."+"originalTransactionId", "body", o.OriginalTransactionID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 point of sale information partner based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation get search o k body embedded transaction summaries items0 processing information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation struct {

	// Payouts transaction type.
	// Required for OCT transactions.
	// This field is a pass-through, which means that CyberSource does not verify the value or
	// modify it in any way before sending it to the processor.
	// **Note** When the request includes this field, this value overrides the information in your CyberSource account.
	//
	// For valid values, see the `invoiceHeader_businessApplicationID` field description in [Payouts Using the Simple Order API.](http://apps.cybersource.com/library/documentation/dev_guides/payouts_SO/Payouts_SO_API.pdf)
	//
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of transaction. Some payment card companies use this information when determining discount rates.
	//
	// #### Used by
	// **Authorization**
	// Required payer authentication transactions; otherwise, optional.
	// **Credit**
	// Required for standalone credits on Chase Paymentech solutions; otherwise, optional.
	//
	// The list of valid values in this field depends on your processor.
	// See Appendix I, "Commerce Indicators," on page 441 of the Cybersource Credit Card Guide.
	//
	// #### Ingenico ePayments
	// When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you
	// instead of the default value (listed in Appendix I, "Commerce Indicators," on page 441.)
	//
	// #### Payer Authentication Transactions
	// For the possible values and requirements, see "Payer Authentication," page 195.
	//
	// #### Card Present
	// You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be
	// used when the cardholder and card are present at the time of the transaction.
	// For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator
	// should be submitted as "moto"
	//
	// Max Length: 20
	CommerceIndicator string `json:"commerceIndicator,omitempty"`

	// Type of transaction. Some payment card companies use this information when determining discount rates.
	//
	// #### Used by
	// **Authorization**
	// Required payer authentication transactions; otherwise, optional.
	// **Credit**
	// Required for standalone credits on Chase Paymentech solutions; otherwise, optional.
	//
	// The list of valid values in this field depends on your processor.
	// See Appendix I, "Commerce Indicators," on page 441 of the Cybersource Credit Card Guide.
	//
	// #### Ingenico ePayments
	// When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you
	// instead of the default value (listed in Appendix I, "Commerce Indicators," on page 441.)
	//
	// #### Payer Authentication Transactions
	// For the possible values and requirements, see "Payer Authentication," page 195.
	//
	// #### Card Present
	// You must set this field to `retail`. This field is required for a card-present transaction. Note that this should ONLY be
	// used when the cardholder and card are present at the time of the transaction.
	// For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator
	// should be submitted as "moto"
	//
	// Max Length: 20
	CommerceIndicatorLabel string `json:"commerceIndicatorLabel,omitempty"`

	// Type of digital payment solution for the transaction. Possible Values:
	//
	//  - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)
	//  - `001`: Apple Pay.
	//  - `004`: Cybersource In-App Solution.
	//  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see "Masterpass" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//  - `006`: Android Pay.
	//  - `007`: Chase Pay.
	//  - `008`: Samsung Pay.
	//  - `012`: Google Pay.
	//  - `013`: Cybersource P2PE Decryption
	//  - `014`: Mastercard credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.
	//  - `015`: Visa credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.
	//  - `027`: Click to Pay.
	//
	// Max Length: 12
	PaymentSolution string `json:"paymentSolution,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processing information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicatorLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentSolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"commerceIndicator", "body", o.CommerceIndicator, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) validateCommerceIndicatorLabel(formats strfmt.Registry) error {
	if swag.IsZero(o.CommerceIndicatorLabel) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"commerceIndicatorLabel", "body", o.CommerceIndicatorLabel, 20); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) validatePaymentSolution(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentSolution) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"paymentSolution", "body", o.PaymentSolution, 12); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 processing information based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation get search o k body embedded transaction summaries items0 processor information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation struct {

	// Authorization code. Returned only when the processor returns this value.
	//
	// The length of this value depends on your processor.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Authorization code that is returned by the processor.
	//
	// Returned by PIN debit credit.
	//
	// #### Elavon Encrypted Account Number Program
	// The returned value is OFFLINE.
	//
	// #### TSYS Acquiring Solutions
	// The returned value for a successful zero amount authorization is 000000.
	//
	// Max Length: 6
	ApprovalCode string `json:"approvalCode,omitempty"`

	// processor
	Processor *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor `json:"processor,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processor information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApprovalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) validateApprovalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ApprovalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("processorInformation"+"."+"approvalCode", "body", o.ApprovalCode, 6); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) validateProcessor(formats strfmt.Registry) error {
	if swag.IsZero(o.Processor) { // not required
		return nil
	}

	if o.Processor != nil {
		if err := o.Processor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation" + "." + "processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorInformation" + "." + "processor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 processor information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) contextValidateProcessor(ctx context.Context, formats strfmt.Registry) error {

	if o.Processor != nil {

		if swag.IsZero(o.Processor) { // not required
			return nil
		}

		if err := o.Processor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation" + "." + "processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processorInformation" + "." + "processor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor get search o k body embedded transaction summaries items0 processor information processor
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor struct {

	// Name of the Processor.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processor information processor
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("processorInformation"+"."+"processor"+"."+"name", "body", o.Name, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 processor information processor based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation get search o k body embedded transaction summaries items0 risk information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation struct {

	// providers
	Providers *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders `json:"providers,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(o.Providers) { // not required
		return nil
	}

	if o.Providers != nil {
		if err := o.Providers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation" + "." + "providers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 risk information based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	if o.Providers != nil {

		if swag.IsZero(o.Providers) { // not required
			return nil
		}

		if err := o.Providers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation" + "." + "providers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders get search o k body embedded transaction summaries items0 risk information providers
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders struct {

	// fingerprint
	Fingerprint *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint `json:"fingerprint,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information providers
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) validateFingerprint(formats strfmt.Registry) error {
	if swag.IsZero(o.Fingerprint) { // not required
		return nil
	}

	if o.Fingerprint != nil {
		if err := o.Fingerprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers" + "." + "fingerprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation" + "." + "providers" + "." + "fingerprint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body embedded transaction summaries items0 risk information providers based on the context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFingerprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) contextValidateFingerprint(ctx context.Context, formats strfmt.Registry) error {

	if o.Fingerprint != nil {

		if swag.IsZero(o.Fingerprint) { // not required
			return nil
		}

		if err := o.Fingerprint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers" + "." + "fingerprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("riskInformation" + "." + "providers" + "." + "fingerprint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint get search o k body embedded transaction summaries items0 risk information providers fingerprint
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint struct {

	// The unique identifier of the device that is returned in the `riskInformation.providers.fingerprint.device_fingerprint_hash` API reply field.
	//
	// NOTE: For details about the value of this field, see the `decision_provider_#_field_#_value` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// For more details about this field, see the `device_fingerprint_hash` field description in the _Device Fingerprinting Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Device Fingerprinting Guide_ (PDF link).
	//
	// Max Length: 255
	Hash string `json:"hash,omitempty"`

	// The device identifier generated from attributes collected during profiling. Returned by a 3rd party when you use device fingerprinting.
	//
	// For details, see the `device_fingerprint_smart_id` field description in [CyberSource Decision Manager Device Fingerprinting Guide.](https://www.cybersource.com/developers/documentation/fraud_management)
	//
	// Max Length: 255
	SmartID string `json:"smartId,omitempty"`

	// Customer's true IP address detected by the application.
	//
	// For details, see the `true_ipaddress` field description in _Device Fingerprinting Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Device Fingerprinting Guide_ (PDF link).
	//
	// Max Length: 255
	TrueIpaddress string `json:"true_ipaddress,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information providers fingerprint
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSmartID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrueIpaddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(o.Hash) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"hash", "body", o.Hash, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateSmartID(formats strfmt.Registry) error {
	if swag.IsZero(o.SmartID) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"smartId", "body", o.SmartID, 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateTrueIpaddress(formats strfmt.Registry) error {
	if swag.IsZero(o.TrueIpaddress) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"true_ipaddress", "body", o.TrueIpaddress, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get search o k body embedded transaction summaries items0 risk information providers fingerprint based on context it is used
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyLinks get search o k body links
swagger:model GetSearchOKBodyLinks
*/
type GetSearchOKBodyLinks struct {

	// self
	Self *GetSearchOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get search o k body links
func (o *GetSearchOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get search o k body links based on the context it is used
func (o *GetSearchOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSearchOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetSearchOKBodyLinksSelf get search o k body links self
swagger:model GetSearchOKBodyLinksSelf
*/
type GetSearchOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get search o k body links self
func (o *GetSearchOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get search o k body links self based on context it is used
func (o *GetSearchOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
