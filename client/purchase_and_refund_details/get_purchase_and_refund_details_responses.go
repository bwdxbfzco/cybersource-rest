// Code generated by go-swagger; DO NOT EDIT.

package purchase_and_refund_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPurchaseAndRefundDetailsReader is a Reader for the GetPurchaseAndRefundDetails structure.
type GetPurchaseAndRefundDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPurchaseAndRefundDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPurchaseAndRefundDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPurchaseAndRefundDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPurchaseAndRefundDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPurchaseAndRefundDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPurchaseAndRefundDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reporting/v3/purchase-refund-details] getPurchaseAndRefundDetails", response, response.Code())
	}
}

// NewGetPurchaseAndRefundDetailsOK creates a GetPurchaseAndRefundDetailsOK with default headers values
func NewGetPurchaseAndRefundDetailsOK() *GetPurchaseAndRefundDetailsOK {
	return &GetPurchaseAndRefundDetailsOK{}
}

/*
GetPurchaseAndRefundDetailsOK describes a response with status code 200, with default header values.

Ok
*/
type GetPurchaseAndRefundDetailsOK struct {
	Payload *GetPurchaseAndRefundDetailsOKBody
}

// IsSuccess returns true when this get purchase and refund details o k response has a 2xx status code
func (o *GetPurchaseAndRefundDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get purchase and refund details o k response has a 3xx status code
func (o *GetPurchaseAndRefundDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase and refund details o k response has a 4xx status code
func (o *GetPurchaseAndRefundDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purchase and refund details o k response has a 5xx status code
func (o *GetPurchaseAndRefundDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase and refund details o k response a status code equal to that given
func (o *GetPurchaseAndRefundDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get purchase and refund details o k response
func (o *GetPurchaseAndRefundDetailsOK) Code() int {
	return 200
}

func (o *GetPurchaseAndRefundDetailsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsOK %s", 200, payload)
}

func (o *GetPurchaseAndRefundDetailsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsOK %s", 200, payload)
}

func (o *GetPurchaseAndRefundDetailsOK) GetPayload() *GetPurchaseAndRefundDetailsOKBody {
	return o.Payload
}

func (o *GetPurchaseAndRefundDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPurchaseAndRefundDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseAndRefundDetailsBadRequest creates a GetPurchaseAndRefundDetailsBadRequest with default headers values
func NewGetPurchaseAndRefundDetailsBadRequest() *GetPurchaseAndRefundDetailsBadRequest {
	return &GetPurchaseAndRefundDetailsBadRequest{}
}

/*
GetPurchaseAndRefundDetailsBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type GetPurchaseAndRefundDetailsBadRequest struct {
	Payload *GetPurchaseAndRefundDetailsBadRequestBody
}

// IsSuccess returns true when this get purchase and refund details bad request response has a 2xx status code
func (o *GetPurchaseAndRefundDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase and refund details bad request response has a 3xx status code
func (o *GetPurchaseAndRefundDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase and refund details bad request response has a 4xx status code
func (o *GetPurchaseAndRefundDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase and refund details bad request response has a 5xx status code
func (o *GetPurchaseAndRefundDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase and refund details bad request response a status code equal to that given
func (o *GetPurchaseAndRefundDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get purchase and refund details bad request response
func (o *GetPurchaseAndRefundDetailsBadRequest) Code() int {
	return 400
}

func (o *GetPurchaseAndRefundDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsBadRequest %s", 400, payload)
}

func (o *GetPurchaseAndRefundDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsBadRequest %s", 400, payload)
}

func (o *GetPurchaseAndRefundDetailsBadRequest) GetPayload() *GetPurchaseAndRefundDetailsBadRequestBody {
	return o.Payload
}

func (o *GetPurchaseAndRefundDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPurchaseAndRefundDetailsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseAndRefundDetailsUnauthorized creates a GetPurchaseAndRefundDetailsUnauthorized with default headers values
func NewGetPurchaseAndRefundDetailsUnauthorized() *GetPurchaseAndRefundDetailsUnauthorized {
	return &GetPurchaseAndRefundDetailsUnauthorized{}
}

/*
GetPurchaseAndRefundDetailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPurchaseAndRefundDetailsUnauthorized struct {
	Payload *GetPurchaseAndRefundDetailsUnauthorizedBody
}

// IsSuccess returns true when this get purchase and refund details unauthorized response has a 2xx status code
func (o *GetPurchaseAndRefundDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase and refund details unauthorized response has a 3xx status code
func (o *GetPurchaseAndRefundDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase and refund details unauthorized response has a 4xx status code
func (o *GetPurchaseAndRefundDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase and refund details unauthorized response has a 5xx status code
func (o *GetPurchaseAndRefundDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase and refund details unauthorized response a status code equal to that given
func (o *GetPurchaseAndRefundDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get purchase and refund details unauthorized response
func (o *GetPurchaseAndRefundDetailsUnauthorized) Code() int {
	return 401
}

func (o *GetPurchaseAndRefundDetailsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsUnauthorized %s", 401, payload)
}

func (o *GetPurchaseAndRefundDetailsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsUnauthorized %s", 401, payload)
}

func (o *GetPurchaseAndRefundDetailsUnauthorized) GetPayload() *GetPurchaseAndRefundDetailsUnauthorizedBody {
	return o.Payload
}

func (o *GetPurchaseAndRefundDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPurchaseAndRefundDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseAndRefundDetailsNotFound creates a GetPurchaseAndRefundDetailsNotFound with default headers values
func NewGetPurchaseAndRefundDetailsNotFound() *GetPurchaseAndRefundDetailsNotFound {
	return &GetPurchaseAndRefundDetailsNotFound{}
}

/*
GetPurchaseAndRefundDetailsNotFound describes a response with status code 404, with default header values.

Report not found
*/
type GetPurchaseAndRefundDetailsNotFound struct {
	Payload *GetPurchaseAndRefundDetailsNotFoundBody
}

// IsSuccess returns true when this get purchase and refund details not found response has a 2xx status code
func (o *GetPurchaseAndRefundDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase and refund details not found response has a 3xx status code
func (o *GetPurchaseAndRefundDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase and refund details not found response has a 4xx status code
func (o *GetPurchaseAndRefundDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase and refund details not found response has a 5xx status code
func (o *GetPurchaseAndRefundDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase and refund details not found response a status code equal to that given
func (o *GetPurchaseAndRefundDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get purchase and refund details not found response
func (o *GetPurchaseAndRefundDetailsNotFound) Code() int {
	return 404
}

func (o *GetPurchaseAndRefundDetailsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsNotFound %s", 404, payload)
}

func (o *GetPurchaseAndRefundDetailsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsNotFound %s", 404, payload)
}

func (o *GetPurchaseAndRefundDetailsNotFound) GetPayload() *GetPurchaseAndRefundDetailsNotFoundBody {
	return o.Payload
}

func (o *GetPurchaseAndRefundDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPurchaseAndRefundDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseAndRefundDetailsInternalServerError creates a GetPurchaseAndRefundDetailsInternalServerError with default headers values
func NewGetPurchaseAndRefundDetailsInternalServerError() *GetPurchaseAndRefundDetailsInternalServerError {
	return &GetPurchaseAndRefundDetailsInternalServerError{}
}

/*
GetPurchaseAndRefundDetailsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPurchaseAndRefundDetailsInternalServerError struct {
	Payload *GetPurchaseAndRefundDetailsInternalServerErrorBody
}

// IsSuccess returns true when this get purchase and refund details internal server error response has a 2xx status code
func (o *GetPurchaseAndRefundDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase and refund details internal server error response has a 3xx status code
func (o *GetPurchaseAndRefundDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase and refund details internal server error response has a 4xx status code
func (o *GetPurchaseAndRefundDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purchase and refund details internal server error response has a 5xx status code
func (o *GetPurchaseAndRefundDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get purchase and refund details internal server error response a status code equal to that given
func (o *GetPurchaseAndRefundDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get purchase and refund details internal server error response
func (o *GetPurchaseAndRefundDetailsInternalServerError) Code() int {
	return 500
}

func (o *GetPurchaseAndRefundDetailsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsInternalServerError %s", 500, payload)
}

func (o *GetPurchaseAndRefundDetailsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/purchase-refund-details][%d] getPurchaseAndRefundDetailsInternalServerError %s", 500, payload)
}

func (o *GetPurchaseAndRefundDetailsInternalServerError) GetPayload() *GetPurchaseAndRefundDetailsInternalServerErrorBody {
	return o.Payload
}

func (o *GetPurchaseAndRefundDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPurchaseAndRefundDetailsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetPurchaseAndRefundDetailsBadRequestBody reportingV3PurchaseRefundDetailsGet400Response
//
// HTTP status code for client application
swagger:model GetPurchaseAndRefundDetailsBadRequestBody
*/
type GetPurchaseAndRefundDetailsBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get purchase and refund details bad request body
func (o *GetPurchaseAndRefundDetailsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getPurchaseAndRefundDetailsBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get purchase and refund details bad request body based on the context it is used
func (o *GetPurchaseAndRefundDetailsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0
*/
type GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get purchase and refund details bad request body details items0
func (o *GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get purchase and refund details bad request body details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsInternalServerErrorBody reportingV3PurchaseRefundDetailsGet500Response
//
// HTTP status code for client application
swagger:model GetPurchaseAndRefundDetailsInternalServerErrorBody
*/
type GetPurchaseAndRefundDetailsInternalServerErrorBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get purchase and refund details internal server error body
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsInternalServerError"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsInternalServerError"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsInternalServerError"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsInternalServerError"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getPurchaseAndRefundDetailsInternalServerError"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get purchase and refund details internal server error body based on the context it is used
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0
*/
type GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get purchase and refund details internal server error body details items0
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get purchase and refund details internal server error body details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsInternalServerErrorBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsNotFoundBody reportingV3PurchaseRefundDetailsGet404Response
//
// HTTP status code for client application
swagger:model GetPurchaseAndRefundDetailsNotFoundBody
*/
type GetPurchaseAndRefundDetailsNotFoundBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get purchase and refund details not found body
func (o *GetPurchaseAndRefundDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsNotFoundBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsNotFound"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsNotFoundBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsNotFound"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsNotFoundBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsNotFound"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getPurchaseAndRefundDetailsNotFound"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get purchase and refund details not found body based on the context it is used
func (o *GetPurchaseAndRefundDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsNotFoundBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0
*/
type GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get purchase and refund details not found body details items0
func (o *GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get purchase and refund details not found body details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsNotFoundBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBody reportingV3PurchaseRefundDetailsGet200Response
//
// PurchaseAndRefundDetails
swagger:model GetPurchaseAndRefundDetailsOKBody
*/
type GetPurchaseAndRefundDetailsOKBody struct {

	// List of Authorization Info values
	Authorizations []*GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0 `json:"authorizations"`

	// List of Fee Funding Info values
	FeeAndFundingDetails []*GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0 `json:"feeAndFundingDetails"`

	// limit
	Limit int64 `json:"limit,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// List of Other Info values
	Others []*GetPurchaseAndRefundDetailsOKBodyOthersItems0 `json:"others"`

	// page results
	PageResults int64 `json:"pageResults,omitempty"`

	// List of Request Info values
	RequestDetails []*GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0 `json:"requestDetails"`

	// List of Settlement Status Info values
	SettlementStatuses []*GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0 `json:"settlementStatuses"`

	// List of Settlement Info values
	Settlements []*GetPurchaseAndRefundDetailsOKBodySettlementsItems0 `json:"settlements"`
}

// Validate validates this get purchase and refund details o k body
func (o *GetPurchaseAndRefundDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFeeAndFundingDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOthers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateAuthorizations(formats strfmt.Registry) error {
	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateFeeAndFundingDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.FeeAndFundingDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.FeeAndFundingDetails); i++ {
		if swag.IsZero(o.FeeAndFundingDetails[i]) { // not required
			continue
		}

		if o.FeeAndFundingDetails[i] != nil {
			if err := o.FeeAndFundingDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "feeAndFundingDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "feeAndFundingDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateOthers(formats strfmt.Registry) error {
	if swag.IsZero(o.Others) { // not required
		return nil
	}

	for i := 0; i < len(o.Others); i++ {
		if swag.IsZero(o.Others[i]) { // not required
			continue
		}

		if o.Others[i] != nil {
			if err := o.Others[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "others" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "others" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateRequestDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.RequestDetails); i++ {
		if swag.IsZero(o.RequestDetails[i]) { // not required
			continue
		}

		if o.RequestDetails[i] != nil {
			if err := o.RequestDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "requestDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "requestDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateSettlementStatuses(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementStatuses) { // not required
		return nil
	}

	for i := 0; i < len(o.SettlementStatuses); i++ {
		if swag.IsZero(o.SettlementStatuses[i]) { // not required
			continue
		}

		if o.SettlementStatuses[i] != nil {
			if err := o.SettlementStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlementStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlementStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) validateSettlements(formats strfmt.Registry) error {
	if swag.IsZero(o.Settlements) { // not required
		return nil
	}

	for i := 0; i < len(o.Settlements); i++ {
		if swag.IsZero(o.Settlements[i]) { // not required
			continue
		}

		if o.Settlements[i] != nil {
			if err := o.Settlements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get purchase and refund details o k body based on the context it is used
func (o *GetPurchaseAndRefundDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFeeAndFundingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOthers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRequestDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSettlementStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSettlements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Authorizations); i++ {

		if o.Authorizations[i] != nil {

			if swag.IsZero(o.Authorizations[i]) { // not required
				return nil
			}

			if err := o.Authorizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateFeeAndFundingDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.FeeAndFundingDetails); i++ {

		if o.FeeAndFundingDetails[i] != nil {

			if swag.IsZero(o.FeeAndFundingDetails[i]) { // not required
				return nil
			}

			if err := o.FeeAndFundingDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "feeAndFundingDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "feeAndFundingDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateOthers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Others); i++ {

		if o.Others[i] != nil {

			if swag.IsZero(o.Others[i]) { // not required
				return nil
			}

			if err := o.Others[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "others" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "others" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateRequestDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RequestDetails); i++ {

		if o.RequestDetails[i] != nil {

			if swag.IsZero(o.RequestDetails[i]) { // not required
				return nil
			}

			if err := o.RequestDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "requestDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "requestDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateSettlementStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SettlementStatuses); i++ {

		if o.SettlementStatuses[i] != nil {

			if swag.IsZero(o.SettlementStatuses[i]) { // not required
				return nil
			}

			if err := o.SettlementStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlementStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlementStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBody) contextValidateSettlements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Settlements); i++ {

		if o.Settlements[i] != nil {

			if swag.IsZero(o.Settlements[i]) { // not required
				return nil
			}

			if err := o.Settlements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsOK" + "." + "settlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0 Authorization Info Values
swagger:model GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0
*/
type GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0 struct {

	// Authorization Amount
	// Example: 2.50
	Amount string `json:"amount,omitempty"`

	// Authorization Request Id
	// Example: 12345678901234567890123459
	AuthorizationRequestID string `json:"authorizationRequestId,omitempty"`

	// Authorization Code
	// Example: 160780
	Code string `json:"code,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	CurrencyCode string `json:"currencyCode,omitempty"`

	// Authorization RCode
	// Example: 1
	Rcode string `json:"rcode,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	RequestID string `json:"requestId,omitempty"`

	// Authorization Date
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// Authorization Transaction Reference Number
	// Example: RZ3J9WCS9J27
	TransactionReferenceNumber string `json:"transactionReferenceNumber,omitempty"`
}

// Validate validates this get purchase and refund details o k body authorizations items0
func (o *GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get purchase and refund details o k body authorizations items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0 Fee Funding Section
swagger:model GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0
*/
type GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0 struct {

	// Discount Amount
	// Example: 0.429
	DiscountAmount string `json:"discountAmount,omitempty"`

	// Discount Per Item Fee
	// Example: 0.002
	DiscountPerItemFee string `json:"discountPerItemFee,omitempty"`

	// Discount Percentage
	// Example: 2.39
	DiscountPercentage string `json:"discountPercentage,omitempty"`

	// Dues Assessments
	// Example: 0
	DuesAssessments string `json:"duesAssessments,omitempty"`

	// Fee Currency
	// Example: 1
	FeeCurrency string `json:"feeCurrency,omitempty"`

	// Funding Amount
	// Example: 2.50
	FundingAmount string `json:"fundingAmount,omitempty"`

	// Funding Currency (ISO 4217)
	// Example: USD
	FundingCurrency string `json:"fundingCurrency,omitempty"`

	// interchange Description
	// Example: Visa International Assessments (Enhanced)
	InterchangeDescription string `json:"interchangeDescription,omitempty"`

	// interchange Per Item Fee
	// Example: 2.7
	InterchangePerItemFee string `json:"interchangePerItemFee,omitempty"`

	// interchange Percentage
	// Example: 0.25
	InterchangePercentage string `json:"interchangePercentage,omitempty"`

	// interchange Percentage Amount
	// Example: -3.7500
	InterchangePercentageAmount string `json:"interchangePercentageAmount,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	// Max Length: 26
	RequestID string `json:"requestId,omitempty"`

	// Total Fee
	// Example: 0.429
	TotalFee string `json:"totalFee,omitempty"`
}

// Validate validates this get purchase and refund details o k body fee and funding details items0
func (o *GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0) validateRequestID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestID) { // not required
		return nil
	}

	if err := validate.MaxLength("requestId", "body", o.RequestID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get purchase and refund details o k body fee and funding details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodyFeeAndFundingDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodyOthersItems0 Other Merchant Details Values.
swagger:model GetPurchaseAndRefundDetailsOKBodyOthersItems0
*/
type GetPurchaseAndRefundDetailsOKBodyOthersItems0 struct {

	// First Name
	// Example: First Name
	FirstName string `json:"firstName,omitempty"`

	// Last Name
	// Example: Last Name
	LastName string `json:"lastName,omitempty"`

	// Merchant Defined Data
	// Example: Merchant Defined Data
	MerchantData1 string `json:"merchantData1,omitempty"`

	// Merchant Defined Data
	// Example: Merchant Defined Data
	MerchantData2 string `json:"merchantData2,omitempty"`

	// Merchant Defined Data
	// Example: Merchant Defined Data
	MerchantData3 string `json:"merchantData3,omitempty"`

	// Merchant Defined Data
	// Example: Merchant Defined Data
	MerchantData4 string `json:"merchantData4,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	// Max Length: 26
	RequestID string `json:"requestId,omitempty"`
}

// Validate validates this get purchase and refund details o k body others items0
func (o *GetPurchaseAndRefundDetailsOKBodyOthersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodyOthersItems0) validateRequestID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestID) { // not required
		return nil
	}

	if err := validate.MaxLength("requestId", "body", o.RequestID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get purchase and refund details o k body others items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodyOthersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyOthersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyOthersItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodyOthersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0 Request Info Section
swagger:model GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0
*/
type GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0 struct {

	// Cybersource Merchant Id
	// Example: Cybersource Merchant Id
	CybersourceMerchantID string `json:"cybersourceMerchantId,omitempty"`

	// Group Name
	// Example: 996411990498708810001
	GroupName string `json:"groupName,omitempty"`

	// Merchant Reference Number
	// Example: 47882339
	MerchantReferenceNumber string `json:"merchantReferenceNumber,omitempty"`

	// Cybersource Processor Merchant Id
	// Example: Processor Merchant Id
	ProcessorMerchantID string `json:"processorMerchantId,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	RequestID string `json:"requestId,omitempty"`

	// Transaction Reference Number
	// Example: RZ3J9WCS9J33
	TransactionReferenceNumber string `json:"transactionReferenceNumber,omitempty"`
}

// Validate validates this get purchase and refund details o k body request details items0
func (o *GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get purchase and refund details o k body request details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodyRequestDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0 Settlement Status Section Values.
swagger:model GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0
*/
type GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0 struct {

	// errorText
	// Example: errorText
	ErrorText string `json:"errorText,omitempty"`

	// ReasonCode
	// Example: reasonCode
	ReasonCode string `json:"reasonCode,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	// Max Length: 26
	RequestID string `json:"requestId,omitempty"`

	// Settlement Date
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	SettlementTime strfmt.DateTime `json:"settlementTime,omitempty"`

	// Settlement Status
	// Example: Settlement Status
	Status string `json:"status,omitempty"`
}

// Validate validates this get purchase and refund details o k body settlement statuses items0
func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) validateRequestID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestID) { // not required
		return nil
	}

	if err := validate.MaxLength("requestId", "body", o.RequestID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) validateSettlementTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementTime) { // not required
		return nil
	}

	if err := validate.FormatOf("settlementTime", "body", "date-time", o.SettlementTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get purchase and refund details o k body settlement statuses items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodySettlementStatusesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsOKBodySettlementsItems0 get purchase and refund details o k body settlements items0
swagger:model GetPurchaseAndRefundDetailsOKBodySettlementsItems0
*/
type GetPurchaseAndRefundDetailsOKBodySettlementsItems0 struct {

	// Account Suffix
	// Example: 0004
	AccountSuffix string `json:"accountSuffix,omitempty"`

	// Amount
	// Example: 23.00
	Amount string `json:"amount,omitempty"`

	// Card Type
	// Example: null
	CardType string `json:"cardType,omitempty"`

	// Valid ISO 4217 ALPHA-3 currency code
	// Example: USD
	CurrencyCode string `json:"currencyCode,omitempty"`

	// Cybersource Batch Id
	// Example: 123123123123123
	CybersourceBatchID string `json:"cybersourceBatchId,omitempty"`

	// Cybersource Batch Time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	CybersourceBatchTime strfmt.DateTime `json:"cybersourceBatchTime,omitempty"`

	// Debit Network
	DebitNetwork string `json:"debitNetwork,omitempty"`

	// payment method
	// Example: VISA
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// Payment Type
	// Example: credit card
	PaymentType string `json:"paymentType,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request.
	// Example: 12345678901234567890123456
	RequestID string `json:"requestId,omitempty"`

	// Submission Date
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	SubmissionTime strfmt.DateTime `json:"submissionTime,omitempty"`

	// Transaction Type
	// Example: Purchases
	TransactionType string `json:"transactionType,omitempty"`

	// Solution Type (Wallet)
	// Example: V.me
	WalletType string `json:"walletType,omitempty"`
}

// Validate validates this get purchase and refund details o k body settlements items0
func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCybersourceBatchTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmissionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) validateCybersourceBatchTime(formats strfmt.Registry) error {
	if swag.IsZero(o.CybersourceBatchTime) { // not required
		return nil
	}

	if err := validate.FormatOf("cybersourceBatchTime", "body", "date-time", o.CybersourceBatchTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) validateSubmissionTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmissionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("submissionTime", "body", "date-time", o.SubmissionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get purchase and refund details o k body settlements items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsOKBodySettlementsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsOKBodySettlementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsUnauthorizedBody reportingV3PurchaseRefundDetailsGet401Response
//
// HTTP status code for client application
swagger:model GetPurchaseAndRefundDetailsUnauthorizedBody
*/
type GetPurchaseAndRefundDetailsUnauthorizedBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get purchase and refund details unauthorized body
func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsUnauthorized"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsUnauthorized" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsUnauthorized" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsUnauthorized"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsUnauthorized"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getPurchaseAndRefundDetailsUnauthorized"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getPurchaseAndRefundDetailsUnauthorized"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get purchase and refund details unauthorized body based on the context it is used
func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPurchaseAndRefundDetailsUnauthorized" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getPurchaseAndRefundDetailsUnauthorized" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0
*/
type GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get purchase and refund details unauthorized body details items0
func (o *GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get purchase and refund details unauthorized body details items0 based on context it is used
func (o *GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPurchaseAndRefundDetailsUnauthorizedBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
