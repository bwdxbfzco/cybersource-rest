// Code generated by go-swagger; DO NOT EDIT.

package asymmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAsymKeyReader is a Reader for the UpdateAsymKey structure.
type UpdateAsymKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAsymKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAsymKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAsymKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAsymKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /kms/v2/keys-asym/{keyId}] UpdateAsymKey", response, response.Code())
	}
}

// NewUpdateAsymKeyOK creates a UpdateAsymKeyOK with default headers values
func NewUpdateAsymKeyOK() *UpdateAsymKeyOK {
	return &UpdateAsymKeyOK{}
}

/*
UpdateAsymKeyOK describes a response with status code 200, with default header values.

Successful response.
*/
type UpdateAsymKeyOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update asym key o k response has a 2xx status code
func (o *UpdateAsymKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update asym key o k response has a 3xx status code
func (o *UpdateAsymKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asym key o k response has a 4xx status code
func (o *UpdateAsymKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asym key o k response has a 5xx status code
func (o *UpdateAsymKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update asym key o k response a status code equal to that given
func (o *UpdateAsymKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update asym key o k response
func (o *UpdateAsymKeyOK) Code() int {
	return 200
}

func (o *UpdateAsymKeyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyOK %s", 200, payload)
}

func (o *UpdateAsymKeyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyOK %s", 200, payload)
}

func (o *UpdateAsymKeyOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateAsymKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAsymKeyBadRequest creates a UpdateAsymKeyBadRequest with default headers values
func NewUpdateAsymKeyBadRequest() *UpdateAsymKeyBadRequest {
	return &UpdateAsymKeyBadRequest{}
}

/*
UpdateAsymKeyBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type UpdateAsymKeyBadRequest struct {
	Payload *UpdateAsymKeyBadRequestBody
}

// IsSuccess returns true when this update asym key bad request response has a 2xx status code
func (o *UpdateAsymKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asym key bad request response has a 3xx status code
func (o *UpdateAsymKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asym key bad request response has a 4xx status code
func (o *UpdateAsymKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asym key bad request response has a 5xx status code
func (o *UpdateAsymKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update asym key bad request response a status code equal to that given
func (o *UpdateAsymKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update asym key bad request response
func (o *UpdateAsymKeyBadRequest) Code() int {
	return 400
}

func (o *UpdateAsymKeyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyBadRequest %s", 400, payload)
}

func (o *UpdateAsymKeyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyBadRequest %s", 400, payload)
}

func (o *UpdateAsymKeyBadRequest) GetPayload() *UpdateAsymKeyBadRequestBody {
	return o.Payload
}

func (o *UpdateAsymKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateAsymKeyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAsymKeyInternalServerError creates a UpdateAsymKeyInternalServerError with default headers values
func NewUpdateAsymKeyInternalServerError() *UpdateAsymKeyInternalServerError {
	return &UpdateAsymKeyInternalServerError{}
}

/*
UpdateAsymKeyInternalServerError describes a response with status code 500, with default header values.

Unexpected system error or system timeout.
*/
type UpdateAsymKeyInternalServerError struct {
	Payload *UpdateAsymKeyInternalServerErrorBody
}

// IsSuccess returns true when this update asym key internal server error response has a 2xx status code
func (o *UpdateAsymKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asym key internal server error response has a 3xx status code
func (o *UpdateAsymKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asym key internal server error response has a 4xx status code
func (o *UpdateAsymKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asym key internal server error response has a 5xx status code
func (o *UpdateAsymKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update asym key internal server error response a status code equal to that given
func (o *UpdateAsymKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update asym key internal server error response
func (o *UpdateAsymKeyInternalServerError) Code() int {
	return 500
}

func (o *UpdateAsymKeyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyInternalServerError %s", 500, payload)
}

func (o *UpdateAsymKeyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /kms/v2/keys-asym/{keyId}][%d] updateAsymKeyInternalServerError %s", 500, payload)
}

func (o *UpdateAsymKeyInternalServerError) GetPayload() *UpdateAsymKeyInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateAsymKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateAsymKeyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateAsymKeyBadRequestBody update asym key bad request body
swagger:model UpdateAsymKeyBadRequestBody
*/
type UpdateAsymKeyBadRequestBody struct {

	// details
	Details []*UpdateAsymKeyBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update asym key bad request body
func (o *UpdateAsymKeyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAsymKeyBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateAsymKeyBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateAsymKeyBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update asym key bad request body based on the context it is used
func (o *UpdateAsymKeyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAsymKeyBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateAsymKeyBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateAsymKeyBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAsymKeyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAsymKeyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateAsymKeyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateAsymKeyBadRequestBodyDetailsItems0 update asym key bad request body details items0
swagger:model UpdateAsymKeyBadRequestBodyDetailsItems0
*/
type UpdateAsymKeyBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this update asym key bad request body details items0
func (o *UpdateAsymKeyBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update asym key bad request body details items0 based on context it is used
func (o *UpdateAsymKeyBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAsymKeyBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAsymKeyBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateAsymKeyBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateAsymKeyBody update asym key body
swagger:model UpdateAsymKeyBody
*/
type UpdateAsymKeyBody struct {

	// Organization Id
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Status can be active/inactive
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this update asym key body
func (o *UpdateAsymKeyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAsymKeyBody) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("UpdateAsymKeysRequest"+"."+"organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateAsymKeyBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("UpdateAsymKeysRequest"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update asym key body based on context it is used
func (o *UpdateAsymKeyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAsymKeyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAsymKeyBody) UnmarshalBinary(b []byte) error {
	var res UpdateAsymKeyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateAsymKeyInternalServerErrorBody update asym key internal server error body
swagger:model UpdateAsymKeyInternalServerErrorBody
*/
type UpdateAsymKeyInternalServerErrorBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted request.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update asym key internal server error body
func (o *UpdateAsymKeyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update asym key internal server error body based on context it is used
func (o *UpdateAsymKeyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAsymKeyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAsymKeyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateAsymKeyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
