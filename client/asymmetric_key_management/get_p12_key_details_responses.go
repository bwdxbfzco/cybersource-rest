// Code generated by go-swagger; DO NOT EDIT.

package asymmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetP12KeyDetailsReader is a Reader for the GetP12KeyDetails structure.
type GetP12KeyDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetP12KeyDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetP12KeyDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetP12KeyDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetP12KeyDetailsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /kms/v2/keys-asym/{keyId}] getP12KeyDetails", response, response.Code())
	}
}

// NewGetP12KeyDetailsOK creates a GetP12KeyDetailsOK with default headers values
func NewGetP12KeyDetailsOK() *GetP12KeyDetailsOK {
	return &GetP12KeyDetailsOK{}
}

/*
GetP12KeyDetailsOK describes a response with status code 200, with default header values.

Successful response.
*/
type GetP12KeyDetailsOK struct {
	Payload *GetP12KeyDetailsOKBody
}

// IsSuccess returns true when this get p12 key details o k response has a 2xx status code
func (o *GetP12KeyDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get p12 key details o k response has a 3xx status code
func (o *GetP12KeyDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get p12 key details o k response has a 4xx status code
func (o *GetP12KeyDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get p12 key details o k response has a 5xx status code
func (o *GetP12KeyDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get p12 key details o k response a status code equal to that given
func (o *GetP12KeyDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get p12 key details o k response
func (o *GetP12KeyDetailsOK) Code() int {
	return 200
}

func (o *GetP12KeyDetailsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsOK %s", 200, payload)
}

func (o *GetP12KeyDetailsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsOK %s", 200, payload)
}

func (o *GetP12KeyDetailsOK) GetPayload() *GetP12KeyDetailsOKBody {
	return o.Payload
}

func (o *GetP12KeyDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12KeyDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetP12KeyDetailsBadRequest creates a GetP12KeyDetailsBadRequest with default headers values
func NewGetP12KeyDetailsBadRequest() *GetP12KeyDetailsBadRequest {
	return &GetP12KeyDetailsBadRequest{}
}

/*
GetP12KeyDetailsBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type GetP12KeyDetailsBadRequest struct {
	Payload *GetP12KeyDetailsBadRequestBody
}

// IsSuccess returns true when this get p12 key details bad request response has a 2xx status code
func (o *GetP12KeyDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get p12 key details bad request response has a 3xx status code
func (o *GetP12KeyDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get p12 key details bad request response has a 4xx status code
func (o *GetP12KeyDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get p12 key details bad request response has a 5xx status code
func (o *GetP12KeyDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get p12 key details bad request response a status code equal to that given
func (o *GetP12KeyDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get p12 key details bad request response
func (o *GetP12KeyDetailsBadRequest) Code() int {
	return 400
}

func (o *GetP12KeyDetailsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsBadRequest %s", 400, payload)
}

func (o *GetP12KeyDetailsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsBadRequest %s", 400, payload)
}

func (o *GetP12KeyDetailsBadRequest) GetPayload() *GetP12KeyDetailsBadRequestBody {
	return o.Payload
}

func (o *GetP12KeyDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12KeyDetailsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetP12KeyDetailsBadGateway creates a GetP12KeyDetailsBadGateway with default headers values
func NewGetP12KeyDetailsBadGateway() *GetP12KeyDetailsBadGateway {
	return &GetP12KeyDetailsBadGateway{}
}

/*
GetP12KeyDetailsBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type GetP12KeyDetailsBadGateway struct {
	Payload *GetP12KeyDetailsBadGatewayBody
}

// IsSuccess returns true when this get p12 key details bad gateway response has a 2xx status code
func (o *GetP12KeyDetailsBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get p12 key details bad gateway response has a 3xx status code
func (o *GetP12KeyDetailsBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get p12 key details bad gateway response has a 4xx status code
func (o *GetP12KeyDetailsBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get p12 key details bad gateway response has a 5xx status code
func (o *GetP12KeyDetailsBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get p12 key details bad gateway response a status code equal to that given
func (o *GetP12KeyDetailsBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get p12 key details bad gateway response
func (o *GetP12KeyDetailsBadGateway) Code() int {
	return 502
}

func (o *GetP12KeyDetailsBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsBadGateway %s", 502, payload)
}

func (o *GetP12KeyDetailsBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /kms/v2/keys-asym/{keyId}][%d] getP12KeyDetailsBadGateway %s", 502, payload)
}

func (o *GetP12KeyDetailsBadGateway) GetPayload() *GetP12KeyDetailsBadGatewayBody {
	return o.Payload
}

func (o *GetP12KeyDetailsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12KeyDetailsBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetP12KeyDetailsBadGatewayBody get p12 key details bad gateway body
swagger:model GetP12KeyDetailsBadGatewayBody
*/
type GetP12KeyDetailsBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get p12 key details bad gateway body
func (o *GetP12KeyDetailsBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get p12 key details bad gateway body based on context it is used
func (o *GetP12KeyDetailsBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetP12KeyDetailsBadRequestBody get p12 key details bad request body
swagger:model GetP12KeyDetailsBadRequestBody
*/
type GetP12KeyDetailsBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get p12 key details bad request body
func (o *GetP12KeyDetailsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get p12 key details bad request body based on context it is used
func (o *GetP12KeyDetailsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetP12KeyDetailsOKBody kmsV2KeysAsymGet200Response
swagger:model GetP12KeyDetailsOKBody
*/
type GetP12KeyDetailsOKBody struct {

	// key information
	KeyInformation *GetP12KeyDetailsOKBodyKeyInformation `json:"keyInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get p12 key details o k body
func (o *GetP12KeyDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	if o.KeyInformation != nil {
		if err := o.KeyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get p12 key details o k body based on the context it is used
func (o *GetP12KeyDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.KeyInformation != nil {

		if swag.IsZero(o.KeyInformation) { // not required
			return nil
		}

		if err := o.KeyInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetP12KeyDetailsOKBodyKeyInformation key information
//
swagger:model GetP12KeyDetailsOKBodyKeyInformation
*/
type GetP12KeyDetailsOKBodyKeyInformation struct {

	// Key alias
	Alias string `json:"alias,omitempty"`

	// error information
	ErrorInformation *GetP12KeyDetailsOKBodyKeyInformationErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//  - INACTIVE
	//  - EXPIRED
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get p12 key details o k body key information
func (o *GetP12KeyDetailsOKBodyKeyInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBodyKeyInformation) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get p12 key details o k body key information based on the context it is used
func (o *GetP12KeyDetailsOKBodyKeyInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBodyKeyInformation) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformation) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsOKBodyKeyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetP12KeyDetailsOKBodyKeyInformationErrorInformation get p12 key details o k body key information error information
swagger:model GetP12KeyDetailsOKBodyKeyInformationErrorInformation
*/
type GetP12KeyDetailsOKBodyKeyInformationErrorInformation struct {

	// details
	Details []*GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get p12 key details o k body key information error information
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get p12 key details o k body key information error information based on the context it is used
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getP12KeyDetailsOK" + "." + "keyInformation" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsOKBodyKeyInformationErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 get p12 key details o k body key information error information details items0
swagger:model GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0
*/
type GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get p12 key details o k body key information error information details items0
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get p12 key details o k body key information error information details items0 based on context it is used
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetP12KeyDetailsOKBodyKeyInformationErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
