// Code generated by go-swagger; DO NOT EDIT.

package asymmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteBulkP12KeysReader is a Reader for the DeleteBulkP12Keys structure.
type DeleteBulkP12KeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBulkP12KeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBulkP12KeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteBulkP12KeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDeleteBulkP12KeysBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/v2/keys-asym/deletes] deleteBulkP12Keys", response, response.Code())
	}
}

// NewDeleteBulkP12KeysOK creates a DeleteBulkP12KeysOK with default headers values
func NewDeleteBulkP12KeysOK() *DeleteBulkP12KeysOK {
	return &DeleteBulkP12KeysOK{}
}

/*
DeleteBulkP12KeysOK describes a response with status code 200, with default header values.

Successful response
*/
type DeleteBulkP12KeysOK struct {
	Payload *DeleteBulkP12KeysOKBody
}

// IsSuccess returns true when this delete bulk p12 keys o k response has a 2xx status code
func (o *DeleteBulkP12KeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete bulk p12 keys o k response has a 3xx status code
func (o *DeleteBulkP12KeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk p12 keys o k response has a 4xx status code
func (o *DeleteBulkP12KeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete bulk p12 keys o k response has a 5xx status code
func (o *DeleteBulkP12KeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bulk p12 keys o k response a status code equal to that given
func (o *DeleteBulkP12KeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete bulk p12 keys o k response
func (o *DeleteBulkP12KeysOK) Code() int {
	return 200
}

func (o *DeleteBulkP12KeysOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysOK %s", 200, payload)
}

func (o *DeleteBulkP12KeysOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysOK %s", 200, payload)
}

func (o *DeleteBulkP12KeysOK) GetPayload() *DeleteBulkP12KeysOKBody {
	return o.Payload
}

func (o *DeleteBulkP12KeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkP12KeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBulkP12KeysBadRequest creates a DeleteBulkP12KeysBadRequest with default headers values
func NewDeleteBulkP12KeysBadRequest() *DeleteBulkP12KeysBadRequest {
	return &DeleteBulkP12KeysBadRequest{}
}

/*
DeleteBulkP12KeysBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type DeleteBulkP12KeysBadRequest struct {
	Payload *DeleteBulkP12KeysBadRequestBody
}

// IsSuccess returns true when this delete bulk p12 keys bad request response has a 2xx status code
func (o *DeleteBulkP12KeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bulk p12 keys bad request response has a 3xx status code
func (o *DeleteBulkP12KeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk p12 keys bad request response has a 4xx status code
func (o *DeleteBulkP12KeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete bulk p12 keys bad request response has a 5xx status code
func (o *DeleteBulkP12KeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bulk p12 keys bad request response a status code equal to that given
func (o *DeleteBulkP12KeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete bulk p12 keys bad request response
func (o *DeleteBulkP12KeysBadRequest) Code() int {
	return 400
}

func (o *DeleteBulkP12KeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysBadRequest %s", 400, payload)
}

func (o *DeleteBulkP12KeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysBadRequest %s", 400, payload)
}

func (o *DeleteBulkP12KeysBadRequest) GetPayload() *DeleteBulkP12KeysBadRequestBody {
	return o.Payload
}

func (o *DeleteBulkP12KeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkP12KeysBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBulkP12KeysBadGateway creates a DeleteBulkP12KeysBadGateway with default headers values
func NewDeleteBulkP12KeysBadGateway() *DeleteBulkP12KeysBadGateway {
	return &DeleteBulkP12KeysBadGateway{}
}

/*
DeleteBulkP12KeysBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type DeleteBulkP12KeysBadGateway struct {
	Payload *DeleteBulkP12KeysBadGatewayBody
}

// IsSuccess returns true when this delete bulk p12 keys bad gateway response has a 2xx status code
func (o *DeleteBulkP12KeysBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bulk p12 keys bad gateway response has a 3xx status code
func (o *DeleteBulkP12KeysBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bulk p12 keys bad gateway response has a 4xx status code
func (o *DeleteBulkP12KeysBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete bulk p12 keys bad gateway response has a 5xx status code
func (o *DeleteBulkP12KeysBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this delete bulk p12 keys bad gateway response a status code equal to that given
func (o *DeleteBulkP12KeysBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the delete bulk p12 keys bad gateway response
func (o *DeleteBulkP12KeysBadGateway) Code() int {
	return 502
}

func (o *DeleteBulkP12KeysBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysBadGateway %s", 502, payload)
}

func (o *DeleteBulkP12KeysBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym/deletes][%d] deleteBulkP12KeysBadGateway %s", 502, payload)
}

func (o *DeleteBulkP12KeysBadGateway) GetPayload() *DeleteBulkP12KeysBadGatewayBody {
	return o.Payload
}

func (o *DeleteBulkP12KeysBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteBulkP12KeysBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteBulkP12KeysBadGatewayBody delete bulk p12 keys bad gateway body
swagger:model DeleteBulkP12KeysBadGatewayBody
*/
type DeleteBulkP12KeysBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk p12 keys bad gateway body
func (o *DeleteBulkP12KeysBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk p12 keys bad gateway body based on context it is used
func (o *DeleteBulkP12KeysBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysBadRequestBody delete bulk p12 keys bad request body
swagger:model DeleteBulkP12KeysBadRequestBody
*/
type DeleteBulkP12KeysBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk p12 keys bad request body
func (o *DeleteBulkP12KeysBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk p12 keys bad request body based on context it is used
func (o *DeleteBulkP12KeysBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysBody delete bulk p12 keys body
swagger:model DeleteBulkP12KeysBody
*/
type DeleteBulkP12KeysBody struct {

	// client reference information
	ClientReferenceInformation *DeleteBulkP12KeysParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*DeleteBulkP12KeysParamsBodyKeyInformationItems0 `json:"keyInformation"`
}

// Validate validates this delete bulk p12 keys body
func (o *DeleteBulkP12KeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkP12KeysBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys body based on the context it is used
func (o *DeleteBulkP12KeysBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkP12KeysBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBody kmsV2KeysAsymDeletesPost200Response
swagger:model DeleteBulkP12KeysOKBody
*/
type DeleteBulkP12KeysOKBody struct {

	// client reference information
	ClientReferenceInformation *DeleteBulkP12KeysOKBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*DeleteBulkP12KeysOKBodyKeyInformationItems0 `json:"keyInformation"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body
func (o *DeleteBulkP12KeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkP12KeysOKBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkP12KeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkP12KeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys o k body based on the context it is used
func (o *DeleteBulkP12KeysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *DeleteBulkP12KeysOKBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBulkP12KeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteBulkP12KeysOK" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBodyClientReferenceInformation delete bulk p12 keys o k body client reference information
swagger:model DeleteBulkP12KeysOKBodyClientReferenceInformation
*/
type DeleteBulkP12KeysOKBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body client reference information
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysOK"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys o k body client reference information based on the context it is used
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysOK" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBodyClientReferenceInformationPartner delete bulk p12 keys o k body client reference information partner
swagger:model DeleteBulkP12KeysOKBodyClientReferenceInformationPartner
*/
type DeleteBulkP12KeysOKBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body client reference information partner
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysOK"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysOK"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk p12 keys o k body client reference information partner based on context it is used
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBodyKeyInformationItems0 key information
//
swagger:model DeleteBulkP12KeysOKBodyKeyInformationItems0
*/
type DeleteBulkP12KeysOKBodyKeyInformationItems0 struct {

	// error information
	ErrorInformation *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation `json:"errorInformation,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//  - INACTIVE
	//  - EXPIRED
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body key information items0
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys o k body key information items0 based on the context it is used
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation delete bulk p12 keys o k body key information items0 error information
swagger:model DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation
*/
type DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation struct {

	// details
	Details []*DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body key information items0 error information
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys o k body key information items0 error information based on the context it is used
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 delete bulk p12 keys o k body key information items0 error information details items0
swagger:model DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0
*/
type DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete bulk p12 keys o k body key information items0 error information details items0
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete bulk p12 keys o k body key information items0 error information details items0 based on context it is used
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysOKBodyKeyInformationItems0ErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysParamsBodyClientReferenceInformation delete bulk p12 keys params body client reference information
swagger:model DeleteBulkP12KeysParamsBodyClientReferenceInformation
*/
type DeleteBulkP12KeysParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this delete bulk p12 keys params body client reference information
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete bulk p12 keys params body client reference information based on the context it is used
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteBulkP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner delete bulk p12 keys params body client reference information partner
swagger:model DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner
*/
type DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this delete bulk p12 keys params body client reference information partner
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("deleteBulkP12KeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk p12 keys params body client reference information partner based on context it is used
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteBulkP12KeysParamsBodyKeyInformationItems0 key information
//
swagger:model DeleteBulkP12KeysParamsBodyKeyInformationItems0
*/
type DeleteBulkP12KeysParamsBodyKeyInformationItems0 struct {

	// Key Serial Number
	// Required: true
	KeyID *string `json:"keyId"`

	// Merchant Id
	//
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this delete bulk p12 keys params body key information items0
func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("keyId", "body", o.KeyID); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete bulk p12 keys params body key information items0 based on context it is used
func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBulkP12KeysParamsBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res DeleteBulkP12KeysParamsBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
