// Code generated by go-swagger; DO NOT EDIT.

package asymmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateP12KeysReader is a Reader for the CreateP12Keys structure.
type CreateP12KeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateP12KeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateP12KeysCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateP12KeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateP12KeysBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kms/v2/keys-asym] createP12Keys", response, response.Code())
	}
}

// NewCreateP12KeysCreated creates a CreateP12KeysCreated with default headers values
func NewCreateP12KeysCreated() *CreateP12KeysCreated {
	return &CreateP12KeysCreated{}
}

/*
CreateP12KeysCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreateP12KeysCreated struct {
	Payload *CreateP12KeysCreatedBody
}

// IsSuccess returns true when this create p12 keys created response has a 2xx status code
func (o *CreateP12KeysCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create p12 keys created response has a 3xx status code
func (o *CreateP12KeysCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create p12 keys created response has a 4xx status code
func (o *CreateP12KeysCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create p12 keys created response has a 5xx status code
func (o *CreateP12KeysCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create p12 keys created response a status code equal to that given
func (o *CreateP12KeysCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create p12 keys created response
func (o *CreateP12KeysCreated) Code() int {
	return 201
}

func (o *CreateP12KeysCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysCreated %s", 201, payload)
}

func (o *CreateP12KeysCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysCreated %s", 201, payload)
}

func (o *CreateP12KeysCreated) GetPayload() *CreateP12KeysCreatedBody {
	return o.Payload
}

func (o *CreateP12KeysCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateP12KeysCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateP12KeysBadRequest creates a CreateP12KeysBadRequest with default headers values
func NewCreateP12KeysBadRequest() *CreateP12KeysBadRequest {
	return &CreateP12KeysBadRequest{}
}

/*
CreateP12KeysBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type CreateP12KeysBadRequest struct {
	Payload *CreateP12KeysBadRequestBody
}

// IsSuccess returns true when this create p12 keys bad request response has a 2xx status code
func (o *CreateP12KeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create p12 keys bad request response has a 3xx status code
func (o *CreateP12KeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create p12 keys bad request response has a 4xx status code
func (o *CreateP12KeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create p12 keys bad request response has a 5xx status code
func (o *CreateP12KeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create p12 keys bad request response a status code equal to that given
func (o *CreateP12KeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create p12 keys bad request response
func (o *CreateP12KeysBadRequest) Code() int {
	return 400
}

func (o *CreateP12KeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysBadRequest %s", 400, payload)
}

func (o *CreateP12KeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysBadRequest %s", 400, payload)
}

func (o *CreateP12KeysBadRequest) GetPayload() *CreateP12KeysBadRequestBody {
	return o.Payload
}

func (o *CreateP12KeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateP12KeysBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateP12KeysBadGateway creates a CreateP12KeysBadGateway with default headers values
func NewCreateP12KeysBadGateway() *CreateP12KeysBadGateway {
	return &CreateP12KeysBadGateway{}
}

/*
CreateP12KeysBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateP12KeysBadGateway struct {
	Payload *CreateP12KeysBadGatewayBody
}

// IsSuccess returns true when this create p12 keys bad gateway response has a 2xx status code
func (o *CreateP12KeysBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create p12 keys bad gateway response has a 3xx status code
func (o *CreateP12KeysBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create p12 keys bad gateway response has a 4xx status code
func (o *CreateP12KeysBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create p12 keys bad gateway response has a 5xx status code
func (o *CreateP12KeysBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create p12 keys bad gateway response a status code equal to that given
func (o *CreateP12KeysBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create p12 keys bad gateway response
func (o *CreateP12KeysBadGateway) Code() int {
	return 502
}

func (o *CreateP12KeysBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysBadGateway %s", 502, payload)
}

func (o *CreateP12KeysBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /kms/v2/keys-asym][%d] createP12KeysBadGateway %s", 502, payload)
}

func (o *CreateP12KeysBadGateway) GetPayload() *CreateP12KeysBadGatewayBody {
	return o.Payload
}

func (o *CreateP12KeysBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateP12KeysBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateP12KeysBadGatewayBody create p12 keys bad gateway body
swagger:model CreateP12KeysBadGatewayBody
*/
type CreateP12KeysBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create p12 keys bad gateway body
func (o *CreateP12KeysBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create p12 keys bad gateway body based on context it is used
func (o *CreateP12KeysBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysBadRequestBody create p12 keys bad request body
swagger:model CreateP12KeysBadRequestBody
*/
type CreateP12KeysBadRequestBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// HTTP status code of the submitted request.
	//
	// Possible values:
	//  - 500
	//
	StatusCode string `json:"statusCode,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create p12 keys bad request body
func (o *CreateP12KeysBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create p12 keys bad request body based on context it is used
func (o *CreateP12KeysBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysBody create p12 keys body
swagger:model CreateP12KeysBody
*/
type CreateP12KeysBody struct {

	// client reference information
	ClientReferenceInformation *CreateP12KeysParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateP12KeysParamsBodyKeyInformationItems0 `json:"keyInformation"`
}

// Validate validates this create p12 keys body
func (o *CreateP12KeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateP12KeysBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create p12 keys body based on the context it is used
func (o *CreateP12KeysBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateP12KeysBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysRequest" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysBody) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBody kmsV2KeysAsymPost201Response
swagger:model CreateP12KeysCreatedBody
*/
type CreateP12KeysCreatedBody struct {

	// certificate information
	CertificateInformation []*CreateP12KeysCreatedBodyCertificateInformationItems0 `json:"certificateInformation"`

	// client reference information
	ClientReferenceInformation *CreateP12KeysCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// key information
	KeyInformation []*CreateP12KeysCreatedBodyKeyInformationItems0 `json:"keyInformation"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create p12 keys created body
func (o *CreateP12KeysCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCertificateInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBody) validateCertificateInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.CertificateInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.CertificateInformation); i++ {
		if swag.IsZero(o.CertificateInformation[i]) { // not required
			continue
		}

		if o.CertificateInformation[i] != nil {
			if err := o.CertificateInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysCreated" + "." + "certificateInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysCreated" + "." + "certificateInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateP12KeysCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateP12KeysCreatedBody) validateKeyInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.KeyInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.KeyInformation); i++ {
		if swag.IsZero(o.KeyInformation[i]) { // not required
			continue
		}

		if o.KeyInformation[i] != nil {
			if err := o.KeyInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create p12 keys created body based on the context it is used
func (o *CreateP12KeysCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCertificateInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKeyInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBody) contextValidateCertificateInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CertificateInformation); i++ {

		if o.CertificateInformation[i] != nil {

			if swag.IsZero(o.CertificateInformation[i]) { // not required
				return nil
			}

			if err := o.CertificateInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysCreated" + "." + "certificateInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysCreated" + "." + "certificateInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateP12KeysCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateP12KeysCreatedBody) contextValidateKeyInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KeyInformation); i++ {

		if o.KeyInformation[i] != nil {

			if swag.IsZero(o.KeyInformation[i]) { // not required
				return nil
			}

			if err := o.KeyInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createP12KeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createP12KeysCreated" + "." + "keyInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyCertificateInformationItems0 create p12 keys created body certificate information items0
swagger:model CreateP12KeysCreatedBodyCertificateInformationItems0
*/
type CreateP12KeysCreatedBodyCertificateInformationItems0 struct {

	// Key alias
	Alias string `json:"alias,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`
}

// Validate validates this create p12 keys created body certificate information items0
func (o *CreateP12KeysCreatedBodyCertificateInformationItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create p12 keys created body certificate information items0 based on context it is used
func (o *CreateP12KeysCreatedBodyCertificateInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyCertificateInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyCertificateInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyCertificateInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyClientReferenceInformation create p12 keys created body client reference information
swagger:model CreateP12KeysCreatedBodyClientReferenceInformation
*/
type CreateP12KeysCreatedBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateP12KeysCreatedBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create p12 keys created body client reference information
func (o *CreateP12KeysCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateP12KeysCreatedBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create p12 keys created body client reference information based on the context it is used
func (o *CreateP12KeysCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyClientReferenceInformationPartner create p12 keys created body client reference information partner
swagger:model CreateP12KeysCreatedBodyClientReferenceInformationPartner
*/
type CreateP12KeysCreatedBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create p12 keys created body client reference information partner
func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create p12 keys created body client reference information partner based on context it is used
func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyKeyInformationItems0 key information
//
swagger:model CreateP12KeysCreatedBodyKeyInformationItems0
*/
type CreateP12KeysCreatedBodyKeyInformationItems0 struct {

	// Key alias
	Alias string `json:"alias,omitempty"`

	// error information
	ErrorInformation *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation `json:"errorInformation,omitempty"`

	// The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	ExpirationDate string `json:"expirationDate,omitempty"`

	// value of the key
	//
	Key string `json:"key,omitempty"`

	// Key Serial Number
	//
	KeyID string `json:"keyId,omitempty"`

	// message in case of failed key
	Message string `json:"message,omitempty"`

	// Merchant Id
	//
	OrganizationID string `json:"organizationId,omitempty"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The status of the key.
	//
	// Possible values:
	//  - FAILED
	//  - ACTIVE
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this create p12 keys created body key information items0
func (o *CreateP12KeysCreatedBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyKeyInformationItems0) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create p12 keys created body key information items0 based on the context it is used
func (o *CreateP12KeysCreatedBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyKeyInformationItems0) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation create p12 keys created body key information items0 error information
swagger:model CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation
*/
type CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation struct {

	// details
	Details []*CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 `json:"details"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create p12 keys created body key information items0 error information
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create p12 keys created body key information items0 error information based on the context it is used
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 create p12 keys created body key information items0 error information details items0
swagger:model CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
*/
type CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create p12 keys created body key information items0 error information details items0
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create p12 keys created body key information items0 error information details items0 based on context it is used
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysCreatedBodyKeyInformationItems0ErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysParamsBodyClientReferenceInformation create p12 keys params body client reference information
swagger:model CreateP12KeysParamsBodyClientReferenceInformation
*/
type CreateP12KeysParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Comments
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateP12KeysParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create p12 keys params body client reference information
func (o *CreateP12KeysParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateP12KeysParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create p12 keys params body client reference information based on the context it is used
func (o *CreateP12KeysParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createP12KeysRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysParamsBodyClientReferenceInformationPartner create p12 keys params body client reference information partner
swagger:model CreateP12KeysParamsBodyClientReferenceInformationPartner
*/
type CreateP12KeysParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create p12 keys params body client reference information partner
func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createP12KeysRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create p12 keys params body client reference information partner based on context it is used
func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateP12KeysParamsBodyKeyInformationItems0 key information
//
swagger:model CreateP12KeysParamsBodyKeyInformationItems0
*/
type CreateP12KeysParamsBodyKeyInformationItems0 struct {

	// Certificate Signing Request(csr), one needs to use the contents of the csr created for the same organizationId. Please extract string from '\n' and '-----BEGIN CERTIFICATE REQUEST-----','-----END CERTIFICATE REQUEST-----'
	//
	// Required: true
	Cert *string `json:"cert"`

	// Merchant Id
	//
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client's convenience. If client specifies value for this field in the request, it is expected to be available in the response.
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this create p12 keys params body key information items0
func (o *CreateP12KeysParamsBodyKeyInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCert(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateP12KeysParamsBodyKeyInformationItems0) validateCert(formats strfmt.Registry) error {

	if err := validate.Required("cert", "body", o.Cert); err != nil {
		return err
	}

	return nil
}

func (o *CreateP12KeysParamsBodyKeyInformationItems0) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", o.OrganizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create p12 keys params body key information items0 based on context it is used
func (o *CreateP12KeysParamsBodyKeyInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyKeyInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateP12KeysParamsBodyKeyInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateP12KeysParamsBodyKeyInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
