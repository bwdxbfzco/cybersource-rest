// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommentDecisionManagerCaseReader is a Reader for the CommentDecisionManagerCase structure.
type CommentDecisionManagerCaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommentDecisionManagerCaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCommentDecisionManagerCaseCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommentDecisionManagerCaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCommentDecisionManagerCaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCommentDecisionManagerCaseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommentDecisionManagerCaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCommentDecisionManagerCaseBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCommentDecisionManagerCaseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /risk/v1/decisions/{id}/comments] commentDecisionManagerCase", response, response.Code())
	}
}

// NewCommentDecisionManagerCaseCreated creates a CommentDecisionManagerCaseCreated with default headers values
func NewCommentDecisionManagerCaseCreated() *CommentDecisionManagerCaseCreated {
	return &CommentDecisionManagerCaseCreated{}
}

/*
CommentDecisionManagerCaseCreated describes a response with status code 201, with default header values.

Successful response
*/
type CommentDecisionManagerCaseCreated struct {
	Payload *CommentDecisionManagerCaseCreatedBody
}

// IsSuccess returns true when this comment decision manager case created response has a 2xx status code
func (o *CommentDecisionManagerCaseCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this comment decision manager case created response has a 3xx status code
func (o *CommentDecisionManagerCaseCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case created response has a 4xx status code
func (o *CommentDecisionManagerCaseCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this comment decision manager case created response has a 5xx status code
func (o *CommentDecisionManagerCaseCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this comment decision manager case created response a status code equal to that given
func (o *CommentDecisionManagerCaseCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the comment decision manager case created response
func (o *CommentDecisionManagerCaseCreated) Code() int {
	return 201
}

func (o *CommentDecisionManagerCaseCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseCreated %s", 201, payload)
}

func (o *CommentDecisionManagerCaseCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseCreated %s", 201, payload)
}

func (o *CommentDecisionManagerCaseCreated) GetPayload() *CommentDecisionManagerCaseCreatedBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseBadRequest creates a CommentDecisionManagerCaseBadRequest with default headers values
func NewCommentDecisionManagerCaseBadRequest() *CommentDecisionManagerCaseBadRequest {
	return &CommentDecisionManagerCaseBadRequest{}
}

/*
CommentDecisionManagerCaseBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type CommentDecisionManagerCaseBadRequest struct {
	Payload *CommentDecisionManagerCaseBadRequestBody
}

// IsSuccess returns true when this comment decision manager case bad request response has a 2xx status code
func (o *CommentDecisionManagerCaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case bad request response has a 3xx status code
func (o *CommentDecisionManagerCaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case bad request response has a 4xx status code
func (o *CommentDecisionManagerCaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this comment decision manager case bad request response has a 5xx status code
func (o *CommentDecisionManagerCaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this comment decision manager case bad request response a status code equal to that given
func (o *CommentDecisionManagerCaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the comment decision manager case bad request response
func (o *CommentDecisionManagerCaseBadRequest) Code() int {
	return 400
}

func (o *CommentDecisionManagerCaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *CommentDecisionManagerCaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *CommentDecisionManagerCaseBadRequest) GetPayload() *CommentDecisionManagerCaseBadRequestBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseForbidden creates a CommentDecisionManagerCaseForbidden with default headers values
func NewCommentDecisionManagerCaseForbidden() *CommentDecisionManagerCaseForbidden {
	return &CommentDecisionManagerCaseForbidden{}
}

/*
CommentDecisionManagerCaseForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type CommentDecisionManagerCaseForbidden struct {
	Payload *CommentDecisionManagerCaseForbiddenBody
}

// IsSuccess returns true when this comment decision manager case forbidden response has a 2xx status code
func (o *CommentDecisionManagerCaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case forbidden response has a 3xx status code
func (o *CommentDecisionManagerCaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case forbidden response has a 4xx status code
func (o *CommentDecisionManagerCaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this comment decision manager case forbidden response has a 5xx status code
func (o *CommentDecisionManagerCaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this comment decision manager case forbidden response a status code equal to that given
func (o *CommentDecisionManagerCaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the comment decision manager case forbidden response
func (o *CommentDecisionManagerCaseForbidden) Code() int {
	return 403
}

func (o *CommentDecisionManagerCaseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseForbidden %s", 403, payload)
}

func (o *CommentDecisionManagerCaseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseForbidden %s", 403, payload)
}

func (o *CommentDecisionManagerCaseForbidden) GetPayload() *CommentDecisionManagerCaseForbiddenBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseUnprocessableEntity creates a CommentDecisionManagerCaseUnprocessableEntity with default headers values
func NewCommentDecisionManagerCaseUnprocessableEntity() *CommentDecisionManagerCaseUnprocessableEntity {
	return &CommentDecisionManagerCaseUnprocessableEntity{}
}

/*
CommentDecisionManagerCaseUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type CommentDecisionManagerCaseUnprocessableEntity struct {
	Payload *CommentDecisionManagerCaseUnprocessableEntityBody
}

// IsSuccess returns true when this comment decision manager case unprocessable entity response has a 2xx status code
func (o *CommentDecisionManagerCaseUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case unprocessable entity response has a 3xx status code
func (o *CommentDecisionManagerCaseUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case unprocessable entity response has a 4xx status code
func (o *CommentDecisionManagerCaseUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this comment decision manager case unprocessable entity response has a 5xx status code
func (o *CommentDecisionManagerCaseUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this comment decision manager case unprocessable entity response a status code equal to that given
func (o *CommentDecisionManagerCaseUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the comment decision manager case unprocessable entity response
func (o *CommentDecisionManagerCaseUnprocessableEntity) Code() int {
	return 422
}

func (o *CommentDecisionManagerCaseUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseUnprocessableEntity %s", 422, payload)
}

func (o *CommentDecisionManagerCaseUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseUnprocessableEntity %s", 422, payload)
}

func (o *CommentDecisionManagerCaseUnprocessableEntity) GetPayload() *CommentDecisionManagerCaseUnprocessableEntityBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseInternalServerError creates a CommentDecisionManagerCaseInternalServerError with default headers values
func NewCommentDecisionManagerCaseInternalServerError() *CommentDecisionManagerCaseInternalServerError {
	return &CommentDecisionManagerCaseInternalServerError{}
}

/*
CommentDecisionManagerCaseInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CommentDecisionManagerCaseInternalServerError struct {
	Payload *CommentDecisionManagerCaseInternalServerErrorBody
}

// IsSuccess returns true when this comment decision manager case internal server error response has a 2xx status code
func (o *CommentDecisionManagerCaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case internal server error response has a 3xx status code
func (o *CommentDecisionManagerCaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case internal server error response has a 4xx status code
func (o *CommentDecisionManagerCaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this comment decision manager case internal server error response has a 5xx status code
func (o *CommentDecisionManagerCaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this comment decision manager case internal server error response a status code equal to that given
func (o *CommentDecisionManagerCaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the comment decision manager case internal server error response
func (o *CommentDecisionManagerCaseInternalServerError) Code() int {
	return 500
}

func (o *CommentDecisionManagerCaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseInternalServerError %s", 500, payload)
}

func (o *CommentDecisionManagerCaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseInternalServerError %s", 500, payload)
}

func (o *CommentDecisionManagerCaseInternalServerError) GetPayload() *CommentDecisionManagerCaseInternalServerErrorBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseBadGateway creates a CommentDecisionManagerCaseBadGateway with default headers values
func NewCommentDecisionManagerCaseBadGateway() *CommentDecisionManagerCaseBadGateway {
	return &CommentDecisionManagerCaseBadGateway{}
}

/*
CommentDecisionManagerCaseBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type CommentDecisionManagerCaseBadGateway struct {
	Payload *CommentDecisionManagerCaseBadGatewayBody
}

// IsSuccess returns true when this comment decision manager case bad gateway response has a 2xx status code
func (o *CommentDecisionManagerCaseBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case bad gateway response has a 3xx status code
func (o *CommentDecisionManagerCaseBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case bad gateway response has a 4xx status code
func (o *CommentDecisionManagerCaseBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this comment decision manager case bad gateway response has a 5xx status code
func (o *CommentDecisionManagerCaseBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this comment decision manager case bad gateway response a status code equal to that given
func (o *CommentDecisionManagerCaseBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the comment decision manager case bad gateway response
func (o *CommentDecisionManagerCaseBadGateway) Code() int {
	return 502
}

func (o *CommentDecisionManagerCaseBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *CommentDecisionManagerCaseBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *CommentDecisionManagerCaseBadGateway) GetPayload() *CommentDecisionManagerCaseBadGatewayBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommentDecisionManagerCaseServiceUnavailable creates a CommentDecisionManagerCaseServiceUnavailable with default headers values
func NewCommentDecisionManagerCaseServiceUnavailable() *CommentDecisionManagerCaseServiceUnavailable {
	return &CommentDecisionManagerCaseServiceUnavailable{}
}

/*
CommentDecisionManagerCaseServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type CommentDecisionManagerCaseServiceUnavailable struct {
	Payload *CommentDecisionManagerCaseServiceUnavailableBody
}

// IsSuccess returns true when this comment decision manager case service unavailable response has a 2xx status code
func (o *CommentDecisionManagerCaseServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this comment decision manager case service unavailable response has a 3xx status code
func (o *CommentDecisionManagerCaseServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this comment decision manager case service unavailable response has a 4xx status code
func (o *CommentDecisionManagerCaseServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this comment decision manager case service unavailable response has a 5xx status code
func (o *CommentDecisionManagerCaseServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this comment decision manager case service unavailable response a status code equal to that given
func (o *CommentDecisionManagerCaseServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the comment decision manager case service unavailable response
func (o *CommentDecisionManagerCaseServiceUnavailable) Code() int {
	return 503
}

func (o *CommentDecisionManagerCaseServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseServiceUnavailable %s", 503, payload)
}

func (o *CommentDecisionManagerCaseServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/comments][%d] commentDecisionManagerCaseServiceUnavailable %s", 503, payload)
}

func (o *CommentDecisionManagerCaseServiceUnavailable) GetPayload() *CommentDecisionManagerCaseServiceUnavailableBody {
	return o.Payload
}

func (o *CommentDecisionManagerCaseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommentDecisionManagerCaseServiceUnavailableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CommentDecisionManagerCaseBadGatewayBody comment decision manager case bad gateway body
swagger:model CommentDecisionManagerCaseBadGatewayBody
*/
type CommentDecisionManagerCaseBadGatewayBody struct {

	// details
	Details []*CommentDecisionManagerCaseBadGatewayBodyDetailsItems0 `json:"details"`

	// Application failed.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INTERNAL_SERVICE_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case bad gateway body
func (o *CommentDecisionManagerCaseBadGatewayBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseBadGatewayBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case bad gateway body based on the context it is used
func (o *CommentDecisionManagerCaseBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseBadGatewayBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseBadGatewayBodyDetailsItems0 comment decision manager case bad gateway body details items0
swagger:model CommentDecisionManagerCaseBadGatewayBodyDetailsItems0
*/
type CommentDecisionManagerCaseBadGatewayBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case bad gateway body details items0
func (o *CommentDecisionManagerCaseBadGatewayBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case bad gateway body details items0 based on context it is used
func (o *CommentDecisionManagerCaseBadGatewayBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadGatewayBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadGatewayBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseBadGatewayBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseBadRequestBody comment decision manager case bad request body
swagger:model CommentDecisionManagerCaseBadRequestBody
*/
type CommentDecisionManagerCaseBadRequestBody struct {

	// details
	Details []*CommentDecisionManagerCaseBadRequestBodyDetailsItems0 `json:"details"`

	// Input request error.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INVALID_DATA`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case bad request body
func (o *CommentDecisionManagerCaseBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case bad request body based on the context it is used
func (o *CommentDecisionManagerCaseBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseBadRequestBodyDetailsItems0 comment decision manager case bad request body details items0
swagger:model CommentDecisionManagerCaseBadRequestBodyDetailsItems0
*/
type CommentDecisionManagerCaseBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case bad request body details items0
func (o *CommentDecisionManagerCaseBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case bad request body details items0 based on context it is used
func (o *CommentDecisionManagerCaseBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseBody comment decision manager case body
swagger:model CommentDecisionManagerCaseBody
*/
type CommentDecisionManagerCaseBody struct {

	// Comments to be added to case.
	// Required: true
	// Max Length: 4000
	Comments *string `json:"comments"`
}

// Validate validates this comment decision manager case body
func (o *CommentDecisionManagerCaseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseBody) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("caseManagementCommentsRequest"+"."+"comments", "body", o.Comments); err != nil {
		return err
	}

	if err := validate.MaxLength("caseManagementCommentsRequest"+"."+"comments", "body", *o.Comments, 4000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this comment decision manager case body based on context it is used
func (o *CommentDecisionManagerCaseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseCreatedBody comment decision manager case created body
swagger:model CommentDecisionManagerCaseCreatedBody
*/
type CommentDecisionManagerCaseCreatedBody struct {

	// UUID uniquely generated for this comments.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// Status of the comment creation. Possible values are:
	// - `COMPLETED`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case created body
func (o *CommentDecisionManagerCaseCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("commentDecisionManagerCaseCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this comment decision manager case created body based on context it is used
func (o *CommentDecisionManagerCaseCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseCreatedBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseForbiddenBody comment decision manager case forbidden body
swagger:model CommentDecisionManagerCaseForbiddenBody
*/
type CommentDecisionManagerCaseForbiddenBody struct {

	// details
	Details []*CommentDecisionManagerCaseForbiddenBodyDetailsItems0 `json:"details"`

	// The request has an authorization failure.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `ACCESS_DENIED`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case forbidden body
func (o *CommentDecisionManagerCaseForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseForbiddenBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case forbidden body based on the context it is used
func (o *CommentDecisionManagerCaseForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseForbiddenBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseForbiddenBodyDetailsItems0 comment decision manager case forbidden body details items0
swagger:model CommentDecisionManagerCaseForbiddenBodyDetailsItems0
*/
type CommentDecisionManagerCaseForbiddenBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case forbidden body details items0
func (o *CommentDecisionManagerCaseForbiddenBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case forbidden body details items0 based on context it is used
func (o *CommentDecisionManagerCaseForbiddenBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseForbiddenBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseForbiddenBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseForbiddenBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseInternalServerErrorBody comment decision manager case internal server error body
swagger:model CommentDecisionManagerCaseInternalServerErrorBody
*/
type CommentDecisionManagerCaseInternalServerErrorBody struct {

	// details
	Details []*CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0 `json:"details"`

	// Underlying service error with exception.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `SYSTEM_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case internal server error body
func (o *CommentDecisionManagerCaseInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseInternalServerErrorBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case internal server error body based on the context it is used
func (o *CommentDecisionManagerCaseInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseInternalServerErrorBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0 comment decision manager case internal server error body details items0
swagger:model CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0
*/
type CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case internal server error body details items0
func (o *CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case internal server error body details items0 based on context it is used
func (o *CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseInternalServerErrorBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseServiceUnavailableBody comment decision manager case service unavailable body
swagger:model CommentDecisionManagerCaseServiceUnavailableBody
*/
type CommentDecisionManagerCaseServiceUnavailableBody struct {

	// details
	Details []*CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0 `json:"details"`

	// Service is unavailable.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INTERNAL_SERVICE_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case service unavailable body
func (o *CommentDecisionManagerCaseServiceUnavailableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseServiceUnavailableBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case service unavailable body based on the context it is used
func (o *CommentDecisionManagerCaseServiceUnavailableBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseServiceUnavailableBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseServiceUnavailableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseServiceUnavailableBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseServiceUnavailableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0 comment decision manager case service unavailable body details items0
swagger:model CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0
*/
type CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case service unavailable body details items0
func (o *CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case service unavailable body details items0 based on context it is used
func (o *CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseServiceUnavailableBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseUnprocessableEntityBody comment decision manager case unprocessable entity body
swagger:model CommentDecisionManagerCaseUnprocessableEntityBody
*/
type CommentDecisionManagerCaseUnprocessableEntityBody struct {

	// details
	Details []*CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 `json:"details"`

	// Request payload is valid but fails business validations.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INVALID_REQUEST`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this comment decision manager case unprocessable entity body
func (o *CommentDecisionManagerCaseUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseUnprocessableEntityBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comment decision manager case unprocessable entity body based on the context it is used
func (o *CommentDecisionManagerCaseUnprocessableEntityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentDecisionManagerCaseUnprocessableEntityBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commentDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commentDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 comment decision manager case unprocessable entity body details items0
swagger:model CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0
*/
type CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this comment decision manager case unprocessable entity body details items0
func (o *CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this comment decision manager case unprocessable entity body details items0 based on context it is used
func (o *CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommentDecisionManagerCaseUnprocessableEntityBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
