// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new decision manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new decision manager API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new decision manager API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for decision manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationJSONCharsetUTF8 sets the Content-Type header to "application/json;charset=utf-8".
func WithContentTypeApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json;charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationHalJSONCharsetUTF8 sets the Accept header to "application/hal+json;charset=utf-8".
func WithAcceptApplicationHalJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json;charset=utf-8"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActionDecisionManagerCase(params *ActionDecisionManagerCaseParams, opts ...ClientOption) (*ActionDecisionManagerCaseOK, error)

	AddNegative(params *AddNegativeParams, opts ...ClientOption) (*AddNegativeCreated, error)

	CommentDecisionManagerCase(params *CommentDecisionManagerCaseParams, opts ...ClientOption) (*CommentDecisionManagerCaseCreated, error)

	CreateBundledDecisionManagerCase(params *CreateBundledDecisionManagerCaseParams, opts ...ClientOption) (*CreateBundledDecisionManagerCaseCreated, error)

	FraudUpdate(params *FraudUpdateParams, opts ...ClientOption) (*FraudUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActionDecisionManagerCase takes action on a d m post transactional case

Take action on a DM post-transactional case
*/
func (a *Client) ActionDecisionManagerCase(params *ActionDecisionManagerCaseParams, opts ...ClientOption) (*ActionDecisionManagerCaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionDecisionManagerCaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "actionDecisionManagerCase",
		Method:             "POST",
		PathPattern:        "/risk/v1/decisions/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionDecisionManagerCaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionDecisionManagerCaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for actionDecisionManagerCase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	AddNegative lists management

	This call adds/deletes/converts the request information in the negative list.

Provide the list to be updated as the path parameter. This value can be 'postiive', 'negative' or 'review'.
*/
func (a *Client) AddNegative(params *AddNegativeParams, opts ...ClientOption) (*AddNegativeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNegativeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addNegative",
		Method:             "POST",
		PathPattern:        "/risk/v1/lists/{type}/entries",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddNegativeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddNegativeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addNegative: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CommentDecisionManagerCase adds a comment to a d m post transactional case

Add a comment to a DM post-transactional case
*/
func (a *Client) CommentDecisionManagerCase(params *CommentDecisionManagerCaseParams, opts ...ClientOption) (*CommentDecisionManagerCaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommentDecisionManagerCaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "commentDecisionManagerCase",
		Method:             "POST",
		PathPattern:        "/risk/v1/decisions/{id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommentDecisionManagerCaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommentDecisionManagerCaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for commentDecisionManagerCase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBundledDecisionManagerCase creates decision manager

Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
*/
func (a *Client) CreateBundledDecisionManagerCase(params *CreateBundledDecisionManagerCaseParams, opts ...ClientOption) (*CreateBundledDecisionManagerCaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBundledDecisionManagerCaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBundledDecisionManagerCase",
		Method:             "POST",
		PathPattern:        "/risk/v1/decisions",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBundledDecisionManagerCaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBundledDecisionManagerCaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBundledDecisionManagerCase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	FraudUpdate frauds marking

	This can be used to -

1. Add known fraudulent data to the fraud history
2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files
3. Remove chargeback data from history that was automatically added.
For detailed information, contact your Cybersource representative

Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request.
*/
func (a *Client) FraudUpdate(params *FraudUpdateParams, opts ...ClientOption) (*FraudUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFraudUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fraudUpdate",
		Method:             "POST",
		PathPattern:        "/risk/v1/decisions/{id}/marking",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FraudUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FraudUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fraudUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
