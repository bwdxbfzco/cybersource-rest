// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionDecisionManagerCaseReader is a Reader for the ActionDecisionManagerCase structure.
type ActionDecisionManagerCaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActionDecisionManagerCaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewActionDecisionManagerCaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewActionDecisionManagerCaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewActionDecisionManagerCaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewActionDecisionManagerCaseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewActionDecisionManagerCaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewActionDecisionManagerCaseBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewActionDecisionManagerCaseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /risk/v1/decisions/{id}/actions] actionDecisionManagerCase", response, response.Code())
	}
}

// NewActionDecisionManagerCaseOK creates a ActionDecisionManagerCaseOK with default headers values
func NewActionDecisionManagerCaseOK() *ActionDecisionManagerCaseOK {
	return &ActionDecisionManagerCaseOK{}
}

/*
ActionDecisionManagerCaseOK describes a response with status code 200, with default header values.

Successful response
*/
type ActionDecisionManagerCaseOK struct {
	Payload *ActionDecisionManagerCaseOKBody
}

// IsSuccess returns true when this action decision manager case o k response has a 2xx status code
func (o *ActionDecisionManagerCaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this action decision manager case o k response has a 3xx status code
func (o *ActionDecisionManagerCaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case o k response has a 4xx status code
func (o *ActionDecisionManagerCaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this action decision manager case o k response has a 5xx status code
func (o *ActionDecisionManagerCaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this action decision manager case o k response a status code equal to that given
func (o *ActionDecisionManagerCaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the action decision manager case o k response
func (o *ActionDecisionManagerCaseOK) Code() int {
	return 200
}

func (o *ActionDecisionManagerCaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseOK %s", 200, payload)
}

func (o *ActionDecisionManagerCaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseOK %s", 200, payload)
}

func (o *ActionDecisionManagerCaseOK) GetPayload() *ActionDecisionManagerCaseOKBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseBadRequest creates a ActionDecisionManagerCaseBadRequest with default headers values
func NewActionDecisionManagerCaseBadRequest() *ActionDecisionManagerCaseBadRequest {
	return &ActionDecisionManagerCaseBadRequest{}
}

/*
ActionDecisionManagerCaseBadRequest describes a response with status code 400, with default header values.

Invalid Request
*/
type ActionDecisionManagerCaseBadRequest struct {
	Payload *ActionDecisionManagerCaseBadRequestBody
}

// IsSuccess returns true when this action decision manager case bad request response has a 2xx status code
func (o *ActionDecisionManagerCaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case bad request response has a 3xx status code
func (o *ActionDecisionManagerCaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case bad request response has a 4xx status code
func (o *ActionDecisionManagerCaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this action decision manager case bad request response has a 5xx status code
func (o *ActionDecisionManagerCaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this action decision manager case bad request response a status code equal to that given
func (o *ActionDecisionManagerCaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the action decision manager case bad request response
func (o *ActionDecisionManagerCaseBadRequest) Code() int {
	return 400
}

func (o *ActionDecisionManagerCaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *ActionDecisionManagerCaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *ActionDecisionManagerCaseBadRequest) GetPayload() *ActionDecisionManagerCaseBadRequestBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseForbidden creates a ActionDecisionManagerCaseForbidden with default headers values
func NewActionDecisionManagerCaseForbidden() *ActionDecisionManagerCaseForbidden {
	return &ActionDecisionManagerCaseForbidden{}
}

/*
ActionDecisionManagerCaseForbidden describes a response with status code 403, with default header values.

Access Denied
*/
type ActionDecisionManagerCaseForbidden struct {
	Payload *ActionDecisionManagerCaseForbiddenBody
}

// IsSuccess returns true when this action decision manager case forbidden response has a 2xx status code
func (o *ActionDecisionManagerCaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case forbidden response has a 3xx status code
func (o *ActionDecisionManagerCaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case forbidden response has a 4xx status code
func (o *ActionDecisionManagerCaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this action decision manager case forbidden response has a 5xx status code
func (o *ActionDecisionManagerCaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this action decision manager case forbidden response a status code equal to that given
func (o *ActionDecisionManagerCaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the action decision manager case forbidden response
func (o *ActionDecisionManagerCaseForbidden) Code() int {
	return 403
}

func (o *ActionDecisionManagerCaseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseForbidden %s", 403, payload)
}

func (o *ActionDecisionManagerCaseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseForbidden %s", 403, payload)
}

func (o *ActionDecisionManagerCaseForbidden) GetPayload() *ActionDecisionManagerCaseForbiddenBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseUnprocessableEntity creates a ActionDecisionManagerCaseUnprocessableEntity with default headers values
func NewActionDecisionManagerCaseUnprocessableEntity() *ActionDecisionManagerCaseUnprocessableEntity {
	return &ActionDecisionManagerCaseUnprocessableEntity{}
}

/*
ActionDecisionManagerCaseUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ActionDecisionManagerCaseUnprocessableEntity struct {
	Payload *ActionDecisionManagerCaseUnprocessableEntityBody
}

// IsSuccess returns true when this action decision manager case unprocessable entity response has a 2xx status code
func (o *ActionDecisionManagerCaseUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case unprocessable entity response has a 3xx status code
func (o *ActionDecisionManagerCaseUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case unprocessable entity response has a 4xx status code
func (o *ActionDecisionManagerCaseUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this action decision manager case unprocessable entity response has a 5xx status code
func (o *ActionDecisionManagerCaseUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this action decision manager case unprocessable entity response a status code equal to that given
func (o *ActionDecisionManagerCaseUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the action decision manager case unprocessable entity response
func (o *ActionDecisionManagerCaseUnprocessableEntity) Code() int {
	return 422
}

func (o *ActionDecisionManagerCaseUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseUnprocessableEntity %s", 422, payload)
}

func (o *ActionDecisionManagerCaseUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseUnprocessableEntity %s", 422, payload)
}

func (o *ActionDecisionManagerCaseUnprocessableEntity) GetPayload() *ActionDecisionManagerCaseUnprocessableEntityBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseUnprocessableEntityBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseInternalServerError creates a ActionDecisionManagerCaseInternalServerError with default headers values
func NewActionDecisionManagerCaseInternalServerError() *ActionDecisionManagerCaseInternalServerError {
	return &ActionDecisionManagerCaseInternalServerError{}
}

/*
ActionDecisionManagerCaseInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ActionDecisionManagerCaseInternalServerError struct {
	Payload *ActionDecisionManagerCaseInternalServerErrorBody
}

// IsSuccess returns true when this action decision manager case internal server error response has a 2xx status code
func (o *ActionDecisionManagerCaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case internal server error response has a 3xx status code
func (o *ActionDecisionManagerCaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case internal server error response has a 4xx status code
func (o *ActionDecisionManagerCaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this action decision manager case internal server error response has a 5xx status code
func (o *ActionDecisionManagerCaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this action decision manager case internal server error response a status code equal to that given
func (o *ActionDecisionManagerCaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the action decision manager case internal server error response
func (o *ActionDecisionManagerCaseInternalServerError) Code() int {
	return 500
}

func (o *ActionDecisionManagerCaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseInternalServerError %s", 500, payload)
}

func (o *ActionDecisionManagerCaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseInternalServerError %s", 500, payload)
}

func (o *ActionDecisionManagerCaseInternalServerError) GetPayload() *ActionDecisionManagerCaseInternalServerErrorBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseBadGateway creates a ActionDecisionManagerCaseBadGateway with default headers values
func NewActionDecisionManagerCaseBadGateway() *ActionDecisionManagerCaseBadGateway {
	return &ActionDecisionManagerCaseBadGateway{}
}

/*
ActionDecisionManagerCaseBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type ActionDecisionManagerCaseBadGateway struct {
	Payload *ActionDecisionManagerCaseBadGatewayBody
}

// IsSuccess returns true when this action decision manager case bad gateway response has a 2xx status code
func (o *ActionDecisionManagerCaseBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case bad gateway response has a 3xx status code
func (o *ActionDecisionManagerCaseBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case bad gateway response has a 4xx status code
func (o *ActionDecisionManagerCaseBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this action decision manager case bad gateway response has a 5xx status code
func (o *ActionDecisionManagerCaseBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this action decision manager case bad gateway response a status code equal to that given
func (o *ActionDecisionManagerCaseBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the action decision manager case bad gateway response
func (o *ActionDecisionManagerCaseBadGateway) Code() int {
	return 502
}

func (o *ActionDecisionManagerCaseBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *ActionDecisionManagerCaseBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *ActionDecisionManagerCaseBadGateway) GetPayload() *ActionDecisionManagerCaseBadGatewayBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActionDecisionManagerCaseServiceUnavailable creates a ActionDecisionManagerCaseServiceUnavailable with default headers values
func NewActionDecisionManagerCaseServiceUnavailable() *ActionDecisionManagerCaseServiceUnavailable {
	return &ActionDecisionManagerCaseServiceUnavailable{}
}

/*
ActionDecisionManagerCaseServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ActionDecisionManagerCaseServiceUnavailable struct {
	Payload *ActionDecisionManagerCaseServiceUnavailableBody
}

// IsSuccess returns true when this action decision manager case service unavailable response has a 2xx status code
func (o *ActionDecisionManagerCaseServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this action decision manager case service unavailable response has a 3xx status code
func (o *ActionDecisionManagerCaseServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this action decision manager case service unavailable response has a 4xx status code
func (o *ActionDecisionManagerCaseServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this action decision manager case service unavailable response has a 5xx status code
func (o *ActionDecisionManagerCaseServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this action decision manager case service unavailable response a status code equal to that given
func (o *ActionDecisionManagerCaseServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the action decision manager case service unavailable response
func (o *ActionDecisionManagerCaseServiceUnavailable) Code() int {
	return 503
}

func (o *ActionDecisionManagerCaseServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseServiceUnavailable %s", 503, payload)
}

func (o *ActionDecisionManagerCaseServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/actions][%d] actionDecisionManagerCaseServiceUnavailable %s", 503, payload)
}

func (o *ActionDecisionManagerCaseServiceUnavailable) GetPayload() *ActionDecisionManagerCaseServiceUnavailableBody {
	return o.Payload
}

func (o *ActionDecisionManagerCaseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ActionDecisionManagerCaseServiceUnavailableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ActionDecisionManagerCaseBadGatewayBody action decision manager case bad gateway body
swagger:model ActionDecisionManagerCaseBadGatewayBody
*/
type ActionDecisionManagerCaseBadGatewayBody struct {

	// details
	Details []*ActionDecisionManagerCaseBadGatewayBodyDetailsItems0 `json:"details"`

	// Application failed.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INTERNAL_SERVICE_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case bad gateway body
func (o *ActionDecisionManagerCaseBadGatewayBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBadGatewayBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case bad gateway body based on the context it is used
func (o *ActionDecisionManagerCaseBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBadGatewayBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseBadGateway" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseBadGatewayBodyDetailsItems0 action decision manager case bad gateway body details items0
swagger:model ActionDecisionManagerCaseBadGatewayBodyDetailsItems0
*/
type ActionDecisionManagerCaseBadGatewayBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case bad gateway body details items0
func (o *ActionDecisionManagerCaseBadGatewayBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case bad gateway body details items0 based on context it is used
func (o *ActionDecisionManagerCaseBadGatewayBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadGatewayBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadGatewayBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseBadGatewayBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseBadRequestBody action decision manager case bad request body
swagger:model ActionDecisionManagerCaseBadRequestBody
*/
type ActionDecisionManagerCaseBadRequestBody struct {

	// details
	Details []*ActionDecisionManagerCaseBadRequestBodyDetailsItems0 `json:"details"`

	// Input request error.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INVALID_DATA`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case bad request body
func (o *ActionDecisionManagerCaseBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case bad request body based on the context it is used
func (o *ActionDecisionManagerCaseBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseBadRequestBodyDetailsItems0 action decision manager case bad request body details items0
swagger:model ActionDecisionManagerCaseBadRequestBodyDetailsItems0
*/
type ActionDecisionManagerCaseBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case bad request body details items0
func (o *ActionDecisionManagerCaseBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case bad request body details items0 based on context it is used
func (o *ActionDecisionManagerCaseBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseBody action decision manager case body
swagger:model ActionDecisionManagerCaseBody
*/
type ActionDecisionManagerCaseBody struct {

	// decision information
	// Required: true
	DecisionInformation *ActionDecisionManagerCaseParamsBodyDecisionInformation `json:"decisionInformation"`

	// processing information
	ProcessingInformation *ActionDecisionManagerCaseParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this action decision manager case body
func (o *ActionDecisionManagerCaseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDecisionInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBody) validateDecisionInformation(formats strfmt.Registry) error {

	if err := validate.Required("caseManagementActionsRequest"+"."+"decisionInformation", "body", o.DecisionInformation); err != nil {
		return err
	}

	if o.DecisionInformation != nil {
		if err := o.DecisionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caseManagementActionsRequest" + "." + "decisionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("caseManagementActionsRequest" + "." + "decisionInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ActionDecisionManagerCaseBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caseManagementActionsRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("caseManagementActionsRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case body based on the context it is used
func (o *ActionDecisionManagerCaseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDecisionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseBody) contextValidateDecisionInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.DecisionInformation != nil {

		if err := o.DecisionInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caseManagementActionsRequest" + "." + "decisionInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("caseManagementActionsRequest" + "." + "decisionInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ActionDecisionManagerCaseBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caseManagementActionsRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("caseManagementActionsRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseForbiddenBody action decision manager case forbidden body
swagger:model ActionDecisionManagerCaseForbiddenBody
*/
type ActionDecisionManagerCaseForbiddenBody struct {

	// details
	Details []*ActionDecisionManagerCaseForbiddenBodyDetailsItems0 `json:"details"`

	// The request has an authorization failure.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `ACCESS_DENIED`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case forbidden body
func (o *ActionDecisionManagerCaseForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseForbiddenBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case forbidden body based on the context it is used
func (o *ActionDecisionManagerCaseForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseForbiddenBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseForbidden" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseForbiddenBodyDetailsItems0 action decision manager case forbidden body details items0
swagger:model ActionDecisionManagerCaseForbiddenBodyDetailsItems0
*/
type ActionDecisionManagerCaseForbiddenBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case forbidden body details items0
func (o *ActionDecisionManagerCaseForbiddenBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case forbidden body details items0 based on context it is used
func (o *ActionDecisionManagerCaseForbiddenBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseForbiddenBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseForbiddenBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseForbiddenBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseInternalServerErrorBody action decision manager case internal server error body
swagger:model ActionDecisionManagerCaseInternalServerErrorBody
*/
type ActionDecisionManagerCaseInternalServerErrorBody struct {

	// details
	Details []*ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0 `json:"details"`

	// Underlying service error with exception.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `SYSTEM_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case internal server error body
func (o *ActionDecisionManagerCaseInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseInternalServerErrorBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case internal server error body based on the context it is used
func (o *ActionDecisionManagerCaseInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseInternalServerErrorBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0 action decision manager case internal server error body details items0
swagger:model ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0
*/
type ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case internal server error body details items0
func (o *ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case internal server error body details items0 based on context it is used
func (o *ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseInternalServerErrorBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBody action decision manager case o k body
swagger:model ActionDecisionManagerCaseOKBody
*/
type ActionDecisionManagerCaseOKBody struct {

	// embedded
	Embedded *ActionDecisionManagerCaseOKBodyEmbedded `json:"_embedded,omitempty"`

	// UUID uniquely generated for this comments.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status of the submitted transaction. Possible values are:
	// - `ACCEPTED`
	// - `REJECTED`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case o k body
func (o *ActionDecisionManagerCaseOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBody) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *ActionDecisionManagerCaseOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("actionDecisionManagerCaseOK"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body based on the context it is used
func (o *ActionDecisionManagerCaseOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBody) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if o.Embedded != nil {

		if swag.IsZero(o.Embedded) { // not required
			return nil
		}

		if err := o.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbedded This object includes either a capture or reversal object. They each has the status of the action and link to the GET method to the following-on capture transaction or reversal transaction.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbedded
*/
type ActionDecisionManagerCaseOKBodyEmbedded struct {

	// capture
	Capture *ActionDecisionManagerCaseOKBodyEmbeddedCapture `json:"capture,omitempty"`

	// reversal
	Reversal *ActionDecisionManagerCaseOKBodyEmbeddedReversal `json:"reversal,omitempty"`
}

// Validate validates this action decision manager case o k body embedded
func (o *ActionDecisionManagerCaseOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapture(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReversal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbedded) validateCapture(formats strfmt.Registry) error {
	if swag.IsZero(o.Capture) { // not required
		return nil
	}

	if o.Capture != nil {
		if err := o.Capture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture")
			}
			return err
		}
	}

	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbedded) validateReversal(formats strfmt.Registry) error {
	if swag.IsZero(o.Reversal) { // not required
		return nil
	}

	if o.Reversal != nil {
		if err := o.Reversal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body embedded based on the context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCapture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReversal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbedded) contextValidateCapture(ctx context.Context, formats strfmt.Registry) error {

	if o.Capture != nil {

		if swag.IsZero(o.Capture) { // not required
			return nil
		}

		if err := o.Capture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture")
			}
			return err
		}
	}

	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbedded) contextValidateReversal(ctx context.Context, formats strfmt.Registry) error {

	if o.Reversal != nil {

		if swag.IsZero(o.Reversal) { // not required
			return nil
		}

		if err := o.Reversal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedCapture This object includes the status of the action and link to the GET method to the following-on capture transaction.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedCapture
*/
type ActionDecisionManagerCaseOKBodyEmbeddedCapture struct {

	// links
	Links *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks `json:"_links,omitempty"`

	// The status of the capture if the capture is called.
	//
	// Example: PENDING
	Status string `json:"status,omitempty"`
}

// Validate validates this action decision manager case o k body embedded capture
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body embedded capture based on the context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCapture) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedCapture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks The link to the GET method to the capture transaction if the capture is called.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks
*/
type ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks struct {

	// self
	Self *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf `json:"self,omitempty"`
}

// Validate validates this action decision manager case o k body embedded capture links
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body embedded capture links based on the context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "capture" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf The object holds http method and endpoint if the capture is called.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf
*/
type ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	//
	// Example: /pts/v2/captures/4963015972176007901546
	Href string `json:"href,omitempty"`

	// This refers to the HTTP method that you can send to the self endpoint to retrieve details of the resource.
	//
	// Example: GET
	Method string `json:"method,omitempty"`
}

// Validate validates this action decision manager case o k body embedded capture links self
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case o k body embedded capture links self based on context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedCaptureLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedReversal This object includes the status of the action and link to the GET method to the following-on reversal transaction.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedReversal
*/
type ActionDecisionManagerCaseOKBodyEmbeddedReversal struct {

	// links
	Links *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks `json:"_links,omitempty"`

	// The status of the reversal if the auth reversal is called.
	//
	// Example: REVERSED
	Status string `json:"status,omitempty"`
}

// Validate validates this action decision manager case o k body embedded reversal
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body embedded reversal based on the context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversal) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedReversal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks The link to the GET method to the reversal transaction if the auth reversal is called.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks
*/
type ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks struct {

	// self
	Self *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf `json:"self,omitempty"`
}

// Validate validates this action decision manager case o k body embedded reversal links
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this action decision manager case o k body embedded reversal links based on the context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionDecisionManagerCaseOK" + "." + "_embedded" + "." + "reversal" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedReversalLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf The object holds http method and endpoint if the reversal is called.
//
swagger:model ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf
*/
type ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	//
	// Example: /pts/v2/reversals/4963015972176007901547
	Href string `json:"href,omitempty"`

	// This refers to the HTTP method that you can send to the self endpoint to retrieve details of the resource.
	//
	// Example: GET
	Method string `json:"method,omitempty"`
}

// Validate validates this action decision manager case o k body embedded reversal links self
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case o k body embedded reversal links self based on context it is used
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseOKBodyEmbeddedReversalLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseParamsBodyDecisionInformation action decision manager case params body decision information
swagger:model ActionDecisionManagerCaseParamsBodyDecisionInformation
*/
type ActionDecisionManagerCaseParamsBodyDecisionInformation struct {

	// Notes from the reviewer about the decision made to this case.
	// Max Length: 4000
	Comments string `json:"comments,omitempty"`

	// Decision that will be applied to the given case. Possible values are:
	// - `ACCEPT`
	// - `REJECT`
	//
	Decision string `json:"decision,omitempty"`
}

// Validate validates this action decision manager case params body decision information
func (o *ActionDecisionManagerCaseParamsBodyDecisionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseParamsBodyDecisionInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("caseManagementActionsRequest"+"."+"decisionInformation"+"."+"comments", "body", o.Comments, 4000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this action decision manager case params body decision information based on context it is used
func (o *ActionDecisionManagerCaseParamsBodyDecisionInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseParamsBodyDecisionInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseParamsBodyDecisionInformation) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseParamsBodyDecisionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseParamsBodyProcessingInformation action decision manager case params body processing information
swagger:model ActionDecisionManagerCaseParamsBodyProcessingInformation
*/
type ActionDecisionManagerCaseParamsBodyProcessingInformation struct {

	// Follow-on action to apply to the case after the decision is successfully applied. Possible values are one of the following:
	// - `CAPTURE`
	// - `REVERSE`
	//
	// If decision is ACCEPT, then CAPTURE can be used in actionList.
	// If decision is REJECT, then REVERSE can be used.
	//
	// Example: ["CAPTURE","REVERSE"]
	ActionList []string `json:"actionList"`
}

// Validate validates this action decision manager case params body processing information
func (o *ActionDecisionManagerCaseParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case params body processing information based on context it is used
func (o *ActionDecisionManagerCaseParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseServiceUnavailableBody action decision manager case service unavailable body
swagger:model ActionDecisionManagerCaseServiceUnavailableBody
*/
type ActionDecisionManagerCaseServiceUnavailableBody struct {

	// details
	Details []*ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0 `json:"details"`

	// Service is unavailable.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INTERNAL_SERVICE_ERROR`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `SERVER_ERROR`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case service unavailable body
func (o *ActionDecisionManagerCaseServiceUnavailableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseServiceUnavailableBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case service unavailable body based on the context it is used
func (o *ActionDecisionManagerCaseServiceUnavailableBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseServiceUnavailableBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseServiceUnavailable" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseServiceUnavailableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseServiceUnavailableBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseServiceUnavailableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0 action decision manager case service unavailable body details items0
swagger:model ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0
*/
type ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case service unavailable body details items0
func (o *ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case service unavailable body details items0 based on context it is used
func (o *ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseServiceUnavailableBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseUnprocessableEntityBody action decision manager case unprocessable entity body
swagger:model ActionDecisionManagerCaseUnprocessableEntityBody
*/
type ActionDecisionManagerCaseUnprocessableEntityBody struct {

	// details
	Details []*ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 `json:"details"`

	// Request payload is valid but fails business validations.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	// Possible Values:
	// - `INVALID_REQUEST`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this action decision manager case unprocessable entity body
func (o *ActionDecisionManagerCaseUnprocessableEntityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseUnprocessableEntityBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this action decision manager case unprocessable entity body based on the context it is used
func (o *ActionDecisionManagerCaseUnprocessableEntityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ActionDecisionManagerCaseUnprocessableEntityBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actionDecisionManagerCaseUnprocessableEntity" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseUnprocessableEntityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseUnprocessableEntityBody) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseUnprocessableEntityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 action decision manager case unprocessable entity body details items0
swagger:model ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0
*/
type ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this action decision manager case unprocessable entity body details items0
func (o *ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this action decision manager case unprocessable entity body details items0 based on context it is used
func (o *ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ActionDecisionManagerCaseUnprocessableEntityBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
