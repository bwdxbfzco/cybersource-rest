// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBundledDecisionManagerCaseReader is a Reader for the CreateBundledDecisionManagerCase structure.
type CreateBundledDecisionManagerCaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateBundledDecisionManagerCaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateBundledDecisionManagerCaseCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateBundledDecisionManagerCaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateBundledDecisionManagerCaseBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /risk/v1/decisions] createBundledDecisionManagerCase", response, response.Code())
	}
}

// NewCreateBundledDecisionManagerCaseCreated creates a CreateBundledDecisionManagerCaseCreated with default headers values
func NewCreateBundledDecisionManagerCaseCreated() *CreateBundledDecisionManagerCaseCreated {
	return &CreateBundledDecisionManagerCaseCreated{}
}

/*
CreateBundledDecisionManagerCaseCreated describes a response with status code 201, with default header values.

Successful response
*/
type CreateBundledDecisionManagerCaseCreated struct {
	Payload *CreateBundledDecisionManagerCaseCreatedBody
}

// IsSuccess returns true when this create bundled decision manager case created response has a 2xx status code
func (o *CreateBundledDecisionManagerCaseCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create bundled decision manager case created response has a 3xx status code
func (o *CreateBundledDecisionManagerCaseCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create bundled decision manager case created response has a 4xx status code
func (o *CreateBundledDecisionManagerCaseCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create bundled decision manager case created response has a 5xx status code
func (o *CreateBundledDecisionManagerCaseCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create bundled decision manager case created response a status code equal to that given
func (o *CreateBundledDecisionManagerCaseCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create bundled decision manager case created response
func (o *CreateBundledDecisionManagerCaseCreated) Code() int {
	return 201
}

func (o *CreateBundledDecisionManagerCaseCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseCreated %s", 201, payload)
}

func (o *CreateBundledDecisionManagerCaseCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseCreated %s", 201, payload)
}

func (o *CreateBundledDecisionManagerCaseCreated) GetPayload() *CreateBundledDecisionManagerCaseCreatedBody {
	return o.Payload
}

func (o *CreateBundledDecisionManagerCaseCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateBundledDecisionManagerCaseCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBundledDecisionManagerCaseBadRequest creates a CreateBundledDecisionManagerCaseBadRequest with default headers values
func NewCreateBundledDecisionManagerCaseBadRequest() *CreateBundledDecisionManagerCaseBadRequest {
	return &CreateBundledDecisionManagerCaseBadRequest{}
}

/*
CreateBundledDecisionManagerCaseBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type CreateBundledDecisionManagerCaseBadRequest struct {
	Payload *CreateBundledDecisionManagerCaseBadRequestBody
}

// IsSuccess returns true when this create bundled decision manager case bad request response has a 2xx status code
func (o *CreateBundledDecisionManagerCaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create bundled decision manager case bad request response has a 3xx status code
func (o *CreateBundledDecisionManagerCaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create bundled decision manager case bad request response has a 4xx status code
func (o *CreateBundledDecisionManagerCaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create bundled decision manager case bad request response has a 5xx status code
func (o *CreateBundledDecisionManagerCaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create bundled decision manager case bad request response a status code equal to that given
func (o *CreateBundledDecisionManagerCaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create bundled decision manager case bad request response
func (o *CreateBundledDecisionManagerCaseBadRequest) Code() int {
	return 400
}

func (o *CreateBundledDecisionManagerCaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *CreateBundledDecisionManagerCaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseBadRequest %s", 400, payload)
}

func (o *CreateBundledDecisionManagerCaseBadRequest) GetPayload() *CreateBundledDecisionManagerCaseBadRequestBody {
	return o.Payload
}

func (o *CreateBundledDecisionManagerCaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateBundledDecisionManagerCaseBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBundledDecisionManagerCaseBadGateway creates a CreateBundledDecisionManagerCaseBadGateway with default headers values
func NewCreateBundledDecisionManagerCaseBadGateway() *CreateBundledDecisionManagerCaseBadGateway {
	return &CreateBundledDecisionManagerCaseBadGateway{}
}

/*
CreateBundledDecisionManagerCaseBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateBundledDecisionManagerCaseBadGateway struct {
	Payload *CreateBundledDecisionManagerCaseBadGatewayBody
}

// IsSuccess returns true when this create bundled decision manager case bad gateway response has a 2xx status code
func (o *CreateBundledDecisionManagerCaseBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create bundled decision manager case bad gateway response has a 3xx status code
func (o *CreateBundledDecisionManagerCaseBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create bundled decision manager case bad gateway response has a 4xx status code
func (o *CreateBundledDecisionManagerCaseBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create bundled decision manager case bad gateway response has a 5xx status code
func (o *CreateBundledDecisionManagerCaseBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create bundled decision manager case bad gateway response a status code equal to that given
func (o *CreateBundledDecisionManagerCaseBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create bundled decision manager case bad gateway response
func (o *CreateBundledDecisionManagerCaseBadGateway) Code() int {
	return 502
}

func (o *CreateBundledDecisionManagerCaseBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *CreateBundledDecisionManagerCaseBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/decisions][%d] createBundledDecisionManagerCaseBadGateway %s", 502, payload)
}

func (o *CreateBundledDecisionManagerCaseBadGateway) GetPayload() *CreateBundledDecisionManagerCaseBadGatewayBody {
	return o.Payload
}

func (o *CreateBundledDecisionManagerCaseBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateBundledDecisionManagerCaseBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateBundledDecisionManagerCaseBadGatewayBody riskV1DecisionsPost502Response
swagger:model CreateBundledDecisionManagerCaseBadGatewayBody
*/
type CreateBundledDecisionManagerCaseBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create bundled decision manager case bad gateway body
func (o *CreateBundledDecisionManagerCaseBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case bad gateway body based on context it is used
func (o *CreateBundledDecisionManagerCaseBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseBadRequestBody riskV1DecisionsPost400Response
swagger:model CreateBundledDecisionManagerCaseBadRequestBody
*/
type CreateBundledDecisionManagerCaseBadRequestBody struct {

	// details
	Details []*CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - `MISSING_FIELD`
	//  - `INVALID_DATA`
	//  - `INVALID_ACCOUNT`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - `INVALID_REQUEST`
	//  - `DECLINED`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create bundled decision manager case bad request body
func (o *CreateBundledDecisionManagerCaseBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create bundled decision manager case bad request body based on the context it is used
func (o *CreateBundledDecisionManagerCaseBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0 create bundled decision manager case bad request body details items0
swagger:model CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0
*/
type CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create bundled decision manager case bad request body details items0
func (o *CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case bad request body details items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseBody create bundled decision manager case body
swagger:model CreateBundledDecisionManagerCaseBody
*/
type CreateBundledDecisionManagerCaseBody struct {

	// acquirer information
	AcquirerInformation *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation `json:"acquirerInformation,omitempty"`

	// buyer information
	BuyerInformation *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// device information
	DeviceInformation *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation `json:"deviceInformation,omitempty"`

	// merchant defined information
	MerchantDefinedInformation []*CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// merchant information
	MerchantInformation *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	// Required: true
	OrderInformation *CreateBundledDecisionManagerCaseParamsBodyOrderInformation `json:"orderInformation"`

	// payment information
	PaymentInformation *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *CreateBundledDecisionManagerCaseParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// processor information
	ProcessorInformation *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation `json:"processorInformation,omitempty"`

	// recurring payment information
	RecurringPaymentInformation *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation `json:"recurringPaymentInformation,omitempty"`

	// risk information
	RiskInformation *CreateBundledDecisionManagerCaseParamsBodyRiskInformation `json:"riskInformation,omitempty"`

	// token information
	TokenInformation *CreateBundledDecisionManagerCaseParamsBodyTokenInformation `json:"tokenInformation,omitempty"`

	// travel information
	TravelInformation *CreateBundledDecisionManagerCaseParamsBodyTravelInformation `json:"travelInformation,omitempty"`

	// watchlist screening information
	WatchlistScreeningInformation *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation `json:"watchlistScreeningInformation,omitempty"`
}

// Validate validates this create bundled decision manager case body
func (o *CreateBundledDecisionManagerCaseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcquirerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecurringPaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTravelInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWatchlistScreeningInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateAcquirerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.AcquirerInformation) { // not required
		return nil
	}

	if o.AcquirerInformation != nil {
		if err := o.AcquirerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "acquirerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "acquirerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateDeviceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.DeviceInformation) { // not required
		return nil
	}

	if o.DeviceInformation != nil {
		if err := o.DeviceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateMerchantDefinedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {
		if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if o.MerchantDefinedInformation[i] != nil {
			if err := o.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateOrderInformation(formats strfmt.Registry) error {

	if err := validate.Required("createBundledDecisionManagerCaseRequest"+"."+"orderInformation", "body", o.OrderInformation); err != nil {
		return err
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateRecurringPaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RecurringPaymentInformation) { // not required
		return nil
	}

	if o.RecurringPaymentInformation != nil {
		if err := o.RecurringPaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "recurringPaymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "recurringPaymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateRiskInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateTokenInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenInformation) { // not required
		return nil
	}

	if o.TokenInformation != nil {
		if err := o.TokenInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "tokenInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "tokenInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateTravelInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.TravelInformation) { // not required
		return nil
	}

	if o.TravelInformation != nil {
		if err := o.TravelInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) validateWatchlistScreeningInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.WatchlistScreeningInformation) { // not required
		return nil
	}

	if o.WatchlistScreeningInformation != nil {
		if err := o.WatchlistScreeningInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case body based on the context it is used
func (o *CreateBundledDecisionManagerCaseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAcquirerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConsumerAuthenticationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeviceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantDefinedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecurringPaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRiskInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTravelInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWatchlistScreeningInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateAcquirerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.AcquirerInformation != nil {

		if swag.IsZero(o.AcquirerInformation) { // not required
			return nil
		}

		if err := o.AcquirerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "acquirerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "acquirerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateConsumerAuthenticationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ConsumerAuthenticationInformation != nil {

		if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
			return nil
		}

		if err := o.ConsumerAuthenticationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateDeviceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.DeviceInformation != nil {

		if swag.IsZero(o.DeviceInformation) { // not required
			return nil
		}

		if err := o.DeviceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateMerchantDefinedInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {

		if o.MerchantDefinedInformation[i] != nil {

			if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
				return nil
			}

			if err := o.MerchantDefinedInformation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateRecurringPaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RecurringPaymentInformation != nil {

		if swag.IsZero(o.RecurringPaymentInformation) { // not required
			return nil
		}

		if err := o.RecurringPaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "recurringPaymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "recurringPaymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateRiskInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RiskInformation != nil {

		if swag.IsZero(o.RiskInformation) { // not required
			return nil
		}

		if err := o.RiskInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateTokenInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenInformation != nil {

		if swag.IsZero(o.TokenInformation) { // not required
			return nil
		}

		if err := o.TokenInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "tokenInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "tokenInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateTravelInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.TravelInformation != nil {

		if swag.IsZero(o.TravelInformation) { // not required
			return nil
		}

		if err := o.TravelInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseBody) contextValidateWatchlistScreeningInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.WatchlistScreeningInformation != nil {

		if swag.IsZero(o.WatchlistScreeningInformation) { // not required
			return nil
		}

		if err := o.WatchlistScreeningInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseBody) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBody riskV1DecisionsPost201Response
swagger:model CreateBundledDecisionManagerCaseCreatedBody
*/
type CreateBundledDecisionManagerCaseCreatedBody struct {

	// links
	Links *CreateBundledDecisionManagerCaseCreatedBodyLinks `json:"_links,omitempty"`

	// client reference information
	ClientReferenceInformation *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// error information
	ErrorInformation *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// risk information
	RiskInformation *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation `json:"riskInformation,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//   - `ACCEPTED`
	//   - `REJECTED`
	//   - `PENDING_REVIEW`
	//   - `DECLINED`
	//   - `PENDING_AUTHENTICATION`
	//   - `INVALID_REQUEST`
	//   - `AUTHENTICATION_FAILED`
	//   - `CHALLENGE`
	//
	Status string `json:"status,omitempty"`

	// Time that the transaction was submitted in local time. Generated by Cybersource.
	SubmitTimeLocal string `json:"submitTimeLocal,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// watchlist screening information
	WatchlistScreeningInformation *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation `json:"watchlistScreeningInformation,omitempty"`
}

// Validate validates this create bundled decision manager case created body
func (o *CreateBundledDecisionManagerCaseCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWatchlistScreeningInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateRiskInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) validateWatchlistScreeningInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.WatchlistScreeningInformation) { // not required
		return nil
	}

	if o.WatchlistScreeningInformation != nil {
		if err := o.WatchlistScreeningInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConsumerAuthenticationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRiskInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWatchlistScreeningInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateConsumerAuthenticationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ConsumerAuthenticationInformation != nil {

		if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
			return nil
		}

		if err := o.ConsumerAuthenticationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateRiskInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RiskInformation != nil {

		if swag.IsZero(o.RiskInformation) { // not required
			return nil
		}

		if err := o.RiskInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBody) contextValidateWatchlistScreeningInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.WatchlistScreeningInformation != nil {

		if swag.IsZero(o.WatchlistScreeningInformation) { // not required
			return nil
		}

		if err := o.WatchlistScreeningInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation create bundled decision manager case created body client reference information
swagger:model CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this create bundled decision manager case created body client reference information
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body client reference information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner create bundled decision manager case created body client reference information partner
swagger:model CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner
*/
type CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create bundled decision manager case created body client reference information partner
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body client reference information partner based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation create bundled decision manager case created body consumer authentication information
swagger:model CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation struct {

	// JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay.
	// Note - Max Length of this field is 2048 characters.
	//
	AccessToken string `json:"accessToken,omitempty"`

	// Directory Server assigned ACS identifier.
	AcsOperatorID string `json:"acsOperatorID,omitempty"`

	// Unique identifier assigned by the EMVCo Secretariat upon Testing and Approval.
	// Max Length: 50
	AcsReferenceNumber string `json:"acsReferenceNumber,omitempty"`

	// Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
	//
	AcsRenderingType string `json:"acsRenderingType,omitempty"`

	// Unique transaction identifier assigned by the ACS to identify a single transaction.
	//
	// Max Length: 36
	AcsTransactionID string `json:"acsTransactionId,omitempty"`

	// URL for the card-issuing bank's authentication form that you receive when the card is enrolled.
	// The value can be very large.
	//
	// Max Length: 2048
	AcsURL string `json:"acsUrl,omitempty"`

	// Indicates what displays to the customer during the authentication process.
	// This field can contain one of these values:
	// - `ADS`: (Card not enrolled) customer prompted to activate the card during the checkout process.
	// - `ATTEMPTS`: (Attempts processing) Processing briefly displays before the checkout process is completed.
	// - `ENROLLED`: (Card enrolled) the card issuer's authentication window displays.
	// - `UNKNOWN`: Card enrollment status cannot be determined.
	// - `NOREDIRECT`: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.
	//
	// The following values can be returned if you are using rules-based payer authentication.
	// - `RIBA`: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely
	// to be challenged cannot be determined.
	// - `RIBA_PASS`: The card-issuing bank supports risk-based authentication and it is likely that the
	// cardholder will not be challenged to provide credentials, also known as _silent authentication_.
	//
	// For details about possible values, see `pa_enroll_authentication_path` field description and "Rules-Based Payer Authentication"
	// in [CyberSource Payer Authentication Using the SCMP API.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
	//
	AuthenticationPath string `json:"authenticationPath,omitempty"`

	// Payer authentication transaction identifier passed to link the validation and authorization calls.
	//
	// Max Length: 30
	AuthenticationTransactionContextID string `json:"authenticationTransactionContextId,omitempty"`

	// Payer authentication transaction identifier is used to link the check
	// enrollment and validate authentication messages. For Rupay, this field should be passed as request only for Resend OTP use case.
	//
	// Max Length: 26
	AuthenticationTransactionID string `json:"authenticationTransactionId,omitempty"`

	// Indicates the type of authentication that will be used to challenge the card holder.
	//
	// Possible Values:
	//
	// 01 - Static
	//
	// 02 - Dynamic
	//
	// 03 - OOB (Out of Band)
	//
	// 04 - Decoupled
	//
	// 20 - OTP hosted at merchant end. (Rupay S2S flow)
	// **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
	//
	// Max Length: 2
	AuthenticationType string `json:"authenticationType,omitempty"`

	// The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow
	//
	AuthorizationPayload string `json:"authorizationPayload,omitempty"`

	// Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder.
	// For example, "Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.".
	// The Issuing Bank can optionally support this value.
	//
	// Max Length: 128
	CardholderMessage string `json:"cardholderMessage,omitempty"`

	// Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and
	// Discover transactions after the customer is authenticated. The value is in base64. When you
	// request the card authorization service, CyberSource automatically converts the value, not the field name,
	// to the format required by your payment processor.
	//
	// Max Length: 255
	Cavv string `json:"cavv,omitempty"`

	// Field that is returned only when the CAVV is generated, which occurs when paresStatus
	// contains the values Y (successful authentication) or A (attempted authentication). If
	// you use the ATOS processor, send the value of this field in the `cavv_algorithm` request field of the
	// authorization service. This field contains one of these values:
	// - `2`: Visa, American Express, JCB, Diners Club, and Discover
	// - `3`: Mastercard
	//
	// Max Length: 1
	CavvAlgorithm string `json:"cavvAlgorithm,omitempty"`

	// An indicator as to why the transaction was canceled.
	// Possible Values:
	//
	// - `01`: Cardholder selected Cancel.
	// - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo).
	// - `03`: Transaction Timed Out—Decoupled Authentication
	// - `04`: Transaction timed out at ACS—other timeouts
	// - `05`: Transaction Timed out at ACS - First CReq not received by ACS
	// - `06`: Transaction Error
	// - `07`: Unknown
	// - `08`: Transaction Timed Out at SDK
	//
	// Max Length: 2
	ChallengeCancelCode string `json:"challengeCancelCode,omitempty"`

	// Indicates whether a challenge is required in order to complete authentication.
	// **Note** Regional mandates might determine that a challenge is required.
	//
	// Possible values:
	// - `Y`: Challenge required
	// - `N`: Challenge not required
	// **Note**  Used by the Hybrid integration.
	//
	// Max Length: 1
	ChallengeRequired string `json:"challengeRequired,omitempty"`

	// Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.
	//
	// Possible Values:
	//
	// Y - Decoupled Authentication is supported and preferred if challenge is necessary
	//
	// N - Do not use Decoupled Authentication
	//
	// **Default Value**: N
	//
	// Max Length: 1
	DecoupledAuthenticationIndicator string `json:"decoupledAuthenticationIndicator,omitempty"`

	// The directory server error code indicating a problem with this transaction. Note - Max Length of this field is typically 3 characters.
	//
	DirectoryServerErrorCode string `json:"directoryServerErrorCode,omitempty"`

	// Directory server text and additional detail about the error for this transaction.
	//
	// Max Length: 4096
	DirectoryServerErrorDescription string `json:"directoryServerErrorDescription,omitempty"`

	// The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results.
	// For Cybersource Through Visanet Gateway:
	// The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
	//
	// Max Length: 36
	DirectoryServerTransactionID string `json:"directoryServerTransactionId,omitempty"`

	// Note This field applies only to non-U.S-issued cards.
	//
	// For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB,
	// Diners Club, and Discover transactions when the card is not enrolled. For more information, see
	// "Interpreting the Reply," page 22.
	//
	// If you are not using the CyberSource payment services, you must send this value to your payment
	// processor in the subsequent request for card authorization. This field contains one of these values:
	// - `06`: The card can be enrolled. Liability shift.
	// - `07`: The card cannot be enrolled. No liability shift.
	//
	// For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB,
	// Diners Club, and Discover transactions. The field is absent when authentication fails.
	// You must send this value to your payment processor in the subsequent request for card authorization.
	// This field contains one of these values:
	// - `05`: Successful authentication
	// - `06`: Authentication attempted
	// - `07`: Failed authentication (No response from the merchant because of a problem.)
	//
	Eci string `json:"eci,omitempty"`

	// ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover.
	// The field is absent when authentication fails. If your payment processor is Streamline, you must pass the
	// value of this field instead of the value of `eci` or `ucafCollectionIndicator`.
	//
	// This field can contain one of these values:
	// - `01`: Authentication attempted (Mastercard)
	// - `02`: Successful authentication (Mastercard)
	// - `05`: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover)
	// - `06`: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover)
	//
	EciRaw string `json:"eciRaw,omitempty"`

	// Commerce indicator for cards not enrolled. This field contains one of these values:
	// - `internet`: Card not enrolled, or card type not supported by payer authentication. No liability shift.
	// - `js_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift.
	// - `js_failure`: J/Secure directory service is not available. No liability shift.
	// - `spa`: Mastercard card not enrolled in the SecureCode program. No liability shift.
	// - `vbv_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift.
	// - `vbv_failure`: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive
	// this result if Visa's directory service is not available. No liability shift.
	//
	// Max Length: 255
	EcommerceIndicator string `json:"ecommerceIndicator,omitempty"`

	// This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows;
	// CH - Challenge
	// FR - Frictionless
	// FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
	//
	// Max Length: 2
	EffectiveAuthenticationType string `json:"effectiveAuthenticationType,omitempty"`

	// Decision on the Risk Assessment from Mastercard.
	// Max Length: 20
	IdciDecision string `json:"idciDecision,omitempty"`

	// ReasonCode from Mastercard
	// Max Length: 20
	IdciReasonCode1 string `json:"idciReasonCode1,omitempty"`

	// ReasonCode from Mastercard
	// Max Length: 20
	IdciReasonCode2 string `json:"idciReasonCode2,omitempty"`

	// Risk Assessment from Mastercard
	IdciScore int64 `json:"idciScore,omitempty"`

	// ivr
	Ivr *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr `json:"ivr,omitempty"`

	// The global score calculated by the CB scoring platform and returned to merchants.
	//
	// Max Length: 2
	NetworkScore string `json:"networkScore,omitempty"`

	// Payer authentication request (PAReq) message that you need to forward to the ACS.
	// The value can be very large. The value is in base64.
	//
	Pareq string `json:"pareq,omitempty"`

	// Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway
	// Processing, you need to send the value of this field in your authorization request. This field can contain
	// one of these values:
	// - `A`: Proof of authentication attempt was generated.
	// - `N`: Customer failed or canceled authentication. Transaction denied.
	// - `U`: Authentication not completed regardless of the reason.
	// - `Y`: Customer was successfully authenticated.
	//
	ParesStatus string `json:"paresStatus,omitempty"`

	// Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need
	// to show proof of enrollment checking, you may need to parse the string for the information required by the
	// payment card company. The value can be very large. For details about possible values, see the `pa_enroll_proofxml` field description in
	// [CyberSource Payer Authentication Using the SCMP API.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
	// - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes.
	// - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment
	// checking for any payer authentication transaction that you re-present because of a chargeback.
	//
	ProofXML string `json:"proofXml,omitempty"`

	// Encrypted version of the card number used in the payer authentication request message.
	//
	ProxyPan string `json:"proxyPan,omitempty"`

	// SDK unique transaction identifier that is generated on each new transaction.
	//
	// Max Length: 36
	SdkTransactionID string `json:"sdkTransactionId,omitempty"`

	// Provides additional information as to why the PAResStatus has a specific value.
	//
	// Max Length: 2
	SignedParesStatusReason string `json:"signedParesStatusReason,omitempty"`

	// This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0.
	//
	SpecificationVersion string `json:"specificationVersion,omitempty"`

	// The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration.
	//
	// Max Length: 2048
	StepUpURL string `json:"stepUpUrl,omitempty"`

	// Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
	//
	// Max Length: 36
	ThreeDSServerTransactionID string `json:"threeDSServerTransactionId,omitempty"`

	// AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check
	// transactions after the customer is authenticated. The value is in base64.
	// Include the data in the card authorization request.
	//
	UcafAuthenticationData string `json:"ucafAuthenticationData,omitempty"`

	// For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the
	// customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator.
	// This field can contain these values: 0, 1.
	//
	// For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check
	// transactions. The field is absent when authentication fails. You must send this value to your payment
	// processor in the request for card authorization. This field contain one of these values:
	// - `0`: Authentication data not collected, and customer authentication was not completed.
	// - `1`: Authentication data not collected because customer authentication was not completed.
	// - `2`: Authentication data collected because customer completed authentication.
	//
	UcafCollectionIndicator string `json:"ucafCollectionIndicator,omitempty"`

	// Describes validity of OTP in minutes for incoming transaction.        .
	//
	ValidityPeriod int64 `json:"validityPeriod,omitempty"`

	// Result of the enrollment check. This field can contain one of these values:
	// - `Y`: Card enrolled or can be enrolled; you must authenticate. Liability shift.
	// - `N`: Card not enrolled; proceed with authorization. Liability shift.
	// - `U`: Unable to authenticate regardless of the reason. No liability shift.
	//
	// **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for
	// this processor, you must send the value of this field in your authorization request.
	//
	// The following value can be returned if you are using rules-based Payer Authentication:
	// - `B`: Indicates that authentication was bypassed.
	//
	// For details, see `pa_enroll_veres_enrolled` field description in [CyberSource Payer Authentication Using the SCMP API.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
	//
	VeresEnrolled string `json:"veresEnrolled,omitempty"`

	// This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
	//
	// Max Length: 2
	WhiteListStatusSource string `json:"whiteListStatusSource,omitempty"`

	// Transaction identifier generated by CyberSource for successful enrollment or validation checks.
	// Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes.
	// CyberSource forwards the XID with the card authorization service to these payment processors in these cases:
	// - Barclays
	// - Streamline (when the **ecommerceIndicator**`=spa`)
	//
	Xid string `json:"xid,omitempty"`
}

// Validate validates this create bundled decision manager case created body consumer authentication information
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcsReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcsTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcsURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationTransactionContextID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardholderMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCavv(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCavvAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChallengeCancelCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChallengeRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDecoupledAuthenticationIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectoryServerErrorDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectoryServerTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEcommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEffectiveAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdciDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdciReasonCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIdciReasonCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIvr(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkScore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSdkTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignedParesStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStepUpURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreeDSServerTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListStatusSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAcsReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.AcsReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"acsReferenceNumber", "body", o.AcsReferenceNumber, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAcsTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.AcsTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"acsTransactionId", "body", o.AcsTransactionID, 36); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAcsURL(formats strfmt.Registry) error {
	if swag.IsZero(o.AcsURL) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"acsUrl", "body", o.AcsURL, 2048); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAuthenticationTransactionContextID(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationTransactionContextID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"authenticationTransactionContextId", "body", o.AuthenticationTransactionContextID, 30); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAuthenticationTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"authenticationTransactionId", "body", o.AuthenticationTransactionID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateAuthenticationType(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"authenticationType", "body", o.AuthenticationType, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateCardholderMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.CardholderMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"cardholderMessage", "body", o.CardholderMessage, 128); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateCavv(formats strfmt.Registry) error {
	if swag.IsZero(o.Cavv) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"cavv", "body", o.Cavv, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateCavvAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(o.CavvAlgorithm) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"cavvAlgorithm", "body", o.CavvAlgorithm, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateChallengeCancelCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ChallengeCancelCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"challengeCancelCode", "body", o.ChallengeCancelCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateChallengeRequired(formats strfmt.Registry) error {
	if swag.IsZero(o.ChallengeRequired) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"challengeRequired", "body", o.ChallengeRequired, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateDecoupledAuthenticationIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.DecoupledAuthenticationIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"decoupledAuthenticationIndicator", "body", o.DecoupledAuthenticationIndicator, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateDirectoryServerErrorDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.DirectoryServerErrorDescription) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"directoryServerErrorDescription", "body", o.DirectoryServerErrorDescription, 4096); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateDirectoryServerTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.DirectoryServerTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"directoryServerTransactionId", "body", o.DirectoryServerTransactionID, 36); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateEcommerceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.EcommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ecommerceIndicator", "body", o.EcommerceIndicator, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateEffectiveAuthenticationType(formats strfmt.Registry) error {
	if swag.IsZero(o.EffectiveAuthenticationType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"effectiveAuthenticationType", "body", o.EffectiveAuthenticationType, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateIdciDecision(formats strfmt.Registry) error {
	if swag.IsZero(o.IdciDecision) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"idciDecision", "body", o.IdciDecision, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateIdciReasonCode1(formats strfmt.Registry) error {
	if swag.IsZero(o.IdciReasonCode1) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"idciReasonCode1", "body", o.IdciReasonCode1, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateIdciReasonCode2(formats strfmt.Registry) error {
	if swag.IsZero(o.IdciReasonCode2) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"idciReasonCode2", "body", o.IdciReasonCode2, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateIvr(formats strfmt.Registry) error {
	if swag.IsZero(o.Ivr) { // not required
		return nil
	}

	if o.Ivr != nil {
		if err := o.Ivr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation" + "." + "ivr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation" + "." + "ivr")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateNetworkScore(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkScore) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"networkScore", "body", o.NetworkScore, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateSdkTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SdkTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"sdkTransactionId", "body", o.SdkTransactionID, 36); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateSignedParesStatusReason(formats strfmt.Registry) error {
	if swag.IsZero(o.SignedParesStatusReason) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"signedParesStatusReason", "body", o.SignedParesStatusReason, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateStepUpURL(formats strfmt.Registry) error {
	if swag.IsZero(o.StepUpURL) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"stepUpUrl", "body", o.StepUpURL, 2048); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateThreeDSServerTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.ThreeDSServerTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"threeDSServerTransactionId", "body", o.ThreeDSServerTransactionID, 36); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) validateWhiteListStatusSource(formats strfmt.Registry) error {
	if swag.IsZero(o.WhiteListStatusSource) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"whiteListStatusSource", "body", o.WhiteListStatusSource, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body consumer authentication information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIvr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) contextValidateIvr(ctx context.Context, formats strfmt.Registry) error {

	if o.Ivr != nil {

		if swag.IsZero(o.Ivr) { // not required
			return nil
		}

		if err := o.Ivr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation" + "." + "ivr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "consumerAuthenticationInformation" + "." + "ivr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr create bundled decision manager case created body consumer authentication information ivr
swagger:model CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr
*/
type CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr struct {

	// Flag to indicate if a valid IVR transaction was detected.
	//
	EnabledMessage bool `json:"enabledMessage,omitempty"`

	// Encryption key to be used in the event the ACS requires encryption of the credential field.
	//
	// Max Length: 16
	EncryptionKey string `json:"encryptionKey,omitempty"`

	// Flag to indicate if the ACS requires the credential to be encrypted.
	//
	EncryptionMandatory bool `json:"encryptionMandatory,omitempty"`

	// An indicator from the ACS to inform the type of encryption that should be used in the event the ACS requires encryption of the credential field.
	//
	// Max Length: 20
	EncryptionType string `json:"encryptionType,omitempty"`

	// An ACS Provided label that can be presented to the Consumer. Recommended use with an application.
	//
	// Max Length: 20
	Label string `json:"label,omitempty"`

	// An ACS provided string that can be presented to the Consumer. Recommended use with an application.
	//
	// Max Length: 80
	Prompt string `json:"prompt,omitempty"`

	// An ACS provided message that can provide additional information or details.
	//
	// Max Length: 80
	StatusMessage string `json:"statusMessage,omitempty"`
}

// Validate validates this create bundled decision manager case created body consumer authentication information ivr
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrompt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatusMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) validateEncryptionKey(formats strfmt.Registry) error {
	if swag.IsZero(o.EncryptionKey) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ivr"+"."+"encryptionKey", "body", o.EncryptionKey, 16); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) validateEncryptionType(formats strfmt.Registry) error {
	if swag.IsZero(o.EncryptionType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ivr"+"."+"encryptionType", "body", o.EncryptionType, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(o.Label) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ivr"+"."+"label", "body", o.Label, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) validatePrompt(formats strfmt.Registry) error {
	if swag.IsZero(o.Prompt) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ivr"+"."+"prompt", "body", o.Prompt, 80); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) validateStatusMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.StatusMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"consumerAuthenticationInformation"+"."+"ivr"+"."+"statusMessage", "body", o.StatusMessage, 80); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body consumer authentication information ivr based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyConsumerAuthenticationInformationIvr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyErrorInformation create bundled decision manager case created body error information
swagger:model CreateBundledDecisionManagerCaseCreatedBodyErrorInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyErrorInformation struct {

	// details
	Details []*CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - `EXPIRED_CARD`
	//  - `SCORE_EXCEEDS_THRESHOLD`
	//  - `DECISION_PROFILE_REVIEW`
	//  - `DECISION_PROFILE_REJECT`
	//  - `CONSUMER_AUTHENTICATION_REQUIRED`
	//  - `INVALID_MERCHANT_CONFIGURATION`
	//  - `CONSUMER_AUTHENTICATION_FAILED`
	//  - `DECISION_PROFILE_CHALLENGE`
	//  - `CUSTOMER_WATCHLIST_MATCH`
	//  - `ADDRESS_COUNTRY_WATCHLIST_MATCH`
	//  - `EMAIL_COUNTRY_WATCHLIST_MATCH`
	//  - `IP_COUNTRY_WATCHLIST_MATCH`
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create bundled decision manager case created body error information
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body error information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0 create bundled decision manager case created body error information details items0
swagger:model CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0
*/
type CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create bundled decision manager case created body error information details items0
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body error information details items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinks create bundled decision manager case created body links
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinks
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinks struct {

	// capture
	Capture *CreateBundledDecisionManagerCaseCreatedBodyLinksCapture `json:"capture,omitempty"`

	// customer
	Customer *CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer `json:"customer,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// payment instrument
	PaymentInstrument *CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument `json:"paymentInstrument,omitempty"`

	// reversal
	Reversal *CreateBundledDecisionManagerCaseCreatedBodyLinksReversal `json:"reversal,omitempty"`

	// self
	Self *CreateBundledDecisionManagerCaseCreatedBodyLinksSelf `json:"self,omitempty"`

	// shipping address
	ShippingAddress *CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress `json:"shippingAddress,omitempty"`
}

// Validate validates this create bundled decision manager case created body links
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapture(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReversal(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateCapture(formats strfmt.Registry) error {
	if swag.IsZero(o.Capture) { // not required
		return nil
	}

	if o.Capture != nil {
		if err := o.Capture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "capture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "capture")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validatePaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrument) { // not required
		return nil
	}

	if o.PaymentInstrument != nil {
		if err := o.PaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateReversal(formats strfmt.Registry) error {
	if swag.IsZero(o.Reversal) { // not required
		return nil
	}

	if o.Reversal != nil {
		if err := o.Reversal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "reversal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "reversal")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) validateShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingAddress) { // not required
		return nil
	}

	if o.ShippingAddress != nil {
		if err := o.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body links based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCapture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReversal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateCapture(ctx context.Context, formats strfmt.Registry) error {

	if o.Capture != nil {

		if swag.IsZero(o.Capture) { // not required
			return nil
		}

		if err := o.Capture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "capture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "capture")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidatePaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstrument != nil {

		if swag.IsZero(o.PaymentInstrument) { // not required
			return nil
		}

		if err := o.PaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateReversal(ctx context.Context, formats strfmt.Registry) error {

	if o.Reversal != nil {

		if swag.IsZero(o.Reversal) { // not required
			return nil
		}

		if err := o.Reversal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "reversal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "reversal")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.ShippingAddress != nil {

		if swag.IsZero(o.ShippingAddress) { // not required
			return nil
		}

		if err := o.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "shippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "_links" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksCapture create bundled decision manager case created body links capture
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksCapture
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksCapture struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links capture
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCapture) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links capture based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCapture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCapture) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCapture) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksCapture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer create bundled decision manager case created body links customer
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links customer
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links customer based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier create bundled decision manager case created body links instrument identifier
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links instrument identifier
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links instrument identifier based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument create bundled decision manager case created body links payment instrument
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links payment instrument
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links payment instrument based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksReversal create bundled decision manager case created body links reversal
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksReversal
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksReversal struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links reversal
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksReversal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links reversal based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksReversal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksReversal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksReversal) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksReversal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksSelf create bundled decision manager case created body links self
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksSelf
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links self
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links self based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress create bundled decision manager case created body links shipping address
swagger:model CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress
*/
type CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create bundled decision manager case created body links shipping address
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body links shipping address based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyLinksShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyOrderInformation create bundled decision manager case created body order information
swagger:model CreateBundledDecisionManagerCaseCreatedBodyOrderInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this create bundled decision manager case created body order information
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body order information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails create bundled decision manager case created body order information amount details
swagger:model CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails
*/
type CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`
}

// Validate validates this create bundled decision manager case created body order information amount details
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body order information amount details based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation Contains response information about the payment.
swagger:model CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation struct {

	// Type of payment card account. This field can refer to a credit card, debit card, or prepaid card
	// account type.
	//
	// For all possible values, see the `score_card_account_type` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	AccountType string `json:"accountType,omitempty"`

	// Credit card BIN (the first six digits of the credit card).Derived either from the `cc_bin` request field
	// or from the first six characters of the `customer_cc_num` field.
	//
	// For all possible values, see the `score_cc_bin` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Bin string `json:"bin,omitempty"`

	// Country (two-digit country code) associated with the BIN of the customer's card used for the payment.
	// Returned if the information is available. Use this field for additional information when reviewing orders.
	// This information is also displayed in the details page of the CyberSource Business Center.
	//
	// For all possible values, see the `bin_country` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	BinCountry string `json:"binCountry,omitempty"`

	// Name of the bank or entity that issued the card account.
	//
	// For all possible values, see the `score_card_issuer` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Issuer string `json:"issuer,omitempty"`

	// Subtype of card account. This field can contain one of the following values:
	// - Maestro International
	// - Maestro UK Domestic
	// - MasterCard Credit
	// - MasterCard Debit
	// - Visa Credit
	// - Visa Debit
	// - Visa Electron
	//
	// **Note** Additional values may be present.
	//
	// For all possible values, see the `score_card_scheme` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Scheme string `json:"scheme,omitempty"`
}

// Validate validates this create bundled decision manager case created body payment information
func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBinCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) validateAccountType(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"paymentInformation"+"."+"accountType", "body", o.AccountType, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) validateBin(formats strfmt.Registry) error {
	if swag.IsZero(o.Bin) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"paymentInformation"+"."+"bin", "body", o.Bin, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) validateBinCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.BinCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"paymentInformation"+"."+"binCountry", "body", o.BinCountry, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"paymentInformation"+"."+"issuer", "body", o.Issuer, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) validateScheme(formats strfmt.Registry) error {
	if swag.IsZero(o.Scheme) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"paymentInformation"+"."+"scheme", "body", o.Scheme, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body payment information based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformation Contains the result of risk assessment.
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformation struct {

	// You receive this field only if you subscribe to the Enhanced Case Management service. The priority level ranges from 1 (highest) to 5 (lowest); the default value is 3. If you do not assign a priority to your rules or to your profiles, the default value is given to the order.
	//
	// For all possible values, see the `decision_case_priority` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	CasePriority int64 `json:"casePriority,omitempty"`

	// info codes
	InfoCodes *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes `json:"infoCodes,omitempty"`

	// ip address
	IPAddress *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress `json:"ipAddress,omitempty"`

	// The customer's local time (`hh:mm:ss`), which is calculated from the transaction request time and the
	// customer's billing address.
	//
	// For details, see the `score_time_local` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/)
	//
	// Max Length: 255
	LocalTime string `json:"localTime,omitempty"`

	// processor results
	ProcessorResults *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults `json:"processorResults,omitempty"`

	// profile
	Profile *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile `json:"profile,omitempty"`

	// Name of the 3rd party provider, for example, Emailage.
	// For all possible values, see the `decision_provider_#_name` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	Providers map[string]map[string]string `json:"providers,omitempty"`

	// rules
	Rules []*CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0 `json:"rules"`

	// score
	Score *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore `json:"score,omitempty"`

	// travel
	Travel *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel `json:"travel,omitempty"`

	// velocity
	Velocity *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity `json:"velocity,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInfoCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTravel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVelocity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateInfoCodes(formats strfmt.Registry) error {
	if swag.IsZero(o.InfoCodes) { // not required
		return nil
	}

	if o.InfoCodes != nil {
		if err := o.InfoCodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "infoCodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "infoCodes")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateIPAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.IPAddress) { // not required
		return nil
	}

	if o.IPAddress != nil {
		if err := o.IPAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "ipAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "ipAddress")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateLocalTime(formats strfmt.Registry) error {
	if swag.IsZero(o.LocalTime) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"localTime", "body", o.LocalTime, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateProcessorResults(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorResults) { // not required
		return nil
	}

	if o.ProcessorResults != nil {
		if err := o.ProcessorResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "processorResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "processorResults")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(o.Score) { // not required
		return nil
	}

	if o.Score != nil {
		if err := o.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "score")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateTravel(formats strfmt.Registry) error {
	if swag.IsZero(o.Travel) { // not required
		return nil
	}

	if o.Travel != nil {
		if err := o.Travel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) validateVelocity(formats strfmt.Registry) error {
	if swag.IsZero(o.Velocity) { // not required
		return nil
	}

	if o.Velocity != nil {
		if err := o.Velocity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body risk information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInfoCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIPAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTravel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVelocity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateInfoCodes(ctx context.Context, formats strfmt.Registry) error {

	if o.InfoCodes != nil {

		if swag.IsZero(o.InfoCodes) { // not required
			return nil
		}

		if err := o.InfoCodes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "infoCodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "infoCodes")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateIPAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.IPAddress != nil {

		if swag.IsZero(o.IPAddress) { // not required
			return nil
		}

		if err := o.IPAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "ipAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "ipAddress")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateProcessorResults(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorResults != nil {

		if swag.IsZero(o.ProcessorResults) { // not required
			return nil
		}

		if err := o.ProcessorResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "processorResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "processorResults")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.Profile != nil {

		if swag.IsZero(o.Profile) { // not required
			return nil
		}

		if err := o.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {

			if swag.IsZero(o.Rules[i]) { // not required
				return nil
			}

			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateScore(ctx context.Context, formats strfmt.Registry) error {

	if o.Score != nil {

		if swag.IsZero(o.Score) { // not required
			return nil
		}

		if err := o.Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "score")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateTravel(ctx context.Context, formats strfmt.Registry) error {

	if o.Travel != nil {

		if swag.IsZero(o.Travel) { // not required
			return nil
		}

		if err := o.Travel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) contextValidateVelocity(ctx context.Context, formats strfmt.Registry) error {

	if o.Velocity != nil {

		if swag.IsZero(o.Velocity) { // not required
			return nil
		}

		if err := o.Velocity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress Contains detailed response information about the customer's IP address.
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress struct {

	// Name of the state decoded from the IP address used directly or indirectly by the customer to send the order.
	//
	// For all possible values, see the `score_ip_state` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Indicates whether the transaction IP address is associated with a known anonymous proxy.
	//
	// For all possible values, see the `score_ip_anonymizer_status` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	AnonymizerStatus string `json:"anonymizerStatus,omitempty"`

	// Provides the name of the organization that owns the ASN. The carrier is responsible for the traffic carried on the network or set of networks designated as an Autonomous System (AS) and identified by the ASN.
	// While there are more than 27,000 active ASNs, there are fewer carriers, because a single carrier often manages several ASNs.
	//
	// Max Length: 255
	Carrier string `json:"carrier,omitempty"`

	// Name of the country decoded from the IP address used directly or indirectly by the customer to send the order.
	//
	// For all possible values, see the `score_ip_country` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Country string `json:"country,omitempty"`

	// Name of the city decoded from the IP address used directly or indirectly by the customer to send the order.
	//
	// For all possible values, see the `score_ip_city` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Locality string `json:"locality,omitempty"`

	// The Registering Organization is the entity responsible for the actions and content associated with a given block of IP addresses. This is in contrast to the carrier, which is responsible for the routing of traffic for network blocks. Registering Organizations include many types of entities, including corporate, government, or educational entities, and ISPs managing the allocation and use of network blocks.
	//
	// Max Length: 255
	Organization string `json:"organization,omitempty"`

	// Routing method decoded from the IP address used directly or indirectly by the customer to send the order.
	//
	// For all possible values, see the `score_ip_routing_method` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	RoutingMethod string `json:"routingMethod,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information IP address
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAnonymizerStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"administrativeArea", "body", o.AdministrativeArea, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateAnonymizerStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AnonymizerStatus) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"anonymizerStatus", "body", o.AnonymizerStatus, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateCarrier(formats strfmt.Registry) error {
	if swag.IsZero(o.Carrier) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"carrier", "body", o.Carrier, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"country", "body", o.Country, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"locality", "body", o.Locality, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(o.Organization) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"organization", "body", o.Organization, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) validateRoutingMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.RoutingMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"ipAddress"+"."+"routingMethod", "body", o.RoutingMethod, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information IP address based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationIPAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes create bundled decision manager case created body risk information info codes
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes struct {

	// Indicates a mismatch between the customer's billing and shipping addresses.
	//
	Address []string `json:"address"`

	// Indicates that customer information is associated with transactions that are either on the negative or
	// the positive list.
	//
	CustomerList []string `json:"customerList"`

	// Indicates the device behavior information code(s) returned from device fingerprinting.
	//
	DeviceBehavior []string `json:"deviceBehavior"`

	// Indicates that the customer has a high purchase frequency.
	//
	GlobalVelocity []string `json:"globalVelocity"`

	// Indicates excessive identity changes. The threshold is variable depending on the identity elements being
	// compared.
	//
	IdentityChange []string `json:"identityChange"`

	// Indicates a problem with the customer's email address, IP address, or billing address.
	//
	Internet []string `json:"internet"`

	// Indicates a problem with the customer's phone number.
	//
	Phone []string `json:"phone"`

	// Indicates that the customer provided potentially suspicious information.
	//
	Suspicious []string `json:"suspicious"`

	// List of information codes triggered by the order. These information codes were generated when you created
	// the order and product velocity rules and are returned so that you can associate them with the rules.
	//
	Velocity []string `json:"velocity"`
}

// Validate validates this create bundled decision manager case created body risk information info codes
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information info codes based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationInfoCodes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults create bundled decision manager case created body risk information processor results
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults struct {

	// Type of filter. Possible values:
	// - ACCEPT
	// - PENDING
	// - DENY
	// - REPORT
	//
	// Max Length: 60
	FraudDecision string `json:"fraudDecision,omitempty"`

	// possible values
	// - AVS_NO_MATCH
	// - AVS_PARTIAL_MATCH
	// - AVS_UNAVAILABLE_OR_UNSUPPORTED
	// - CARD_SECURITY_CODE_MISMATCH
	// - MAXIMUM_TRANSACTION_AMOUNT
	// - UNCONFIRMED_ADDRESS
	// - COUNTRY_MONITOR
	// - LARGE_ORDER_NUMBER
	// - BILLING_OR_SHIPPING_ADDRESS_MISMATCH
	// - RISKY_ZIP_CODE
	// - SUSPECTED_FREIGHT_FORWARDER_CHECK
	// - TOTAL_PURCHASE_PRICE_MINIMUM
	// - IP_ADDRESS_VELOCITY
	// - RISKY_EMAIL_ADDRESS_DOMAIN_CHECK
	// - RISKY_BANK_IDENTIFICATION_NUMBER_CHECK,
	// RISKY_IP_ADDRESS_RANGE
	// - PAYPAL_FRAUD_MODEL
	//
	// Max Length: 60
	FraudDecisionReason string `json:"fraudDecisionReason,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information processor results
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFraudDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFraudDecisionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) validateFraudDecision(formats strfmt.Registry) error {
	if swag.IsZero(o.FraudDecision) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"processorResults"+"."+"fraudDecision", "body", o.FraudDecision, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) validateFraudDecisionReason(formats strfmt.Registry) error {
	if swag.IsZero(o.FraudDecisionReason) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"processorResults"+"."+"fraudDecisionReason", "body", o.FraudDecisionReason, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information processor results based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProcessorResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile create bundled decision manager case created body risk information profile
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile struct {

	// Name of the queue where orders that are not automatically accepted are sent.
	//
	// Max Length: 255
	DesinationQueue string `json:"desinationQueue,omitempty"`

	// Name of the active profile chosen by the profile selector. If no profile selector exists,
	// the default active profile is chosen.
	//
	// **Note** By default, your default profile is the active profile, or the Profile Selector chooses the active profile. Use this field
	// only if you want to specify the name of a different profile. The passed-in profile will then become the active profile.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`

	// Name of the profile selector rule that chooses the profile to use for the
	// transaction. If no profile selector exists, the value is Default Active Profile.
	//
	// Max Length: 255
	SelectorRule string `json:"selectorRule,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information profile
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDesinationQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelectorRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) validateDesinationQueue(formats strfmt.Registry) error {
	if swag.IsZero(o.DesinationQueue) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"profile"+"."+"desinationQueue", "body", o.DesinationQueue, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"profile"+"."+"name", "body", o.Name, 30); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) validateSelectorRule(formats strfmt.Registry) error {
	if swag.IsZero(o.SelectorRule) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"profile"+"."+"selectorRule", "body", o.SelectorRule, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information profile based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0 create bundled decision manager case created body risk information rules items0
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0 struct {

	// Summarizes the result for the rule according to the setting that you chose in the Profile Editor.
	// This field can contain one of the following values:
	// - `IGNORE`
	// - `REVIEW`
	// - `REJECT`
	// - `ACCEPT`
	//
	// Max Length: 255
	Decision string `json:"decision,omitempty"`

	// Description of the rule as it appears in the Profile Editor.
	// Max Length: 255
	Name string `json:"name,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information rules items0
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) validateDecision(formats strfmt.Registry) error {
	if swag.IsZero(o.Decision) { // not required
		return nil
	}

	if err := validate.MaxLength("decision", "body", o.Decision, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", o.Name, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information rules items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore create bundled decision manager case created body risk information score
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore struct {

	// factor codes
	FactorCodes []string `json:"factorCodes"`

	// Name of the score model used for the transaction. If you did not include a custom model in your request,
	// this field contains the name of CyberSource's default model.
	//
	// For all possible values, see the `score_model_used` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	ModelUsed string `json:"modelUsed,omitempty"`

	// Total score calculated for this order. The value cannot be negative.
	//
	// For all possible values, see the `score_score_result` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	Result string `json:"result,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information score
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateModelUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) validateModelUsed(formats strfmt.Registry) error {
	if swag.IsZero(o.ModelUsed) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"score"+"."+"modelUsed", "body", o.ModelUsed, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"score"+"."+"result", "body", o.Result, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information score based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel create bundled decision manager case created body risk information travel
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel struct {

	// actual final destination
	ActualFinalDestination *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination `json:"actualFinalDestination,omitempty"`

	// first departure
	FirstDeparture *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture `json:"firstDeparture,omitempty"`

	// first destination
	FirstDestination *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination `json:"firstDestination,omitempty"`

	// last destination
	LastDestination *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination `json:"lastDestination,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information travel
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActualFinalDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastDestination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) validateActualFinalDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.ActualFinalDestination) { // not required
		return nil
	}

	if o.ActualFinalDestination != nil {
		if err := o.ActualFinalDestination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "actualFinalDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "actualFinalDestination")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) validateFirstDeparture(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstDeparture) { // not required
		return nil
	}

	if o.FirstDeparture != nil {
		if err := o.FirstDeparture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDeparture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDeparture")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) validateFirstDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstDestination) { // not required
		return nil
	}

	if o.FirstDestination != nil {
		if err := o.FirstDestination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDestination")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) validateLastDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.LastDestination) { // not required
		return nil
	}

	if o.LastDestination != nil {
		if err := o.LastDestination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "lastDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "lastDestination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body risk information travel based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActualFinalDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFirstDeparture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFirstDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) contextValidateActualFinalDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.ActualFinalDestination != nil {

		if swag.IsZero(o.ActualFinalDestination) { // not required
			return nil
		}

		if err := o.ActualFinalDestination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "actualFinalDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "actualFinalDestination")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) contextValidateFirstDeparture(ctx context.Context, formats strfmt.Registry) error {

	if o.FirstDeparture != nil {

		if swag.IsZero(o.FirstDeparture) { // not required
			return nil
		}

		if err := o.FirstDeparture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDeparture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDeparture")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) contextValidateFirstDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.FirstDestination != nil {

		if swag.IsZero(o.FirstDestination) { // not required
			return nil
		}

		if err := o.FirstDestination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "firstDestination")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) contextValidateLastDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.LastDestination != nil {

		if swag.IsZero(o.LastDestination) { // not required
			return nil
		}

		if err := o.LastDestination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "lastDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "travel" + "." + "lastDestination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination create bundled decision manager case created body risk information travel actual final destination
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination struct {

	// Country of actual final destination on the route.
	// Max Length: 90
	Country string `json:"country,omitempty"`

	// Latitude of actual final destination on the route.
	// Max Length: 10
	Latitude string `json:"latitude,omitempty"`

	// City of actual final destination on the route.
	// Max Length: 90
	Locality string `json:"locality,omitempty"`

	// Longitude of actual final destination on the route.
	// Max Length: 10
	Longitude string `json:"longitude,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information travel actual final destination
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"actualFinalDestination"+"."+"country", "body", o.Country, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) validateLatitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"actualFinalDestination"+"."+"latitude", "body", o.Latitude, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"actualFinalDestination"+"."+"locality", "body", o.Locality, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) validateLongitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"actualFinalDestination"+"."+"longitude", "body", o.Longitude, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information travel actual final destination based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelActualFinalDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture create bundled decision manager case created body risk information travel first departure
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture struct {

	// Country of first departure on the route.
	// Max Length: 90
	Country string `json:"country,omitempty"`

	// Latitude of first departure on the route.
	// Max Length: 10
	Latitude string `json:"latitude,omitempty"`

	// City of first departure on the route.
	// Max Length: 90
	Locality string `json:"locality,omitempty"`

	// Longitude of first departure on the route.
	// Max Length: 10
	Longitude string `json:"longitude,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information travel first departure
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDeparture"+"."+"country", "body", o.Country, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) validateLatitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDeparture"+"."+"latitude", "body", o.Latitude, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDeparture"+"."+"locality", "body", o.Locality, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) validateLongitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDeparture"+"."+"longitude", "body", o.Longitude, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information travel first departure based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDeparture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination create bundled decision manager case created body risk information travel first destination
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination struct {

	// Country of first destination on the route.
	// Max Length: 90
	Country string `json:"country,omitempty"`

	// Latitude of first destination on the route.
	// Max Length: 10
	Latitude string `json:"latitude,omitempty"`

	// City of first destination on the route.
	// Max Length: 90
	Locality string `json:"locality,omitempty"`

	// Longitude of first destination on the route.
	// Max Length: 10
	Longitude string `json:"longitude,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information travel first destination
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDestination"+"."+"country", "body", o.Country, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) validateLatitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDestination"+"."+"latitude", "body", o.Latitude, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDestination"+"."+"locality", "body", o.Locality, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) validateLongitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"firstDestination"+"."+"longitude", "body", o.Longitude, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information travel first destination based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelFirstDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination create bundled decision manager case created body risk information travel last destination
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination struct {

	// Country of last destination on the route.
	// Max Length: 90
	Country string `json:"country,omitempty"`

	// Latitude of last destination on the route.
	// Max Length: 10
	Latitude string `json:"latitude,omitempty"`

	// City of last destination on the route.
	// Max Length: 90
	Locality string `json:"locality,omitempty"`

	// Longitude of last destination on the route.
	// Max Length: 10
	Longitude string `json:"longitude,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information travel last destination
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"lastDestination"+"."+"country", "body", o.Country, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) validateLatitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"lastDestination"+"."+"latitude", "body", o.Latitude, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"lastDestination"+"."+"locality", "body", o.Locality, 90); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) validateLongitude(formats strfmt.Registry) error {
	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"travel"+"."+"lastDestination"+"."+"longitude", "body", o.Longitude, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information travel last destination based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationTravelLastDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity create bundled decision manager case created body risk information velocity
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity struct {

	// address
	Address []string `json:"address"`

	// List of information codes triggered by the order. These information codes were generated when you created the order and product velocity rules and are returned so that you can associate them with the rules.
	//
	// Returned by scoring service.
	//
	Morphing []*CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0 `json:"morphing"`
}

// Validate validates this create bundled decision manager case created body risk information velocity
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMorphing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.Address) { // not required
		return nil
	}

	for i := 0; i < len(o.Address); i++ {

		if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"riskInformation"+"."+"velocity"+"."+"address"+"."+strconv.Itoa(i), "body", o.Address[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) validateMorphing(formats strfmt.Registry) error {
	if swag.IsZero(o.Morphing) { // not required
		return nil
	}

	for i := 0; i < len(o.Morphing); i++ {
		if swag.IsZero(o.Morphing[i]) { // not required
			continue
		}

		if o.Morphing[i] != nil {
			if err := o.Morphing[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity" + "." + "morphing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity" + "." + "morphing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body risk information velocity based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMorphing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) contextValidateMorphing(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Morphing); i++ {

		if o.Morphing[i] != nil {

			if swag.IsZero(o.Morphing[i]) { // not required
				return nil
			}

			if err := o.Morphing[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity" + "." + "morphing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "riskInformation" + "." + "velocity" + "." + "morphing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0 create bundled decision manager case created body risk information velocity morphing items0
swagger:model CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0
*/
type CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0 struct {

	// Morphing count specified by the number #.
	//
	// **Note** The count is not returned for the initial transaction.
	//
	Count int64 `json:"count,omitempty"`

	// Field name of the morphing element. specified by the setting that you chose in the
	// Velocity Editor.
	//
	// For all possible values, see the `decisionReply_morphingElement_#_fieldName` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 255
	FieldName string `json:"fieldName,omitempty"`

	// Identifier that CyberSource assigned to the velocity rule specified by the number #.
	//
	// For all possible values, see the `decision_velocity_morphing_#_info_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** >
	//
	// Max Length: 255
	InformationCode string `json:"informationCode,omitempty"`
}

// Validate validates this create bundled decision manager case created body risk information velocity morphing items0
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFieldName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInformationCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) validateFieldName(formats strfmt.Registry) error {
	if swag.IsZero(o.FieldName) { // not required
		return nil
	}

	if err := validate.MaxLength("fieldName", "body", o.FieldName, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) validateInformationCode(formats strfmt.Registry) error {
	if swag.IsZero(o.InformationCode) { // not required
		return nil
	}

	if err := validate.MaxLength("informationCode", "body", o.InformationCode, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body risk information velocity morphing items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyRiskInformationVelocityMorphingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation create bundled decision manager case created body watchlist screening information
swagger:model CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation
*/
type CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation struct {

	// Returned when the Denied Parties List check (first two codes) or the export service (all others) would have
	// declined the transaction. This field can contain one or more of these values:
	// - `MATCH-DPC`: Denied Parties List match.
	// - `UNV-DPC`: Denied Parties List unavailable.
	// - `MATCH-BCO`: Billing country restricted.
	// - `MATCH-EMCO`: Email country restricted.
	// - `MATCH-HCO`: Host name country restricted.
	// - `MATCH-IPCO`: IP country restricted.
	// - `MATCH-SCO`: Shipping country restricted.
	//
	InfoCodes []string `json:"infoCodes"`

	// Likelihood that the country associated with the customer's IP address was identified correctly.
	// Returns a value from 1–100, where 100 indicates the highest likelihood.
	// If the country cannot be determined, the value is –1.
	//
	// Maximum: 100
	// Minimum: -1
	IPCountryConfidence *int64 `json:"ipCountryConfidence,omitempty"`

	// watch list
	WatchList *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList `json:"watchList,omitempty"`
}

// Validate validates this create bundled decision manager case created body watchlist screening information
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInfoCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPCountryConfidence(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWatchList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) validateInfoCodes(formats strfmt.Registry) error {
	if swag.IsZero(o.InfoCodes) { // not required
		return nil
	}

	for i := 0; i < len(o.InfoCodes); i++ {

		if err := validate.MaxLength("createBundledDecisionManagerCaseCreated"+"."+"watchlistScreeningInformation"+"."+"infoCodes"+"."+strconv.Itoa(i), "body", o.InfoCodes[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) validateIPCountryConfidence(formats strfmt.Registry) error {
	if swag.IsZero(o.IPCountryConfidence) { // not required
		return nil
	}

	if err := validate.MinimumInt("createBundledDecisionManagerCaseCreated"+"."+"watchlistScreeningInformation"+"."+"ipCountryConfidence", "body", *o.IPCountryConfidence, -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("createBundledDecisionManagerCaseCreated"+"."+"watchlistScreeningInformation"+"."+"ipCountryConfidence", "body", *o.IPCountryConfidence, 100, false); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) validateWatchList(formats strfmt.Registry) error {
	if swag.IsZero(o.WatchList) { // not required
		return nil
	}

	if o.WatchList != nil {
		if err := o.WatchList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body watchlist screening information based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWatchList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) contextValidateWatchList(ctx context.Context, formats strfmt.Registry) error {

	if o.WatchList != nil {

		if swag.IsZero(o.WatchList) { // not required
			return nil
		}

		if err := o.WatchList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList create bundled decision manager case created body watchlist screening information watch list
swagger:model CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList
*/
type CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList struct {

	// matches
	Matches []*CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0 `json:"matches"`
}

// Validate validates this create bundled decision manager case created body watchlist screening information watch list
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) validateMatches(formats strfmt.Registry) error {
	if swag.IsZero(o.Matches) { // not required
		return nil
	}

	for i := 0; i < len(o.Matches); i++ {
		if swag.IsZero(o.Matches[i]) { // not required
			continue
		}

		if o.Matches[i] != nil {
			if err := o.Matches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList" + "." + "matches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList" + "." + "matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create bundled decision manager case created body watchlist screening information watch list based on the context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) contextValidateMatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Matches); i++ {

		if o.Matches[i] != nil {

			if swag.IsZero(o.Matches[i]) { // not required
				return nil
			}

			if err := o.Matches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList" + "." + "matches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseCreated" + "." + "watchlistScreeningInformation" + "." + "watchList" + "." + "matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0 create bundled decision manager case created body watchlist screening information watch list matches items0
swagger:model CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0
*/
type CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0 struct {

	// Address found on the list specified in export_matchN_list
	// for the entity (name and address) in the request.
	//
	Addresses []string `json:"addresses"`

	// Name found on the list specified in export_matchN_list for the entity (name and address) in the request.
	//
	Aliases []string `json:"aliases"`

	// Sub-lists matched by the order data. List members are separated by carets (^).
	Programs []string `json:"programs"`

	// List on which the first Denied Parties List check match appears.
	// For a list of codes, see "Denied Parties List Check Codes," page 56.
	//
	// Max Length: 255
	SanctionList string `json:"sanctionList,omitempty"`
}

// Validate validates this create bundled decision manager case created body watchlist screening information watch list matches items0
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAliases(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrograms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSanctionList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(o.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(o.Addresses); i++ {

		if err := validate.MaxLength("addresses"+"."+strconv.Itoa(i), "body", o.Addresses[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) validateAliases(formats strfmt.Registry) error {
	if swag.IsZero(o.Aliases) { // not required
		return nil
	}

	for i := 0; i < len(o.Aliases); i++ {

		if err := validate.MaxLength("aliases"+"."+strconv.Itoa(i), "body", o.Aliases[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) validatePrograms(formats strfmt.Registry) error {
	if swag.IsZero(o.Programs) { // not required
		return nil
	}

	for i := 0; i < len(o.Programs); i++ {

		if err := validate.MaxLength("programs"+"."+strconv.Itoa(i), "body", o.Programs[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) validateSanctionList(formats strfmt.Registry) error {
	if swag.IsZero(o.SanctionList) { // not required
		return nil
	}

	if err := validate.MaxLength("sanctionList", "body", o.SanctionList, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case created body watchlist screening information watch list matches items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseCreatedBodyWatchlistScreeningInformationWatchListMatchesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation create bundled decision manager case params body acquirer information
swagger:model CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation struct {

	// Acquirer bank ID number that  corresponds to a certificate that Cybersource already has.This ID has this format. 4XXXXX for Visa and 5XXXXX for Mastercard.
	//
	// Max Length: 11
	AcquirerBin string `json:"acquirerBin,omitempty"`

	// Issuers need to be aware of the Acquirer's Country Code when the Acquirer country differs from the Merchant country and the Acquirer is in the EEA (European Economic Area).
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Username for the visa directory server that is created when your acquirer sets up your account. This ID might be the same as your merchant ID. the username can be 15 or 23 characters.
	//
	// Max Length: 15
	MerchantID string `json:"merchantId,omitempty"`

	// Registered password for the Visa directory server.
	//
	// Max Length: 8
	Password string `json:"password,omitempty"`
}

// Validate validates this create bundled decision manager case params body acquirer information
func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcquirerBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) validateAcquirerBin(formats strfmt.Registry) error {
	if swag.IsZero(o.AcquirerBin) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"acquirerInformation"+"."+"acquirerBin", "body", o.AcquirerBin, 11); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"acquirerInformation"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) validateMerchantID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"acquirerInformation"+"."+"merchantId", "body", o.MerchantID, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(o.Password) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"acquirerInformation"+"."+"password", "body", o.Password, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body acquirer information based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyAcquirerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyBuyerInformation Contains information about the buyer.
swagger:model CreateBundledDecisionManagerCaseParamsBodyBuyerInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyBuyerInformation struct {

	// Recipient's date of birth. **Format**: `YYYYMMDD`.
	//
	// This field is a `pass-through`, which means that CyberSource ensures that the value is eight numeric characters
	// but otherwise does not verify the value or modify it in any way before sending it to the processor. If the field
	// is not required for the transaction, CyberSource does not forward it to the processor.
	//
	// For more details, see `recipient_date_of_birth` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// The merchant's password that CyberSource hashes and stores as a hashed password.
	//
	// For details about this field, see the `customer_password` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 100
	HashedPassword string `json:"hashedPassword,omitempty"`

	// Your identifier for the customer.
	//
	// When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.
	//
	// #### Comercio Latino
	// For recurring payments in Mexico, the value is the customer's contract number.
	// Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.
	//
	// #### Worldpay VAP
	// For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order
	// given, for a customer account ID value and uses the first value it finds:
	// 1. `customer_account_id` value in the follow-on credit request
	// 2. Customer account ID value that was used for the capture that is being credited
	// 3. Customer account ID value that was used for the original authorization
	// If a customer account ID value cannot be found in any of these locations, then no value is used.
	//
	// For processor-specific information, see the `customer_account_id` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`

	// personal identification
	PersonalIdentification []*CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`

	// Specifies the customer account user name.
	// Max Length: 255
	Username string `json:"username,omitempty"`
}

// Validate validates this create bundled decision manager case params body buyer information
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHashedPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"buyerInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) validateHashedPassword(formats strfmt.Registry) error {
	if swag.IsZero(o.HashedPassword) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"buyerInformation"+"."+"hashedPassword", "body", o.HashedPassword, 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"buyerInformation"+"."+"merchantCustomerId", "body", o.MerchantCustomerID, 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) validateUsername(formats strfmt.Registry) error {
	if swag.IsZero(o.Username) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"buyerInformation"+"."+"username", "body", o.Username, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body buyer information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PersonalIdentification); i++ {

		if o.PersonalIdentification[i] != nil {

			if swag.IsZero(o.PersonalIdentification[i]) { // not required
				return nil
			}

			if err := o.PersonalIdentification[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0 create bundled decision manager case params body buyer information personal identification items0
swagger:model CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type. This field is supported only on the following processors.
	//
	// #### ComercioLatino
	// Set this field to the Cadastro de Pessoas Fisicas (CPF).
	//
	// #### CyberSource Latin American Processing
	// Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil.
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// For processor-specific information, see the `personal_id` field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// If `type = PASSPORT`, this is the cardholder's passport number.
	// Recommended for Discover ProtectBuy.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The government agency that issued the driver's license or passport.
	//
	// If **type**` = DRIVER_LICENSE`, this is the State or province where the customer's driver's license was issued.
	//
	// If **type**` = PASSPORT`, this is the Issuing country for the cardholder's passport. Recommended for Discover ProtectBuy.
	//
	// Use the two-character [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// #### TeleCheck
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// #### All Other Processors
	// Not used.
	//
	// For details about the country that issued the passport, see `customer_passport_country` field description in [CyberSource Payer Authentication Using the SCMP API]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
	//
	// For details about the state or province that issued the passport, see `driver_license_state` field description in [Electronic Check Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	IssuedBy string `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Possible values:
	//   - `NATIONAL`
	//   - `CPF`
	//   - `CPNJ`
	//   - `CURP`
	//   - `SSN`
	//   - `DRIVER_LICENSE`
	//   - `PASSPORT_NUMBER`
	//   - `PERSONAL_ID`
	//   - `TAX_ID`
	//
	// This field is supported only on the following processors.
	//
	// #### ComercioLatino
	// Set this field to the Cadastro de Pessoas Fisicas (CPF).
	//
	// #### CyberSource Latin American Processing
	// Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil.
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// For processor-specific information, see the `personal_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	Type string `json:"type,omitempty"`

	// Verification results received from Issuer or Card Network for verification transactions. Response Only Field.
	//
	VerificationResults string `json:"verificationResults,omitempty"`
}

// Validate validates this create bundled decision manager case params body buyer information personal identification items0
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body buyer information personal identification items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation create bundled decision manager case params body client reference information
swagger:model CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Required: true
	// Max Length: 50
	Code *string `json:"code"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`

	// Used to resume a transaction that was paused for an order modification rule to allow for payer authentication to complete. To resume and continue with the authorization/decision service flow, call the services and include the request id from the prior decision call.
	//
	// Max Length: 26
	PausedRequestID string `json:"pausedRequestId,omitempty"`
}

// Validate validates this create bundled decision manager case params body client reference information
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePausedRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"code", "body", *o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) validatePausedRequestID(formats strfmt.Registry) error {
	if swag.IsZero(o.PausedRequestID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"pausedRequestId", "body", o.PausedRequestID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body client reference information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner create bundled decision manager case params body client reference information partner
swagger:model CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner
*/
type CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this create bundled decision manager case params body client reference information partner
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body client reference information partner based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation create bundled decision manager case params body consumer authentication information
swagger:model CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation struct {

	// An override field that a merchant can pass in to set the challenge window size to display to the end cardholder.  The ACS (Active Control Server) will reply with content that is formatted appropriately to this window size to allow for the best user experience.  The sizes are width x height in pixels of the window displayed in the cardholder browser window.
	//
	// 01 - 250x400
	//
	// 02 - 390x400
	//
	// 03 - 500x600
	//
	// 04 - 600x400
	//
	// 05 - Full page
	//
	// Max Length: 2
	AcsWindowSize string `json:"acsWindowSize,omitempty"`

	// Data that documents and supports a specific authentication process.
	//
	// Max Length: 2048
	AlternateAuthenticationData string `json:"alternateAuthenticationData,omitempty"`

	// Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM
	//
	// Max Length: 14
	AlternateAuthenticationDate string `json:"alternateAuthenticationDate,omitempty"`

	// Mechanism used by the cardholder to authenticate to the 3D Secure requestor.
	// Possible values:
	// - `01`: No authentication occurred
	// - `02`: Login using merchant system credentials
	// - `03`: Login using Federated ID
	// - `04`: Login using issuer credentials
	// - `05`: Login using third-party authenticator
	// - `06`: Login using FIDO Authenticator
	//
	AlternateAuthenticationMethod string `json:"alternateAuthenticationMethod,omitempty"`

	// The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request
	// payload with value returned in `consumerAuthenticationInformation.alternateAuthenticationData` if merchant calls via CYBS or field can be
	// provided by merchant in authorization request if calling an external 3DS provider.
	//
	// This field is supported for Cartes Bancaires Fast'R transactions on Credit Mutuel-CIC.
	// Format: YYYYMMDDHHMMSS
	//
	// Max Length: 14
	AuthenticationDate string `json:"authenticationDate,omitempty"`

	// Payer authentication transaction identifier passed to link the check enrollment
	// and validate authentication messages.For Rupay,this is passed only in Re-Send OTP usecase.
	// **Note**: Required for Standard integration, Rupay Seamless server to server integration for enroll service.
	// Required for Hybrid integration for validate service.
	//
	// Max Length: 26
	AuthenticationTransactionID string `json:"authenticationTransactionId,omitempty"`

	// Indicates the type of authentication that will be used to challenge the card holder.
	//
	// Possible Values:
	//
	// 01 - Static
	//
	// 02 - Dynamic
	//
	// 03 - OOB (Out of Band)
	//
	// 04 - Decoupled
	//
	// 20 - OTP hosted at merchant end. (Rupay S2S flow)
	// **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
	//
	// Max Length: 2
	AuthenticationType string `json:"authenticationType,omitempty"`

	// An indicator as to why the transaction was canceled.
	// Possible Values:
	//
	// - `01`: Cardholder selected Cancel.
	// - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo).
	// - `03`: Transaction Timed Out—Decoupled Authentication
	// - `04`: Transaction timed out at ACS—other timeouts
	// - `05`: Transaction Timed out at ACS - First CReq not received by ACS
	// - `06`: Transaction Error
	// - `07`: Unknown
	// - `08`: Transaction Timed Out at SDK
	//
	// Max Length: 2
	ChallengeCancelCode string `json:"challengeCancelCode,omitempty"`

	// Possible values:
	// - `01`: No preference
	// - `02`: No challenge request
	// - `03`: Challenge requested (3D Secure requestor preference)
	// - `04`: Challenge requested (mandate)
	// - `05`: No challenge requested (transactional risk analysis is already performed)
	// - `06`: No challenge requested (Data share only)
	// - `07`: No challenge requested (strong consumer authentication is already performed)
	// - `08`: No challenge requested (utilize whitelist exemption if no challenge required)
	// - `09`: Challenge requested (whitelist prompt requested if challenge required)
	// **Note** This field will default to `01` on merchant configuration and can be overridden by the merchant.
	// EMV 3D Secure version 2.1.0 supports values `01-04`. Version 2.2.0 supports values `01-09`.
	//
	// For details, see `pa_challenge_code` field description in [CyberSource Payer Authentication Using the SCMP API.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html)
	//
	ChallengeCode string `json:"challengeCode,omitempty"`

	// The `consumerAuthenticationInformation.challengeCode` indicates the authentication type/level, or challenge, that was presented to the cardholder
	// at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to
	// the issuer the alternative authentication methods that the consumer used.
	//
	// Max Length: 2
	ChallengeStatus string `json:"challengeStatus,omitempty"`

	// An alias that uniquely identifies the customer's account and credit card on file.
	// Note This field is required if Tokenization is enabled in the merchant profile settings.
	//
	// Max Length: 128
	CustomerCardAlias string `json:"customerCardAlias,omitempty"`

	// Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.
	//
	// Possible Values:
	//
	// Y - Decoupled Authentication is supported and preferred if challenge is necessary
	//
	// N - Do not use Decoupled Authentication
	//
	// **Default Value**: N
	//
	// Max Length: 1
	DecoupledAuthenticationIndicator string `json:"decoupledAuthenticationIndicator,omitempty"`

	// Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes).
	// Possible Values: Numeric values between 1 and 10080 accepted.
	//
	// Max Length: 5
	DecoupledAuthenticationMaxTime string `json:"decoupledAuthenticationMaxTime,omitempty"`

	// Indicates that the card being used is the one designated as the primary payment card for purchase.
	// Recommended for Discover ProtectBuy.
	//
	DefaultCard bool `json:"defaultCard,omitempty"`

	// Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated.
	//
	// Max Length: 10
	DeviceChannel string `json:"deviceChannel,omitempty"`

	// An integer value greater than 1 indicating the max number of permitted authorizations for installment payments.
	// **Note** This is required if the merchant and cardholder have agreed to installment payments.
	//
	InstallmentTotalCount int64 `json:"installmentTotalCount,omitempty"`

	// Indicates whether the customer has opted in for marketing offers.
	// Recommended for Discover ProtectBuy.
	//
	MarketingOptIn bool `json:"marketingOptIn,omitempty"`

	// Indicates origin of the marketing offer. Recommended for Discover ProtectBuy.
	//
	// Max Length: 40
	MarketingSource string `json:"marketingSource,omitempty"`

	// Merchant category code.
	// **Important** Required only for Visa Secure transactions in Brazil.
	// Do not use this request field for any other types of transactions.
	//
	// Max Length: 4
	Mcc string `json:"mcc,omitempty"`

	// Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes).
	// Possible Values:
	// 1 = Represents fraud rate <=1
	//
	// 2 = Represents fraud rate >1 and <=6
	//
	// 3 = Represents fraud rate >6 and <=13
	//
	// 4 = Represents fraud rate >13 and <=25
	//
	// 5 = Represents fraud rate >25
	//
	// EEA** = European Economic Area
	// RTS** = Regulatory Technical Standards
	// PSD2** = Payment Services Directive
	//
	// Max Length: 2
	MerchantFraudRate string `json:"merchantFraudRate,omitempty"`

	// Risk Score provided by merchants. This is specific for CB transactions.
	//
	MerchantScore int64 `json:"merchantScore,omitempty"`

	// Category of the message for a specific use case. Possible values:
	//
	// - `01`: PA- payment authentication
	// - `02`: NPA- non-payment authentication
	// - `03-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo)
	// - `80-99`: Reserved for DS use
	//
	MessageCategory string `json:"messageCategory,omitempty"`

	// Non-Payer Authentication Indicator.
	// Possible values:
	// - `01`: Add card
	// - `02`: Maintain card information
	// - `03`: Cardholder verification for EMV token
	// - `04-80` Reserved for EMVCo
	// - `80-90` Reserved DS
	//
	// Max Length: 2
	NpaCode string `json:"npaCode,omitempty"`

	// Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)..
	//
	// Max Length: 2
	OverrideCountryCode string `json:"overrideCountryCode,omitempty"`

	// Specifies the Brazilian payment account type used for the transaction.
	// This field overrides other payment types that might be specified in the request.
	// Use one of the following values for this field:
	// - `NA`: Not applicable. Do not override other payment types that are specified in the request.
	// - `CR`: Credit card.
	// - `DB`: Debit card.
	// - `VSAVR`: Visa Vale Refeicao
	// - `VSAVA`: Visa Vale Alimentacao
	// **Important** Required only for Visa Secure transactions in Brazil.
	// Do not use this request field for any other types of transactions.
	//
	OverridePaymentMethod string `json:"overridePaymentMethod,omitempty"`

	// This field carry data that the ACS can use to verify the authentication process.
	//
	// Max Length: 2048
	PriorAuthenticationData string `json:"priorAuthenticationData,omitempty"`

	// Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.
	//
	// 01 - Frictionless authentication occurred by ACS
	//
	// 02 - Cardholder challenge occurred by ACS
	//
	// 03 - AVS verified
	//
	// 04 - Other issuer methods
	//
	// 05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)
	//
	// 80-99 - Reserved for DS use
	//
	// Max Length: 2
	PriorAuthenticationMethod string `json:"priorAuthenticationMethod,omitempty"`

	// This data element contains a ACS Transaction ID for a prior authenticated transaction.
	// For example, the first recurring transaction that was authenticated with the cardholder
	//
	// Max Length: 36
	PriorAuthenticationReferenceID string `json:"priorAuthenticationReferenceId,omitempty"`

	// Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM
	//
	// Max Length: 12
	PriorAuthenticationTime string `json:"priorAuthenticationTime,omitempty"`

	// Specifies the product code, which designates the type of transaction.
	// Specify one of the following values for this field:
	// - AIR: Airline purchase
	// Important Required for American Express SafeKey (U.S.).
	// - `ACC`: Accommodation Rental
	// - `ACF`: Account funding
	// - `CHA`: Check acceptance
	// - `DIG`: Digital Goods
	// - `DSP`: Cash Dispensing
	// - `GAS`: Fuel
	// - `GEN`: General Retail
	// - `LUX`: Luxury Retail
	// - `PAL`: Prepaid activation and load
	// - `PHY`: Goods or services purchase
	// - `QCT`: Quasi-cash transaction
	// - `REN`: Car Rental
	// - `RES`: Restaurant
	// - `SVC`: Services
	// - `TBD`: Other
	// - `TRA`: Travel
	// **Important** Required for Visa Secure transactions in Brazil.
	// Do not use this request field for any other types of transactions.
	//
	// Max Length: 3
	ProductCode string `json:"productCode,omitempty"`

	// Reference ID that corresponds to the device fingerprinting data that was collected previously.
	// Note Required for Hybrid integration.
	//
	// Max Length: 50
	ReferenceID string `json:"referenceId,omitempty"`

	// Cardinal's directory server assigned 3DS Requestor ID value
	// Max Length: 35
	RequestorID string `json:"requestorId,omitempty"`

	// Indicates the type of 3RI request.
	//
	// Possible Values:
	//
	// 01 - Recurring transaction
	//
	// 02 - Installment transaction
	//
	// 03 - Add card
	//
	// 04 - Maintain card
	//
	// 05 - Account verification
	//
	// 06 - Split/delayed shipment
	//
	// 07 - Top-up
	//
	// 08 - Mail Order
	//
	// 09 - Telephone Order
	//
	// 10 - Whitelist status check
	//
	// 11 - Other payment
	//
	// Max Length: 2
	RequestorInitiatedAuthenticationIndicator string `json:"requestorInitiatedAuthenticationIndicator,omitempty"`

	// Cardinal's directory server assigned 3DS Requestor Name value
	// Max Length: 40
	RequestorName string `json:"requestorName,omitempty"`

	// The URL of the merchant's return page. CyberSource adds this return URL to the step-up JWT and returns it in the
	// response of the Payer Authentication enrollment call. The merchant's return URL page serves as a listening URL.
	// Once the bank session completes, the merchant receives a POST to their URL. This response contains the completed
	// bank session's transactionId. The merchant's return page should capture the transaction ID and send it in the
	// Payer Authentication validation call.
	//
	// Max Length: 2048
	ReturnURL string `json:"returnUrl,omitempty"`

	// Risk Assessment from Mastercard. This is to be sent by merchant if they would like to request a score
	ScoreRequest int64 `json:"scoreRequest,omitempty"`

	// This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).
	//
	// Possible Values:
	//
	// Greater than or equal to 05 (05 is the minimum timeout to set)
	//
	// Cardinal Default is set to 15
	//
	// NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed
	//
	// Max Length: 2
	SdkMaxTimeout string `json:"sdkMaxTimeout,omitempty"`

	// Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies.
	// Possible Values : 0/1
	//
	// Max Length: 1
	SecureCorporatePaymentIndicator string `json:"secureCorporatePaymentIndicator,omitempty"`

	// strong authentication
	StrongAuthentication *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication `json:"strongAuthentication,omitempty"`

	// This  field is only applicable to Rupay and is optional. Merchant will have to pass a valid value from 01 through 07 which indicates the transaction flow. Below are the possible values.
	// 01:NW- Transaction performed at domestic merchant.
	// 02:TW- Transaction performed at domestic merchant along with Token provisioning.
	// 03:IT- Transaction performed at International merchant.
	// 04:AT- Authentication Transaction Only.
	// 05:AW- Authentication transaction for provisioning.
	// 06:DI- Domestic InApp Transaction.
	// 07:II- International InApp transaction.
	// 08:GC- Guest Checkout
	// 09:ST- SI Authentication Transaction only
	// 10:SW- SI Authorization along with token provisioning
	//
	TransactionFlowIndicator int64 `json:"transactionFlowIndicator,omitempty"`

	// Transaction mode identifier. Identifies the channel from which the transaction originates.
	// Possible values:
	//
	// - `M`: MOTO (Mail Order Telephone Order)
	// - `R`: Retail
	// - `S`: eCommerce
	// - `P`: Mobile Device
	// - `T`: Tablet
	//
	TransactionMode string `json:"transactionMode,omitempty"`

	// Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.
	//
	// Possible Values:
	//
	// Y - 3DS Requestor is whitelisted by cardholder
	//
	// N - 3DS Requestor is not whitelisted by cardholder
	//
	// Max Length: 1
	WhiteListStatus string `json:"whiteListStatus,omitempty"`
}

// Validate validates this create bundled decision manager case params body consumer authentication information
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcsWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAlternateAuthenticationData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAlternateAuthenticationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChallengeCancelCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChallengeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerCardAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDecoupledAuthenticationIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDecoupledAuthenticationMaxTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMarketingSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMcc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantFraudRate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNpaCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOverrideCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePriorAuthenticationData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePriorAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePriorAuthenticationReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePriorAuthenticationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestorInitiatedAuthenticationIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRequestorName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReturnURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSdkMaxTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecureCorporatePaymentIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStrongAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAcsWindowSize(formats strfmt.Registry) error {
	if swag.IsZero(o.AcsWindowSize) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"acsWindowSize", "body", o.AcsWindowSize, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAlternateAuthenticationData(formats strfmt.Registry) error {
	if swag.IsZero(o.AlternateAuthenticationData) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"alternateAuthenticationData", "body", o.AlternateAuthenticationData, 2048); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAlternateAuthenticationDate(formats strfmt.Registry) error {
	if swag.IsZero(o.AlternateAuthenticationDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"alternateAuthenticationDate", "body", o.AlternateAuthenticationDate, 14); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAuthenticationDate(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"authenticationDate", "body", o.AuthenticationDate, 14); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAuthenticationTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"authenticationTransactionId", "body", o.AuthenticationTransactionID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateAuthenticationType(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"authenticationType", "body", o.AuthenticationType, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateChallengeCancelCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ChallengeCancelCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"challengeCancelCode", "body", o.ChallengeCancelCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateChallengeStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.ChallengeStatus) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"challengeStatus", "body", o.ChallengeStatus, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateCustomerCardAlias(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerCardAlias) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"customerCardAlias", "body", o.CustomerCardAlias, 128); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateDecoupledAuthenticationIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.DecoupledAuthenticationIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"decoupledAuthenticationIndicator", "body", o.DecoupledAuthenticationIndicator, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateDecoupledAuthenticationMaxTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DecoupledAuthenticationMaxTime) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"decoupledAuthenticationMaxTime", "body", o.DecoupledAuthenticationMaxTime, 5); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateDeviceChannel(formats strfmt.Registry) error {
	if swag.IsZero(o.DeviceChannel) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"deviceChannel", "body", o.DeviceChannel, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateMarketingSource(formats strfmt.Registry) error {
	if swag.IsZero(o.MarketingSource) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"marketingSource", "body", o.MarketingSource, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateMcc(formats strfmt.Registry) error {
	if swag.IsZero(o.Mcc) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"mcc", "body", o.Mcc, 4); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateMerchantFraudRate(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantFraudRate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"merchantFraudRate", "body", o.MerchantFraudRate, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateNpaCode(formats strfmt.Registry) error {
	if swag.IsZero(o.NpaCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"npaCode", "body", o.NpaCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateOverrideCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(o.OverrideCountryCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"overrideCountryCode", "body", o.OverrideCountryCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validatePriorAuthenticationData(formats strfmt.Registry) error {
	if swag.IsZero(o.PriorAuthenticationData) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"priorAuthenticationData", "body", o.PriorAuthenticationData, 2048); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validatePriorAuthenticationMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.PriorAuthenticationMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"priorAuthenticationMethod", "body", o.PriorAuthenticationMethod, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validatePriorAuthenticationReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(o.PriorAuthenticationReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"priorAuthenticationReferenceId", "body", o.PriorAuthenticationReferenceID, 36); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validatePriorAuthenticationTime(formats strfmt.Registry) error {
	if swag.IsZero(o.PriorAuthenticationTime) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"priorAuthenticationTime", "body", o.PriorAuthenticationTime, 12); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateProductCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"productCode", "body", o.ProductCode, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"referenceId", "body", o.ReferenceID, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateRequestorID(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"requestorId", "body", o.RequestorID, 35); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateRequestorInitiatedAuthenticationIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorInitiatedAuthenticationIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"requestorInitiatedAuthenticationIndicator", "body", o.RequestorInitiatedAuthenticationIndicator, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateRequestorName(formats strfmt.Registry) error {
	if swag.IsZero(o.RequestorName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"requestorName", "body", o.RequestorName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateReturnURL(formats strfmt.Registry) error {
	if swag.IsZero(o.ReturnURL) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"returnUrl", "body", o.ReturnURL, 2048); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateSdkMaxTimeout(formats strfmt.Registry) error {
	if swag.IsZero(o.SdkMaxTimeout) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"sdkMaxTimeout", "body", o.SdkMaxTimeout, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateSecureCorporatePaymentIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.SecureCorporatePaymentIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"secureCorporatePaymentIndicator", "body", o.SecureCorporatePaymentIndicator, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateStrongAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.StrongAuthentication) { // not required
		return nil
	}

	if o.StrongAuthentication != nil {
		if err := o.StrongAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation" + "." + "strongAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation" + "." + "strongAuthentication")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) validateWhiteListStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.WhiteListStatus) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"whiteListStatus", "body", o.WhiteListStatus, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body consumer authentication information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStrongAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) contextValidateStrongAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.StrongAuthentication != nil {

		if swag.IsZero(o.StrongAuthentication) { // not required
			return nil
		}

		if err := o.StrongAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation" + "." + "strongAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "consumerAuthenticationInformation" + "." + "strongAuthentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication create bundled decision manager case params body consumer authentication information strong authentication
swagger:model CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication
*/
type CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication struct {

	// Indicates the type of Authentication request
	//
	// 01 - Payment transaction
	//
	// 02 - Recurring transaction
	//
	// 03 - Installment transaction
	//
	// 04 - Add card
	//
	// 05 - Maintain card
	//
	// 06 - Cardholder verification as part of EMV token ID and V
	//
	// Max Length: 2
	AuthenticationIndicator string `json:"authenticationIndicator,omitempty"`
}

// Validate validates this create bundled decision manager case params body consumer authentication information strong authentication
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthenticationIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication) validateAuthenticationIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"consumerAuthenticationInformation"+"."+"strongAuthentication"+"."+"authenticationIndicator", "body", o.AuthenticationIndicator, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body consumer authentication information strong authentication based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyConsumerAuthenticationInformationStrongAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyDeviceInformation create bundled decision manager case params body device information
swagger:model CreateBundledDecisionManagerCaseParamsBodyDeviceInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyDeviceInformation struct {

	// Whether the customer's browser accepts cookies. This field can contain one of the following values:
	// - `yes`: The customer's browser accepts cookies.
	// - `no`: The customer's browser does not accept cookies.
	//
	CookiesAccepted string `json:"cookiesAccepted,omitempty"`

	// Field that contains the session ID that you send to Decision Manager to obtain the device fingerprint
	// information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and
	// underscore (_). However, do not use the same uppercase and lowercase letters to indicate
	// different session IDs.
	//
	// The session ID must be unique for each merchant ID. You can use any string that you are already
	// generating, such as an order number or web session ID.
	//
	// The session ID must be unique for each page load, regardless of an individual's web session ID.
	// If a user navigates to a profiled page and is assigned a web session, navigates away from the
	// profiled page, then navigates back to the profiled page, the generated session ID should be different
	// and unique. You may use a web session ID, but it is preferable to use an application GUID (Globally
	// Unique Identifier). This measure ensures that a unique ID is generated every time the page is
	// loaded, even if it is the same user reloading the page.
	//
	FingerprintSessionID string `json:"fingerprintSessionId,omitempty"`

	// DNS resolved hostname from `ipAddress`.
	// Max Length: 60
	HostName string `json:"hostName,omitempty"`

	// Value of the Accept header sent by the customer's web browser.
	// **Note** If the customer's browser provides a value, you must include it in your request.
	//
	// Max Length: 255
	HTTPAcceptBrowserValue string `json:"httpAcceptBrowserValue,omitempty"`

	// The exact content of the HTTP accept header.
	//
	// Max Length: 256
	HTTPAcceptContent string `json:"httpAcceptContent,omitempty"`

	// Value represents the bit depth of the color palette for displaying images, in bits per pixel.
	// Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details
	//
	// Max Length: 2
	HTTPBrowserColorDepth string `json:"httpBrowserColorDepth,omitempty"`

	// Email address set in the customer's browser, which may differ from customer email.
	//
	HTTPBrowserEmail string `json:"httpBrowserEmail,omitempty"`

	// A Boolean value that represents the ability of the cardholder browser to execute Java.
	// Value is returned from the navigator.javaEnabled property. Possible Values:True/False
	//
	HTTPBrowserJavaEnabled bool `json:"httpBrowserJavaEnabled,omitempty"`

	// A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False.
	// **Note**: Merchants should be able to know the values from fingerprint details of cardholder's browser.
	//
	HTTPBrowserJavaScriptEnabled bool `json:"httpBrowserJavaScriptEnabled,omitempty"`

	// Value represents the browser language as defined in IETF BCP47.
	// Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details.
	//
	// Max Length: 8
	HTTPBrowserLanguage string `json:"httpBrowserLanguage,omitempty"`

	// Total height of the Cardholder's scree in pixels, example: 864.
	//
	// Max Length: 6
	HTTPBrowserScreenHeight string `json:"httpBrowserScreenHeight,omitempty"`

	// Total width of the cardholder's screen in pixels. Example: 1536.
	//
	// Max Length: 6
	HTTPBrowserScreenWidth string `json:"httpBrowserScreenWidth,omitempty"`

	// Time difference between UTC time and the cardholder browser local time, in minutes, Example:300
	//
	// Max Length: 5
	HTTPBrowserTimeDifference string `json:"httpBrowserTimeDifference,omitempty"`

	// IP address of the customer.
	//
	// #### Used by
	// **Authorization, Capture, and Credit**
	// Optional field.
	//
	// Max Length: 45
	IPAddress string `json:"ipAddress,omitempty"`

	// raw data
	RawData []*CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0 `json:"rawData"`

	// Customer's browser as identified from the HTTP header data. For example, `Mozilla` is the value that identifies
	// the Netscape browser.
	//
	// Max Length: 40
	UserAgent string `json:"userAgent,omitempty"`

	// Value of the User-Agent header sent by the customer's web browser.
	// Note If the customer's browser provides a value, you must include it in your request.
	//
	// Max Length: 255
	UserAgentBrowserValue string `json:"userAgentBrowserValue,omitempty"`
}

// Validate validates this create bundled decision manager case params body device information
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPAcceptBrowserValue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPAcceptContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPBrowserColorDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPBrowserLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPBrowserScreenHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPBrowserScreenWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTTPBrowserTimeDifference(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRawData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserAgentBrowserValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHostName(formats strfmt.Registry) error {
	if swag.IsZero(o.HostName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"hostName", "body", o.HostName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPAcceptBrowserValue(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPAcceptBrowserValue) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpAcceptBrowserValue", "body", o.HTTPAcceptBrowserValue, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPAcceptContent(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPAcceptContent) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpAcceptContent", "body", o.HTTPAcceptContent, 256); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPBrowserColorDepth(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPBrowserColorDepth) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpBrowserColorDepth", "body", o.HTTPBrowserColorDepth, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPBrowserLanguage(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPBrowserLanguage) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpBrowserLanguage", "body", o.HTTPBrowserLanguage, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPBrowserScreenHeight(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPBrowserScreenHeight) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpBrowserScreenHeight", "body", o.HTTPBrowserScreenHeight, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPBrowserScreenWidth(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPBrowserScreenWidth) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpBrowserScreenWidth", "body", o.HTTPBrowserScreenWidth, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateHTTPBrowserTimeDifference(formats strfmt.Registry) error {
	if swag.IsZero(o.HTTPBrowserTimeDifference) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"httpBrowserTimeDifference", "body", o.HTTPBrowserTimeDifference, 5); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateIPAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.IPAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"ipAddress", "body", o.IPAddress, 45); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateRawData(formats strfmt.Registry) error {
	if swag.IsZero(o.RawData) { // not required
		return nil
	}

	for i := 0; i < len(o.RawData); i++ {
		if swag.IsZero(o.RawData[i]) { // not required
			continue
		}

		if o.RawData[i] != nil {
			if err := o.RawData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation" + "." + "rawData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation" + "." + "rawData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateUserAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.UserAgent) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"userAgent", "body", o.UserAgent, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) validateUserAgentBrowserValue(formats strfmt.Registry) error {
	if swag.IsZero(o.UserAgentBrowserValue) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"deviceInformation"+"."+"userAgentBrowserValue", "body", o.UserAgentBrowserValue, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body device information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRawData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) contextValidateRawData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RawData); i++ {

		if o.RawData[i] != nil {

			if swag.IsZero(o.RawData[i]) { // not required
				return nil
			}

			if err := o.RawData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation" + "." + "rawData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "deviceInformation" + "." + "rawData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyDeviceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0 create bundled decision manager case params body device information raw data items0
swagger:model CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0 struct {

	// Field that contains the device fingerprint data from the specified provider. The value should be Base64 encoded.
	//
	Data string `json:"data,omitempty"`

	// Possible values:
	// - cardinal
	// - inauth
	// - threatmetrix
	//
	// Max Length: 32
	Provider string `json:"provider,omitempty"`
}

// Validate validates this create bundled decision manager case params body device information raw data items0
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(o.Provider) { // not required
		return nil
	}

	if err := validate.MaxLength("provider", "body", o.Provider, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body device information raw data items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyDeviceInformationRawDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0 Contains merchant-defined key-value pairs.
swagger:model CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0 struct {

	// Fields that you can use to store information. The value
	// appears in the Case Management Details window in the
	// Business Center. The first four fields are the same fields
	// that are used by the Secure Data services. See request
	// code examples.
	// **Warning** Merchant-defined data fields are not intended
	// to and must not be used to capture personally identifying
	// information. Accordingly, merchants are prohibited from
	// capturing, obtaining, and/or transmitting any personally
	// identifying information in or via the merchant-defined data
	// fields. Personally identifying information includes, but is
	// not limited to, address, credit card number, social security
	// number, driver's license number, state-issued
	// identification number, passport number, and card
	// verification numbers (CVV, CVC2, CVV2, CID, CVN). In
	// the event CyberSource discovers that a merchant is
	// capturing and/or transmitting personally identifying
	// information via the merchant-defined data fields, whether
	// or not intentionally, CyberSource will immediately
	// suspend the merchant's account, which will result in a
	// rejection of any and all transaction requests submitted by
	// the merchant after the point of suspension.
	//
	// Max Length: 255
	Key string `json:"key,omitempty"`

	// String value for the key
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this create bundled decision manager case params body merchant defined information items0
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("key", "body", o.Key, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", o.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body merchant defined information items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyMerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyMerchantInformation create bundled decision manager case params body merchant information
swagger:model CreateBundledDecisionManagerCaseParamsBodyMerchantInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`

	// Your company's name as you want it to appear to the customer in the issuing bank's authentication form.
	// This value overrides the value specified by your merchant bank.
	//
	// Max Length: 25
	MerchantName string `json:"merchantName,omitempty"`
}

// Validate validates this create bundled decision manager case params body merchant information
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) validateMerchantName(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"merchantInformation"+"."+"merchantName", "body", o.MerchantName, 25); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body merchant information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor create bundled decision manager case params body merchant information merchant descriptor
swagger:model CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor
*/
type CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor struct {

	// Your merchant name.
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	// #### PIN debit
	// Your business name. This name is displayed on the cardholder's statement. When you
	// include more than one consecutive space, extra spaces are removed.
	//
	// When you do not include this value in your PIN debit request, the merchant name from your account is used.
	// **Important** This value must consist of English characters.
	//
	// Optional field for PIN debit credit or PIN debit purchase requests.
	//
	// #### Airline processing
	// Your merchant name. This name is displayed on the cardholder's statement. When you include more than one consecutive space, extra spaces are removed.
	//
	// **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.
	//
	// **Important** This value must consist of English characters.
	//
	// Required for captures and credits.
	//
	Name string `json:"name,omitempty"`

	// Address of company's website provided by merchant
	//
	// Max Length: 255
	URL string `json:"url,omitempty"`
}

// Validate validates this create bundled decision manager case params body merchant information merchant descriptor
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(o.URL) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"url", "body", o.URL, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body merchant information merchant descriptor based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformation Contains detailed order-level information.
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// Starting date and time for an event or a journey that is independent of which transportation mechanism, in UTC. The cutoffDateTime will supersede travelInformation.departureTime if both are supplied in the request.
	// Format: YYYY-MM-DDThh:mm:ssZ. Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
	//
	CutoffDateTime string `json:"cutoffDateTime,omitempty"`

	// This array contains detailed information about individual products in the order.
	LineItems []*CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0 `json:"lineItems"`

	// Indicates whether cardholder is placing an order with a future availability or release date.
	// This field can contain one of these values:
	// - MERCHANDISE_AVAILABLE: Merchandise available
	// - FUTURE_AVAILABILITY: Future availability
	//
	PreOrder string `json:"preOrder,omitempty"`

	// Expected date that a pre-ordered purchase will be available. Format: YYYYMMDD
	//
	// Max Length: 10
	PreOrderDate string `json:"preOrderDate,omitempty"`

	// Indicates whether the cardholder is reordering previously purchased merchandise.
	// This field can contain one of these values:
	// - false: First time ordered
	// - true: Reordered
	//
	Reordered bool `json:"reordered,omitempty"`

	// Boolean that indicates whether returns are accepted for this order.
	// This field can contain one of the following values:
	// - true: Returns are accepted for this order.
	// - false: Returns are not accepted for this order.
	//
	ReturnsAccepted bool `json:"returnsAccepted,omitempty"`

	// ship to
	ShipTo *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo `json:"shipTo,omitempty"`

	// shipping details
	ShippingDetails *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails `json:"shippingDetails,omitempty"`

	// Total number of articles/items in the order as a numeric decimal count.
	// Possible values: 00 - 99
	//
	// Max Length: 2
	TotalOffersCount string `json:"totalOffersCount,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalOffersCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {
	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validatePreOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(o.PreOrderDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"preOrderDate", "body", o.PreOrderDate, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateShippingDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingDetails) { // not required
		return nil
	}

	if o.ShippingDetails != nil {
		if err := o.ShippingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shippingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shippingDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) validateTotalOffersCount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalOffersCount) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"totalOffersCount", "body", o.TotalOffersCount, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body order information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShippingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) contextValidateLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LineItems); i++ {

		if o.LineItems[i] != nil {

			if swag.IsZero(o.LineItems[i]) { // not required
				return nil
			}

			if err := o.LineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) contextValidateShippingDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.ShippingDetails != nil {

		if swag.IsZero(o.ShippingDetails) { // not required
			return nil
		}

		if err := o.ShippingDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shippingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "orderInformation" + "." + "shippingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails Contains `currency` and `totalAmount` for this order.
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// Grand total for the order. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information amount details
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", *o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body order information amount details based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo create bundled decision manager case params body order information bill to
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_,
	// it must be sent as _1 1st Street_.
	//
	// Required if keyed; not used if swiped.
	//
	// String (20)
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional.
	// String (60)
	//
	// #### For Payouts
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Used for additional address information. For example: _Attention: Accounts Payable_
	// Optional field.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### FDMS Nashville
	// `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters.
	// String (20)
	//
	// #### All Other Processors
	// String (60)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// #### SEPA/BACS
	// Required for Create Mandate and Import Mandate
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### RBS WorldPay Atlanta
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's phone number.
	//
	// It is recommended that you include the country code when the order is from outside the U.S.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Optional field.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada.
	// Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada.
	// Not used if swiped.
	//
	// #### RBS WorldPay Atlanta:
	// For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional field.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information bill to
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body order information bill to based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0 create bundled decision manager case params body order information line items items0
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0 struct {

	// allowed export countries
	AllowedExportCountries []string `json:"allowedExportCountries"`

	// Product's identifier code. This field is inserted into the outgoing message without being parsed or formatted.
	// This field is included as Distributor product SKU (Offer) in the list of API fields with which you can create
	// custom rules.
	//
	// Max Length: 15
	DistributorProductSku string `json:"distributorProductSku,omitempty"`

	// This field is only used in DM service.
	//
	// Determines whether to assign risk to the order if the billing and shipping addresses specify different cities,
	// states, or countries. This field can contain one of the following values:
	// - true: Orders are assigned only slight additional risk if billing and shipping addresses are different.
	// - false: Orders are assigned higher additional risk if billing and shipping addresses are different.
	//
	Gift bool `json:"gift,omitempty"`

	// When `orderInformation.lineItems[].productCode` is "gift_card", this is the
	// currency used for the gift card purchase.
	//
	// For details, see `pa_gift_card_currency` field description in [CyberSource Payer Authentication Using the SCMP API.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/Payer_Authentication_SCMP_API.pdf)
	//
	// For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	GiftCardCurrency int64 `json:"giftCardCurrency,omitempty"`

	// passenger
	Passenger *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger `json:"passenger,omitempty"`

	// Type of product. The value for this field is used to identify the product category (electronic, handling, physical,
	// service, or shipping). The default value is `default`.
	//
	// If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set
	// this field to a value other than `default` or one of the values related to shipping and/or handling, then
	// `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and
	// `orderInformation.lineItems[].productSku` fields are required.
	//
	// Optional field.
	//
	// For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// The Product Codes for the tax service are located in the Cybersource Tax Codes guide. Contact Customer Support to request the guide. If you don't send a tax service Product Code in your tax request, product-based rules or exemptions will not be applied and the transaction will default to fully taxable in the locations where you've indicated you need to collect tax [by way of nexus, no nexus, or seller registration number fields].
	//
	// Max Length: 255
	ProductCode string `json:"productCode,omitempty"`

	// Brief description of item.
	ProductDescription string `json:"productDescription,omitempty"`

	// For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of
	// the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Max Length: 255
	ProductName string `json:"productName,omitempty"`

	// Indicates the level of risk for the product. This field can contain one of the following values:
	// - `low`: The product is associated with few chargebacks.
	// - `normal`: The product is associated with a normal number of chargebacks.
	// - `high`: The product is associated with many chargebacks.
	//
	// Max Length: 6
	ProductRisk string `json:"productRisk,omitempty"`

	// Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.
	//
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is
	// required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
	//
	// Max Length: 255
	ProductSKU string `json:"productSKU,omitempty"`

	// Number of units for this order. Must be a non-negative integer.
	//
	// The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values
	// related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// restricted export countries
	RestrictedExportCountries []string `json:"restrictedExportCountries"`

	// Destination to where the item will be shipped. Example: Commercial, Residential, Store
	//
	// Max Length: 50
	ShippingDestinationTypes string `json:"shippingDestinationTypes,omitempty"`

	// Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must
	// be in the same currency. The tax amount field is additive.
	//
	// The following example uses a two-exponent currency such as USD:
	//
	//  1. You include each line item in your request.
	//  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80
	//  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60
	//  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.
	//
	// Optional field.
	//
	// #### Airlines processing
	// Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s).
	// Format: English characters only.
	// Optional request field for a line item.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Note if you send this field in your tax request, the value in the field will override the tax engine
	//
	// Max Length: 15
	TaxAmount string `json:"taxAmount,omitempty"`

	// Total amount for the item. Normally calculated as the unit price times quantity.
	//
	// When `orderInformation.lineItems[].productCode` is "gift_card", this is the purchase amount total
	// for prepaid gift cards in major units.
	//
	// Example: 123.45 USD = 123
	//
	// Max Length: 13
	TotalAmount string `json:"totalAmount,omitempty"`

	// Per-item price of the product. This value for this field cannot be negative.
	//
	// You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// You can include a decimal point (.), but you cannot include any other special characters.
	// The value is truncated to the correct number of decimal places.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either
	// the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)
	//
	// #### Tax Calculation
	// Required field for U.S., Canadian, international and value added taxes.
	//
	// #### Zero Amount Authorizations
	// If your processor supports zero amount authorizations, you can set this field to 0 for the
	// authorization to check if the card is lost or stolen.
	//
	// #### Maximum Field Lengths
	// For GPN and JCN Gateway: Decimal (10)
	// All other processors: Decimal (15)
	//
	// Max Length: 15
	UnitPrice string `json:"unitPrice,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information line items items0
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDistributorProductSku(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassenger(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSKU(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingDestinationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateDistributorProductSku(formats strfmt.Registry) error {
	if swag.IsZero(o.DistributorProductSku) { // not required
		return nil
	}

	if err := validate.MaxLength("distributorProductSku", "body", o.DistributorProductSku, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validatePassenger(formats strfmt.Registry) error {
	if swag.IsZero(o.Passenger) { // not required
		return nil
	}

	if o.Passenger != nil {
		if err := o.Passenger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passenger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passenger")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateProductCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductCode) { // not required
		return nil
	}

	if err := validate.MaxLength("productCode", "body", o.ProductCode, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateProductName(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductName) { // not required
		return nil
	}

	if err := validate.MaxLength("productName", "body", o.ProductName, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateProductRisk(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductRisk) { // not required
		return nil
	}

	if err := validate.MaxLength("productRisk", "body", o.ProductRisk, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateProductSKU(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductSKU) { // not required
		return nil
	}

	if err := validate.MaxLength("productSKU", "body", o.ProductSKU, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {
	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", o.Quantity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", o.Quantity, 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateShippingDestinationTypes(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingDestinationTypes) { // not required
		return nil
	}

	if err := validate.MaxLength("shippingDestinationTypes", "body", o.ShippingDestinationTypes, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateTaxAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TaxAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("taxAmount", "body", o.TaxAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("totalAmount", "body", o.TotalAmount, 13); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {
	if swag.IsZero(o.UnitPrice) { // not required
		return nil
	}

	if err := validate.MaxLength("unitPrice", "body", o.UnitPrice, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body order information line items items0 based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePassenger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) contextValidatePassenger(ctx context.Context, formats strfmt.Registry) error {

	if o.Passenger != nil {

		if swag.IsZero(o.Passenger) { // not required
			return nil
		}

		if err := o.Passenger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passenger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passenger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger Contains travel-related passenger details used by DM service only.
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger struct {

	// Passenger's email address, including the full domain name, such as jdoe@example.com.
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Passenger's first name.
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// ID of the passenger to whom the ticket was issued. For example, you can use this field for the frequent flyer
	// number.
	//
	// Max Length: 40
	ID string `json:"id,omitempty"`

	// Passenger's last name.
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Passenger's nationality country. Use the two character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	// Max Length: 2
	Nationality string `json:"nationality,omitempty"`

	// Passenger's phone number. If the order is from outside the U.S., CyberSource recommends that you include
	// the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// Max Length: 15
	Phone string `json:"phone,omitempty"`

	// Your company's passenger classification, such as with a frequent flyer program. In this case, you might use
	// values such as `standard`, `gold`, or `platinum`.
	//
	// Max Length: 32
	Status string `json:"status,omitempty"`

	// Passenger classification associated with the price of the ticket. You can use one of the following values:
	// - `ADT`: Adult
	// - `CNN`: Child
	// - `INF`: Infant
	// - `YTH`: Youth
	// - `STU`: Student
	// - `SCR`: Senior Citizen
	// - `MIL`: Military
	//
	// Max Length: 32
	Type string `json:"type,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information line items items0 passenger
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNationality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"id", "body", o.ID, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateNationality(formats strfmt.Registry) error {
	if swag.IsZero(o.Nationality) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"nationality", "body", o.Nationality, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(o.Phone) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"phone", "body", o.Phone, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"status", "body", o.Status, 32); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("passenger"+"."+"type", "body", o.Type, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body order information line items items0 passenger based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationLineItemsItems0Passenger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo create bundled decision manager case params body order information ship to
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo struct {

	// First line of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	//
	// Optional field.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// Third line of the shipping address.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address3 string `json:"address3,omitempty"`

	// State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) (maximum length: 2)
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S.
	// or Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Indicates destination chosen for the transaction. Possible values:
	// - 01- Ship to cardholder billing address
	// - 02- Ship to another verified address on file with merchant
	// - 03- Ship to address that is different than billing address
	// - 04- Ship to store (store address should be populated on request)
	// - 05- Digital goods
	// - 06- Travel and event tickets, not shipped
	// - 07- Other
	//
	DestinationCode int64 `json:"destinationCode,omitempty"`

	// Shipping destination of item. Example: Commercial, Residential, Store
	//
	// Max Length: 25
	DestinationTypes string `json:"destinationTypes,omitempty"`

	// First name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or
	// Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Shipping method for the product. Possible values:
	// - lowcost: Lowest-cost service
	// - sameday: Courier or same-day service
	// - oneday: Next-day or overnight service
	// - twoday: Two-day service
	// - threeday: Three-day service
	// - pickup: Store pick-up
	// - other: Other shipping method
	// - none: No shipping method because product is a service or subscription
	// Required for American Express SafeKey (U.S.).
	//
	// Max Length: 10
	Method string `json:"method,omitempty"`

	// Middle name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	MiddleName string `json:"middleName,omitempty"`

	// Phone number associated with the shipping address.
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// Required field for authorization if any shipping address information is included in the request and
	// shipping to the U.S. or Canada; otherwise, optional.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the
	// remaining value is longer than nine characters, the value is truncated starting from the right side.
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information ship to
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestinationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateAddress3(formats strfmt.Registry) error {
	if swag.IsZero(o.Address3) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address3", "body", o.Address3, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateDestinationTypes(formats strfmt.Registry) error {
	if swag.IsZero(o.DestinationTypes) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"destinationTypes", "body", o.DestinationTypes, 25); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"method", "body", o.Method, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"middleName", "body", o.MiddleName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body order information ship to based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails Contains shipping information not related to address.
swagger:model CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails
*/
type CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails struct {

	// Boolean that indicates whether the customer requested gift wrapping for this
	// purchase. This field can contain one of the following
	// values:
	// - true: The customer requested gift wrapping.
	// - false: The customer did not request gift wrapping.
	//
	GiftWrap bool `json:"giftWrap,omitempty"`

	// Shipping method for the product. Possible values:
	//
	//  - `lowcost`: Lowest-cost service
	//  - `sameday`: Courier or same-day service
	//  - `oneday`: Next-day or overnight service
	//  - `twoday`: Two-day service
	//  - `threeday`: Three-day service
	//  - `pickup`: Store pick-up
	//  - `other`: Other shipping method
	//  - `none`: No shipping method because product is a service or subscription
	//
	// Max Length: 10
	ShippingMethod string `json:"shippingMethod,omitempty"`
}

// Validate validates this create bundled decision manager case params body order information shipping details
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShippingMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails) validateShippingMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"orderInformation"+"."+"shippingDetails"+"."+"shippingMethod", "body", o.ShippingMethod, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body order information shipping details based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyOrderInformationShippingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformation Contains the payment data for this transaction.
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformation struct {

	// bank
	Bank *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank `json:"bank,omitempty"`

	// card
	Card *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer `json:"customer,omitempty"`

	// Method of payment used for the order. This field can contain one of the following values:
	//   - `consumer` (default): Customer credit card
	//   - `corporate`: Corporate credit card
	//   - `debit`: Debit card, such as a Maestro (UK Domestic) card
	//   - `cod`: Collect on delivery
	//   - `check`: Electronic check
	//   - `p2p`: Person-to-person payment
	//   - `private1`: Private label credit card
	//   - `other`: Other payment method
	//
	// Max Length: 10
	Method string `json:"method,omitempty"`

	// tokenized card
	TokenizedCard *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard `json:"tokenizedCard,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) validateBank(formats strfmt.Registry) error {
	if swag.IsZero(o.Bank) { // not required
		return nil
	}

	if o.Bank != nil {
		if err := o.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"method", "body", o.Method, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) validateTokenizedCard(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body payment information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) contextValidateBank(ctx context.Context, formats strfmt.Registry) error {

	if o.Bank != nil {

		if swag.IsZero(o.Bank) { // not required
			return nil
		}

		if err := o.Bank.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) contextValidateTokenizedCard(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedCard != nil {

		if swag.IsZero(o.TokenizedCard) { // not required
			return nil
		}

		if err := o.TokenizedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank create bundled decision manager case params body payment information bank
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank struct {

	// account
	Account *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount `json:"account,omitempty"`

	// Bank code of the consumer's account
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction.
	//
	// For all possible values, see the `bank_iban` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 50
	Iban string `json:"iban,omitempty"`

	// Bank routing number. This is also called the _transit number_.
	//
	// For details, see `ecp_rdfi` request field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 9
	RoutingNumber string `json:"routingNumber,omitempty"`

	// Bank's SWIFT code. You can use this field only when scoring a direct debit transaction.
	// Required only for crossborder transactions.
	//
	// For all possible values, see the `bank_swiftcode` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	SwiftCode string `json:"swiftCode,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information bank
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) validateIban(formats strfmt.Registry) error {
	if swag.IsZero(o.Iban) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"iban", "body", o.Iban, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) validateRoutingNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"routingNumber", "body", o.RoutingNumber, 9); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body payment information bank based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.Account != nil {

		if swag.IsZero(o.Account) { // not required
			return nil
		}

		if err := o.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount create bundled decision manager case params body payment information bank account
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount struct {

	// Image reference number associated with the check. You cannot include any special characters.
	//
	// Max Length: 32
	CheckImageReferenceNumber string `json:"checkImageReferenceNumber,omitempty"`

	// Check number.
	//
	// Chase Paymentech Solutions - Optional.
	// CyberSource ACH Service - Not used.
	// RBS WorldPay Atlanta - Optional on debits. Required on credits.
	// TeleCheck - Strongly recommended on debit requests. Optional on credits.
	//
	// Max Length: 8
	CheckNumber string `json:"checkNumber,omitempty"`

	// Identifier for the bank that provided the customer's encoded account number.
	//
	// To obtain the bank identifier, contact your processor.
	//
	// For details, see `account_encoder_id` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 3
	EncoderID string `json:"encoderId,omitempty"`

	// International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction.
	//
	// For all possible values, see the `bank_iban` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 50
	Iban string `json:"iban,omitempty"`

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Account type.
	//
	// Possible values:
	//  - **C**: Checking.
	//  - **G**: General ledger. This value is supported only on Wells Fargo ACH.
	//  - **S**: Savings (U.S. dollars only).
	//  - **X**: Corporate checking (U.S. dollars only).
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information bank account
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCheckImageReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCheckNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncoderID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateCheckImageReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.CheckImageReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"checkImageReferenceNumber", "body", o.CheckImageReferenceNumber, 32); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateCheckNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.CheckNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"checkNumber", "body", o.CheckNumber, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateEncoderID(formats strfmt.Registry) error {
	if swag.IsZero(o.EncoderID) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"encoderId", "body", o.EncoderID, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateIban(formats strfmt.Registry) error {
	if swag.IsZero(o.Iban) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"iban", "body", o.Iban, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"number", "body", o.Number, 17); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"type", "body", o.Type, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body payment information bank account based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformationBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard Use this for a non-tokenized payment card.
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard struct {

	// description: The BIN is the first six digits of the card's Primary Account Number (PAN).
	//
	// Max Length: 6
	Bin string `json:"bin,omitempty"`

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`. Leading 0 is required.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value
	// (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is
	// in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause
	// the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the payment card expires.
	//
	// Format: `YYYY`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// #### FDMS Nashville
	// Required. String (19)
	//
	// #### GPX
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1,4]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	// - '070': EFTPOS
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	// [^4]: For this card type, you must include the `paymentInformation.card.type` in your request for any payer authentication services.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information card
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) validateBin(formats strfmt.Registry) error {
	if swag.IsZero(o.Bin) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"card"+"."+"bin", "body", o.Bin, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", o.Number, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body payment information card based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer create bundled decision manager case params body payment information customer
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer's card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	CustomerID string `json:"customerId,omitempty"`

	// Unique identifier for the Customer token used in the transaction.
	// When you include this value in your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information customer
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body payment information customer based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard Use this object to submit a payment network token instead of card-based values.
swagger:model CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard
*/
type CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard struct {

	// One of two possible meanings:
	// - The two-digit month in which a token expires.
	// - The two-digit month in which a card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Samsung Pay and Apple Pay
	// Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// One of two possible meanings:
	// - The four-digit year in which a token expires.
	// - The four-digit year in which a card expires.
	// Format: `YYYY`
	// Possible values: `1900` through `3000`
	// Data type: Non-negative integer
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through
	// 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of
	// the year.
	//
	// #### Samsung Pay and Apple Pay
	// Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction
	// you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Customer's payment network token value.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it specifies the entity that
	// provided you with information about the token.
	//
	// Possible value:
	// - `2`: Near-field communication (NFC) transaction. The customer's mobile device provided the token data for a contactless EMV transaction. For recurring
	// transactions, use this value if the original transaction was a contactless EMV transaction.
	//
	// #### Visa Platform Connect
	// - `1`: For Rupay and In App tokenization. Example: InApp apple pay.
	// - `3`: Card/Credential On File Tokenization.
	//
	// **NOTE** No CyberSource through VisaNet acquirers support EMV at this time.
	//
	// Required field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
	//
	// #### Rupay
	// - `3`: Card/Credential On File Tokenization.
	// - `4`: Tokenizined Transaction. Should be used for Guest Checkout transactions with token.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1,4]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	// - '070': EFTPOS
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	// [^4]: For this card type, you must include the `paymentInformation.card.type` in your request for any payer authentication services.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### Google Pay transactions
	// For PAN-based Google Pay transactions, this field is returned in the API response.
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create bundled decision manager case params body payment information tokenized card
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"number", "body", o.Number, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"transactionType", "body", o.TransactionType, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body payment information tokenized card based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyPaymentInformationTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyProcessingInformation Decides whether to call Payer Authentication or Watchlist Screening service along with DM or not.
swagger:model CreateBundledDecisionManagerCaseParamsBodyProcessingInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyProcessingInformation struct {

	// - Use `CONSUMER_AUTHENTICATION` to use Payer Authentication along with Decision Manager. For any other value, only Decision Manager will run.
	// - Use `WATCHLIST_SCREENING`  when you want to call Watchlist Screening service.
	//
	ActionList []string `json:"actionList"`
}

// Validate validates this create bundled decision manager case params body processing information
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create bundled decision manager case params body processing information based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyProcessorInformation Contains information related to the payment processor.
swagger:model CreateBundledDecisionManagerCaseParamsBodyProcessorInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyProcessorInformation struct {

	// avs
	Avs *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs `json:"avs,omitempty"`

	// card verification
	CardVerification *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification `json:"cardVerification,omitempty"`
}

// Validate validates this create bundled decision manager case params body processor information
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) validateAvs(formats strfmt.Registry) error {
	if swag.IsZero(o.Avs) { // not required
		return nil
	}

	if o.Avs != nil {
		if err := o.Avs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) validateCardVerification(formats strfmt.Registry) error {
	if swag.IsZero(o.CardVerification) { // not required
		return nil
	}

	if o.CardVerification != nil {
		if err := o.CardVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "cardVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "cardVerification")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body processor information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCardVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) contextValidateAvs(ctx context.Context, formats strfmt.Registry) error {

	if o.Avs != nil {

		if swag.IsZero(o.Avs) { // not required
			return nil
		}

		if err := o.Avs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) contextValidateCardVerification(ctx context.Context, formats strfmt.Registry) error {

	if o.CardVerification != nil {

		if swag.IsZero(o.CardVerification) { // not required
			return nil
		}

		if err := o.CardVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "cardVerification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "processorInformation" + "." + "cardVerification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs Address Verification Service
swagger:model CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs
*/
type CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs struct {

	// Value returned for address verification from the Payments Authorization response.
	// Max Length: 3
	Code string `json:"code,omitempty"`
}

// Validate validates this create bundled decision manager case params body processor information avs
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"processorInformation"+"."+"avs"+"."+"code", "body", o.Code, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body processor information avs based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyProcessorInformationAvs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification create bundled decision manager case params body processor information card verification
swagger:model CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification
*/
type CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification struct {

	// CVN result code.
	//
	// For details, see the `auth_cv_result` reply field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Max Length: 1
	ResultCode string `json:"resultCode,omitempty"`
}

// Validate validates this create bundled decision manager case params body processor information card verification
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResultCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification) validateResultCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ResultCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"processorInformation"+"."+"cardVerification"+"."+"resultCode", "body", o.ResultCode, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body processor information card verification based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyProcessorInformationCardVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation This object contains recurring payment information.
swagger:model CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation struct {

	// Indicates recurring amount type agreed by the cardholder
	// Valid Values :
	// 1- Fixed amount recurring payment
	// 2- Recurring payment with maximum amount
	//
	// Max Length: 1
	AmountType string `json:"amountType,omitempty"`

	// The date after which no further recurring authorizations should be performed. Format: `YYYY-MM-DD`
	// **Note** This field is required for recurring transactions.
	//
	// Max Length: 10
	EndDate string `json:"endDate,omitempty"`

	// Integer value indicating the minimum number of days between recurring authorizations. A frequency
	// of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.
	//
	// Example: 6 months = 168
	//
	// Example values accepted (31 days):
	// - 31
	// - 031
	// - 0031
	//
	// **Note** This field is required for recurring transactions.
	//
	Frequency int64 `json:"frequency,omitempty"`

	// This API field will contain the maximum amount agreed to by the cardholder. The currency of this amount
	// will be specified in Field 49—Currency Code,Transaction.
	//
	// Max Length: 12
	MaximumAmount string `json:"maximumAmount,omitempty"`

	// Total number of payments for the duration of the recurring subscription.
	//
	NumberOfPayments int64 `json:"numberOfPayments,omitempty"`

	// This value indicates how often a recurring payment occurs.
	// Valid Values :
	// • 01 (Daily)
	// • 02 (Twice weekly)
	// • 03 (Weekly)
	// • 04 (Ten days)
	// • 05 (Fortnightly)
	// • 06 (Monthly)
	// • 07 (Every two months)
	// • 08 (Trimester)
	// • 09 (Quarterly)
	// • 10 (Twice yearly)
	// • 11 (Annually)
	// • 12 (Unscheduled)
	//
	// Max Length: 2
	Occurrence string `json:"occurrence,omitempty"`

	// Date of original purchase. Required for recurring transactions.
	// Format: `YYYY-MM-DDTHH:MM:SSZ`
	// **Note**: If this field is empty, the current date is used.
	//
	// Max Length: 17
	OriginalPurchaseDate string `json:"originalPurchaseDate,omitempty"`

	// This will contain a unique reference number for the recurring payment transaction.
	//
	// Max Length: 35
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// This field is mandatory for Cartes Bancaires recurring transactions on Credit Mutuel-CIC.
	// This field records recurring sequence, e.g. 1st for initial,  2 for subsequent, 3 etc
	//
	SequenceNumber int64 `json:"sequenceNumber,omitempty"`

	// This contains the type of recurring payment.
	// Valid Values :
	// 1 - Registration/First transaction
	// 2 - Subsequent transaction
	// 3 - Modification
	// 4 - Cancellation
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`

	// This tag will contain a value that indicates whether or not the recurring payment transaction has been validated.
	// Valid values :
	// 0- Not validated
	// 1- Validated
	//
	// Max Length: 1
	ValidationIndicator string `json:"validationIndicator,omitempty"`
}

// Validate validates this create bundled decision manager case params body recurring payment information
func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaximumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginalPurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValidationIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateAmountType(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"amountType", "body", o.AmountType, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(o.EndDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"endDate", "body", o.EndDate, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateMaximumAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.MaximumAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"maximumAmount", "body", o.MaximumAmount, 12); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(o.Occurrence) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"occurrence", "body", o.Occurrence, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateOriginalPurchaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginalPurchaseDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"originalPurchaseDate", "body", o.OriginalPurchaseDate, 17); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.ReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"referenceNumber", "body", o.ReferenceNumber, 35); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"type", "body", o.Type, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) validateValidationIndicator(formats strfmt.Registry) error {
	if swag.IsZero(o.ValidationIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"recurringPaymentInformation"+"."+"validationIndicator", "body", o.ValidationIndicator, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body recurring payment information based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRecurringPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformation create bundled decision manager case params body risk information
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformation struct {

	// auxiliary data
	AuxiliaryData []*CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0 `json:"auxiliaryData"`

	// buyer history
	BuyerHistory *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory `json:"buyerHistory,omitempty"`

	// Specifies one of the following types of events:
	// - login
	// - account_creation
	// - account_update
	// For regular payment transactions, do not send this field.
	//
	// Max Length: 255
	EventType string `json:"eventType,omitempty"`

	// profile
	Profile *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile `json:"profile,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuxiliaryData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) validateAuxiliaryData(formats strfmt.Registry) error {
	if swag.IsZero(o.AuxiliaryData) { // not required
		return nil
	}

	for i := 0; i < len(o.AuxiliaryData); i++ {
		if swag.IsZero(o.AuxiliaryData[i]) { // not required
			continue
		}

		if o.AuxiliaryData[i] != nil {
			if err := o.AuxiliaryData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "auxiliaryData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "auxiliaryData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) validateBuyerHistory(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerHistory) { // not required
		return nil
	}

	if o.BuyerHistory != nil {
		if err := o.BuyerHistory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(o.EventType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"eventType", "body", o.EventType, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body risk information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuxiliaryData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBuyerHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) contextValidateAuxiliaryData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AuxiliaryData); i++ {

		if o.AuxiliaryData[i] != nil {

			if swag.IsZero(o.AuxiliaryData[i]) { // not required
				return nil
			}

			if err := o.AuxiliaryData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "auxiliaryData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "auxiliaryData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) contextValidateBuyerHistory(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerHistory != nil {

		if swag.IsZero(o.BuyerHistory) { // not required
			return nil
		}

		if err := o.BuyerHistory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.Profile != nil {

		if swag.IsZero(o.Profile) { // not required
			return nil
		}

		if err := o.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0 Contains auxiliary key-value pairs.
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0 struct {

	// Fields that you can use to send additional data to Risk services.
	// **Warning** Auxiliary fields are not intended to and MUST NOT
	// be used to capture personally identifying information.
	// Accordingly, merchants are prohibited from capturing,
	// obtaining, and/or transmitting any personally identifying
	// information in or via the auxiliary data fields. Personally
	// identifying information includes, but is not limited to,
	// address, credit card number, social security number,
	// driver's license number, state-issued identification
	// number, passport number, and card verification numbers
	// (CVV, CVC2, CVV2, CID, CVN). In the event CyberSource
	// discovers that a merchant is capturing and/or transmitting
	// personally identifying information via the auxiliary data
	// fields, whether or not intentionally, CyberSource WILL
	// immediately suspend the merchant's account, which will
	// result in a rejection of any and all transaction requests
	// submitted by the merchant after the point of suspension.
	//
	// Max Length: 255
	Key string `json:"key,omitempty"`

	// String value for the key
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information auxiliary data items0
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("key", "body", o.Key, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", o.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body risk information auxiliary data items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformationAuxiliaryDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory create bundled decision manager case params body risk information buyer history
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory struct {

	// account history
	AccountHistory *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory `json:"accountHistory,omitempty"`

	// Number of purchases with this cardholder account during the previous six months.
	// Recommended for Discover ProtectBuy.
	//
	AccountPurchases int64 `json:"accountPurchases,omitempty"`

	// Number of add card attempts in the last 24 hours.
	// Recommended for Discover ProtectBuy.
	//
	AddCardAttempts int64 `json:"addCardAttempts,omitempty"`

	// customer account
	CustomerAccount *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount `json:"customerAccount,omitempty"`

	// Date applicable only for PAYMENT_ACCOUNT_EXISTS in paymentAccountHistory
	//
	PaymentAccountDate int64 `json:"paymentAccountDate,omitempty"`

	// This only applies for NEW_ACCOUNT and EXISTING_ACCOUNT in creationHistory. Possible values are:
	// - PAYMENT_ACCOUNT_EXISTS
	// - PAYMENT_ACCOUNT_ADDED_NOW
	//
	PaymentAccountHistory string `json:"paymentAccountHistory,omitempty"`

	// Indicates whether the merchant experienced suspicious activity (including previous fraud) on the account.
	// Recommended for Discover ProtectBuy.
	//
	PriorSuspiciousActivity bool `json:"priorSuspiciousActivity,omitempty"`

	// Number of transaction (successful or abandoned) for this cardholder account within the last 24 hours.
	// Recommended for Discover ProtectBuy.
	//
	TransactionCountDay int64 `json:"transactionCountDay,omitempty"`

	// Number of transaction (successful or abandoned) for this cardholder account within the last year.
	// Recommended for Discover ProtectBuy.
	//
	TransactionCountYear int64 `json:"transactionCountYear,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information buyer history
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) validateAccountHistory(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountHistory) { // not required
		return nil
	}

	if o.AccountHistory != nil {
		if err := o.AccountHistory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "accountHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "accountHistory")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) validateCustomerAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerAccount) { // not required
		return nil
	}

	if o.CustomerAccount != nil {
		if err := o.CustomerAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "customerAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "customerAccount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body risk information buyer history based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccountHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomerAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) contextValidateAccountHistory(ctx context.Context, formats strfmt.Registry) error {

	if o.AccountHistory != nil {

		if swag.IsZero(o.AccountHistory) { // not required
			return nil
		}

		if err := o.AccountHistory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "accountHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "accountHistory")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) contextValidateCustomerAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.CustomerAccount != nil {

		if swag.IsZero(o.CustomerAccount) { // not required
			return nil
		}

		if err := o.CustomerAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "customerAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "riskInformation" + "." + "buyerHistory" + "." + "customerAccount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory create bundled decision manager case params body risk information buyer history account history
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory struct {

	// Applicable when this is not a guest account.
	//
	FirstUseOfShippingAddress bool `json:"firstUseOfShippingAddress,omitempty"`

	// Date when the shipping address for this transaction was first used.
	// Recommended for Discover ProtectBuy.
	// If `firstUseOfShippingAddress` is false and not a guest account, then this date is entered.
	//
	// Max Length: 10
	ShippingAddressUsageDate string `json:"shippingAddressUsageDate,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information buyer history account history
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShippingAddressUsageDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory) validateShippingAddressUsageDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingAddressUsageDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"buyerHistory"+"."+"accountHistory"+"."+"shippingAddressUsageDate", "body", o.ShippingAddressUsageDate, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body risk information buyer history account history based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryAccountHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount create bundled decision manager case params body risk information buyer history customer account
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount struct {

	// Date the cardholder opened the account.
	// Recommended for Discover ProtectBuy.
	// This only applies for EXISTING_ACCOUNT in creationHistory.
	//
	// Max Length: 10
	CreateDate string `json:"createDate,omitempty"`

	// The values from the enum can be:
	// - GUEST
	// - NEW_ACCOUNT
	// - EXISTING_ACCOUNT
	//
	CreationHistory string `json:"creationHistory,omitempty"`

	// Date the cardholder's account was last changed.
	// This includes changes to the billing or shipping address, new payment accounts or new users added.
	// Recommended for Discover ProtectBuy.
	//
	// Max Length: 10
	LastChangeDate string `json:"lastChangeDate,omitempty"`

	// This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values:
	// - ACCOUNT_UPDATED_NOW
	// - ACCOUNT_UPDATED_PAST
	//
	ModificationHistory string `json:"modificationHistory,omitempty"`

	// Date the cardholder last changed or reset password on account.
	// Recommended for Discover ProtectBuy.
	// This only applies for PASSWORD_CHANGED_PAST in passwordHistory.
	//
	// Max Length: 10
	PasswordChangeDate string `json:"passwordChangeDate,omitempty"`

	// This only applies for EXISTING_ACCOUNT in creationHistory.
	// The values from the enum can be:
	// - PASSWORD_CHANGED_NOW
	// - PASSWORD_CHANGED_PAST
	// - PASSWORD_NEVER_CHANGED
	//
	PasswordHistory string `json:"passwordHistory,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information buyer history customer account
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasswordChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) validateCreateDate(formats strfmt.Registry) error {
	if swag.IsZero(o.CreateDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"buyerHistory"+"."+"customerAccount"+"."+"createDate", "body", o.CreateDate, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) validateLastChangeDate(formats strfmt.Registry) error {
	if swag.IsZero(o.LastChangeDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"buyerHistory"+"."+"customerAccount"+"."+"lastChangeDate", "body", o.LastChangeDate, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) validatePasswordChangeDate(formats strfmt.Registry) error {
	if swag.IsZero(o.PasswordChangeDate) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"buyerHistory"+"."+"customerAccount"+"."+"passwordChangeDate", "body", o.PasswordChangeDate, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body risk information buyer history customer account based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformationBuyerHistoryCustomerAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile Identifies a risk profile.
swagger:model CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile
*/
type CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile struct {

	// Name of the active profile chosen by the profile selector. If no profile selector exists,
	// the default active profile is chosen.
	//
	// **Note** By default, your default profile is the active profile, or the Profile Selector chooses the active profile. Use this field
	// only if you want to specify the name of a different profile. The passed-in profile will then become the active profile.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`
}

// Validate validates this create bundled decision manager case params body risk information profile
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"riskInformation"+"."+"profile"+"."+"name", "body", o.Name, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body risk information profile based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyRiskInformationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyTokenInformation create bundled decision manager case params body token information
swagger:model CreateBundledDecisionManagerCaseParamsBodyTokenInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyTokenInformation struct {

	// TMS Transient Token, 64 hexadecimal id value representing captured payment credentials (including Sensitive Authentication Data, e.g. CVV).
	//
	// Max Length: 64
	Jti string `json:"jti,omitempty"`
}

// Validate validates this create bundled decision manager case params body token information
func (o *CreateBundledDecisionManagerCaseParamsBodyTokenInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateJti(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTokenInformation) validateJti(formats strfmt.Registry) error {
	if swag.IsZero(o.Jti) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"tokenInformation"+"."+"jti", "body", o.Jti, 64); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body token information based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyTokenInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTokenInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTokenInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyTokenInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyTravelInformation create bundled decision manager case params body travel information
swagger:model CreateBundledDecisionManagerCaseParamsBodyTravelInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyTravelInformation struct {

	// IATA Code for the actual final destination that the customer intends to travel to.
	// It should be a destination on the completeRoute.
	//
	// Max Length: 3
	ActualFinalDestination string `json:"actualFinalDestination,omitempty"`

	// Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for
	// example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search.
	// Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you
	// send all the fields, the value of _complete_route takes precedence over that of the _leg# fields.
	//
	// Max Length: 255
	CompleteRoute string `json:"completeRoute,omitempty"`

	// Departure date and time of the first leg of the trip. Use one of the following formats:
	//   - yyyy-MM-dd HH:mm z
	//   - yyyy-MM-dd hh:mm a z
	//   - yyyy-MM-dd hh:mma z
	//   HH = hour in 24-hour format
	//   hh = hour in 12-hour format
	//   a = am or pm (case insensitive)
	//   z = time zone of the departing flight, for example: If the
	//   airline is based in city A, but the flight departs from city
	//   B, z is the time zone of city B at the time of departure.
	// Important For travel information, use GMT instead of UTC, or use the local time zone.
	// Examples
	// 2011-03-20 11:30 PM PDT
	// 2011-03-20 11:30pm GMT
	// 2011-03-20 11:30pm GMT-05:00
	// Eastern Standard Time: GMT-05:00 or EST
	// Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no
	// spaces between the time zone and the offset.
	//
	// Max Length: 25
	DepartureTime string `json:"departureTime,omitempty"`

	// Type of travel, for example one way or round trip.
	// Max Length: 32
	JourneyType string `json:"journeyType,omitempty"`

	// legs
	Legs []*CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0 `json:"legs"`

	// Number of passengers for whom the ticket was issued.
	// If you do not include this field in your request, CyberSource uses a default value of 1.
	// Required for American Express SafeKey (U.S.) for travel-related requests.
	//
	NumberOfPassengers int64 `json:"numberOfPassengers,omitempty"`

	// passengers
	Passengers []*CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0 `json:"passengers"`
}

// Validate validates this create bundled decision manager case params body travel information
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActualFinalDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompleteRoute(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDepartureTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateJourneyType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassengers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validateActualFinalDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.ActualFinalDestination) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"travelInformation"+"."+"actualFinalDestination", "body", o.ActualFinalDestination, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validateCompleteRoute(formats strfmt.Registry) error {
	if swag.IsZero(o.CompleteRoute) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"travelInformation"+"."+"completeRoute", "body", o.CompleteRoute, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validateDepartureTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DepartureTime) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"travelInformation"+"."+"departureTime", "body", o.DepartureTime, 25); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validateJourneyType(formats strfmt.Registry) error {
	if swag.IsZero(o.JourneyType) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"travelInformation"+"."+"journeyType", "body", o.JourneyType, 32); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validateLegs(formats strfmt.Registry) error {
	if swag.IsZero(o.Legs) { // not required
		return nil
	}

	for i := 0; i < len(o.Legs); i++ {
		if swag.IsZero(o.Legs[i]) { // not required
			continue
		}

		if o.Legs[i] != nil {
			if err := o.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) validatePassengers(formats strfmt.Registry) error {
	if swag.IsZero(o.Passengers) { // not required
		return nil
	}

	for i := 0; i < len(o.Passengers); i++ {
		if swag.IsZero(o.Passengers[i]) { // not required
			continue
		}

		if o.Passengers[i] != nil {
			if err := o.Passengers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "passengers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "passengers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body travel information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLegs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePassengers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) contextValidateLegs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Legs); i++ {

		if o.Legs[i] != nil {

			if swag.IsZero(o.Legs[i]) { // not required
				return nil
			}

			if err := o.Legs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) contextValidatePassengers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Passengers); i++ {

		if o.Passengers[i] != nil {

			if swag.IsZero(o.Passengers[i]) { // not required
				return nil
			}

			if err := o.Passengers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "passengers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "travelInformation" + "." + "passengers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyTravelInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0 create bundled decision manager case params body travel information legs items0
swagger:model CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0 struct {

	// International Air Transport Association (IATA) code for the carrier for this leg of the trip.
	// Required for each leg.
	// Required for American Express SafeKey (U.S.) for travel-related requests.
	//
	// Max Length: 2
	CarrierCode string `json:"carrierCode,omitempty"`

	// Departure date for the first leg of the trip. Format: YYYYMMDD.
	// Required for American Express SafeKey (U.S.) for travel-related requests.
	//
	DepartureDate string `json:"departureDate,omitempty"`

	// Use to specify the airport code for the destination of the leg of the trip, which is designated by the pound (#)
	// symbol in the field name. This code is usually three digits long, for example: SFO = San Francisco. Do not use the
	// colon (:) or the dash (-). For airport codes, see [IATA Airline and Airport Code Search](https://www.iata.org/publications/Pages/code-search.aspx). The leg number can be a
	// positive integer from 0 to N.
	// For example:
	//
	// `travelInformation.legs.0.destination=SFO`
	// `travelInformation.legs.1.destination=SFO`
	//
	// **Note** In your request, send either the complete route or the individual legs (`legs.0.origination` and `legs.n.destination`). If you
	// send all the fields, the complete route takes precedence over the individual legs.
	//
	// For details, see the `decision_manager_travel_leg#_dest` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 3
	Destination string `json:"destination,omitempty"`

	// Use to specify the airport code for the origin of the leg of the trip, which is designated by the pound (#)
	// symbol in the field name. This code is usually three digits long, for example: SFO = San Francisco.
	// Do not use the colon (:) or the dash (-). For airport codes, see the IATA Airline and Airport Code Search.
	// The leg number can be a positive integer from 0 to N.
	// For example:
	// `travelInformation.legs.0.origination=SFO`
	// `travelInformation.legs.1.origination=SFO`
	//
	// **Note** In your request, send either the complete route or the individual legs (`legs.0.origination` and `legs.n.destination`). If you
	// send all the fields, the complete route takes precedence over the individual legs.
	//
	// For details, see the `decision_manager_travel_leg#_orig` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// Max Length: 3
	Origination string `json:"origination,omitempty"`
}

// Validate validates this create bundled decision manager case params body travel information legs items0
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrigination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) validateCarrierCode(formats strfmt.Registry) error {
	if swag.IsZero(o.CarrierCode) { // not required
		return nil
	}

	if err := validate.MaxLength("carrierCode", "body", o.CarrierCode, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.Destination) { // not required
		return nil
	}

	if err := validate.MaxLength("destination", "body", o.Destination, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) validateOrigination(formats strfmt.Registry) error {
	if swag.IsZero(o.Origination) { // not required
		return nil
	}

	if err := validate.MaxLength("origination", "body", o.Origination, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body travel information legs items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyTravelInformationLegsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0 create bundled decision manager case params body travel information passengers items0
swagger:model CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0
*/
type CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0 struct {

	// First name of the passenger to whom the ticket was issued.
	// If there are multiple passengers, include all listed on the ticket.
	// Do not include special characters such as commas, hyphens, or apostrophes.
	// Only ASCII characters are supported.
	// Required for American Express SafeKey (U.S.) for travel-related requests.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the passenger to whom the ticket was issued.
	// If there are multiple passengers, include all listed on the ticket.
	// Do not include special characters such as commas, hyphens, or apostrophes.
	// Only ASCII characters are supported.
	// Required for American Express SafeKey (U.S.) for travel-related requests.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`
}

// Validate validates this create bundled decision manager case params body travel information passengers items0
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body travel information passengers items0 based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyTravelInformationPassengersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation create bundled decision manager case params body watchlist screening information
swagger:model CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation
*/
type CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation struct {

	// Parts of the customer's information that must match with an entry in the DPL (denied parties list)
	// before a match occurs. This field can contain one of the following values:
	// - AND: (default) The customer's name or company and the customer's address must appear in the database.
	// - OR: The customer's name must appear in the database.
	// - IGNORE: You want the service to detect a match only of the customer's name or company but not of the address.
	//
	AddressOperator string `json:"addressOperator,omitempty"`

	// Indicates whether the transaction should proceed if there is a match.
	// Possible values:
	// - `true`: Transaction proceeds even when match is found in the Denied Parties List. The match is noted in the response.
	// - `false`: Normal watchlist screening behavior occurs. (Transaction stops if a match to DPL occurs. Transaction proceeds if no match.)
	//
	ProceedOnMatch bool `json:"proceedOnMatch,omitempty"`

	// Use this field to specify which list(s) you want checked with the request.
	// The reply will include the list name as well as the response data.
	// To check against multiple lists, enter multiple list codes separated by a caret (^).
	// For more information, see "Restricted and Denied Parties List," page 68.
	//
	SanctionLists []string `json:"sanctionLists"`

	// weights
	Weights *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights `json:"weights,omitempty"`
}

// Validate validates this create bundled decision manager case params body watchlist screening information
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSanctionLists(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWeights(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) validateSanctionLists(formats strfmt.Registry) error {
	if swag.IsZero(o.SanctionLists) { // not required
		return nil
	}

	for i := 0; i < len(o.SanctionLists); i++ {

		if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"watchlistScreeningInformation"+"."+"sanctionLists"+"."+strconv.Itoa(i), "body", o.SanctionLists[i], 255); err != nil {
			return err
		}

	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) validateWeights(formats strfmt.Registry) error {
	if swag.IsZero(o.Weights) { // not required
		return nil
	}

	if o.Weights != nil {
		if err := o.Weights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation" + "." + "weights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation" + "." + "weights")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create bundled decision manager case params body watchlist screening information based on the context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWeights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) contextValidateWeights(ctx context.Context, formats strfmt.Registry) error {

	if o.Weights != nil {

		if swag.IsZero(o.Weights) { // not required
			return nil
		}

		if err := o.Weights.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation" + "." + "weights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createBundledDecisionManagerCaseRequest" + "." + "watchlistScreeningInformation" + "." + "weights")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights create bundled decision manager case params body watchlist screening information weights
swagger:model CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights
*/
type CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights struct {

	// Degree of correlation between a customer's address and an entry in the DPL
	// before a match occurs. This field can contain one of the following values:
	// - exact: The address must be identical to the entry in the DPL.
	// - high: (default) The address cannot differ significantly from the entry in the DPL.
	// - medium: The address can differ slightly more from the entry in the DPL.
	// - low: The address can differ significantly from the entry in the DPL.
	//
	// Max Length: 6
	Address string `json:"address,omitempty"`

	// Degree of correlation between a company address and an entry in the DPL
	// before a match occurs. This field can contain one of the following values:
	// - exact: The company name must be identical to the entry in the DPL.
	// - high: (default) The company name cannot differ significantly from the entry in the DPL.
	// - medium: The company name can differ slightly more from the entry in the DPL.
	// - low: The company name can differ significantly from the entry in the DPL.
	//
	// Max Length: 6
	Company string `json:"company,omitempty"`

	// Degree of correlation between a customer's name and an entry in the DPL
	// before a match occurs. This field can contain one of the following values:
	// - exact: The name must be identical to the entry in the DPL.
	// - high: (default) The name cannot differ significantly from the entry in the DPL.
	// - medium: The name can differ slightly more from the entry in the DPL.
	// - low: The name can differ significantly the entry in the DPL.
	//
	// Max Length: 6
	Name string `json:"name,omitempty"`
}

// Validate validates this create bundled decision manager case params body watchlist screening information weights
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.Address) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"watchlistScreeningInformation"+"."+"weights"+"."+"address", "body", o.Address, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) validateCompany(formats strfmt.Registry) error {
	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"watchlistScreeningInformation"+"."+"weights"+"."+"company", "body", o.Company, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createBundledDecisionManagerCaseRequest"+"."+"watchlistScreeningInformation"+"."+"weights"+"."+"name", "body", o.Name, 6); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bundled decision manager case params body watchlist screening information weights based on context it is used
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights) UnmarshalBinary(b []byte) error {
	var res CreateBundledDecisionManagerCaseParamsBodyWatchlistScreeningInformationWeights
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
