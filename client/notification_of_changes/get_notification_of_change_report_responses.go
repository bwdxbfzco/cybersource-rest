// Code generated by go-swagger; DO NOT EDIT.

package notification_of_changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNotificationOfChangeReportReader is a Reader for the GetNotificationOfChangeReport structure.
type GetNotificationOfChangeReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationOfChangeReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationOfChangeReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNotificationOfChangeReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNotificationOfChangeReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNotificationOfChangeReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNotificationOfChangeReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reporting/v3/notification-of-changes] getNotificationOfChangeReport", response, response.Code())
	}
}

// NewGetNotificationOfChangeReportOK creates a GetNotificationOfChangeReportOK with default headers values
func NewGetNotificationOfChangeReportOK() *GetNotificationOfChangeReportOK {
	return &GetNotificationOfChangeReportOK{}
}

/*
GetNotificationOfChangeReportOK describes a response with status code 200, with default header values.

Ok
*/
type GetNotificationOfChangeReportOK struct {
	Payload *GetNotificationOfChangeReportOKBody
}

// IsSuccess returns true when this get notification of change report o k response has a 2xx status code
func (o *GetNotificationOfChangeReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get notification of change report o k response has a 3xx status code
func (o *GetNotificationOfChangeReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification of change report o k response has a 4xx status code
func (o *GetNotificationOfChangeReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification of change report o k response has a 5xx status code
func (o *GetNotificationOfChangeReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification of change report o k response a status code equal to that given
func (o *GetNotificationOfChangeReportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get notification of change report o k response
func (o *GetNotificationOfChangeReportOK) Code() int {
	return 200
}

func (o *GetNotificationOfChangeReportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportOK %s", 200, payload)
}

func (o *GetNotificationOfChangeReportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportOK %s", 200, payload)
}

func (o *GetNotificationOfChangeReportOK) GetPayload() *GetNotificationOfChangeReportOKBody {
	return o.Payload
}

func (o *GetNotificationOfChangeReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationOfChangeReportOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationOfChangeReportBadRequest creates a GetNotificationOfChangeReportBadRequest with default headers values
func NewGetNotificationOfChangeReportBadRequest() *GetNotificationOfChangeReportBadRequest {
	return &GetNotificationOfChangeReportBadRequest{}
}

/*
GetNotificationOfChangeReportBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type GetNotificationOfChangeReportBadRequest struct {
	Payload *GetNotificationOfChangeReportBadRequestBody
}

// IsSuccess returns true when this get notification of change report bad request response has a 2xx status code
func (o *GetNotificationOfChangeReportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification of change report bad request response has a 3xx status code
func (o *GetNotificationOfChangeReportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification of change report bad request response has a 4xx status code
func (o *GetNotificationOfChangeReportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification of change report bad request response has a 5xx status code
func (o *GetNotificationOfChangeReportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification of change report bad request response a status code equal to that given
func (o *GetNotificationOfChangeReportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get notification of change report bad request response
func (o *GetNotificationOfChangeReportBadRequest) Code() int {
	return 400
}

func (o *GetNotificationOfChangeReportBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportBadRequest %s", 400, payload)
}

func (o *GetNotificationOfChangeReportBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportBadRequest %s", 400, payload)
}

func (o *GetNotificationOfChangeReportBadRequest) GetPayload() *GetNotificationOfChangeReportBadRequestBody {
	return o.Payload
}

func (o *GetNotificationOfChangeReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationOfChangeReportBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationOfChangeReportUnauthorized creates a GetNotificationOfChangeReportUnauthorized with default headers values
func NewGetNotificationOfChangeReportUnauthorized() *GetNotificationOfChangeReportUnauthorized {
	return &GetNotificationOfChangeReportUnauthorized{}
}

/*
GetNotificationOfChangeReportUnauthorized describes a response with status code 401, with default header values.

Unauthorized. Token provided is no more valid.
*/
type GetNotificationOfChangeReportUnauthorized struct {
}

// IsSuccess returns true when this get notification of change report unauthorized response has a 2xx status code
func (o *GetNotificationOfChangeReportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification of change report unauthorized response has a 3xx status code
func (o *GetNotificationOfChangeReportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification of change report unauthorized response has a 4xx status code
func (o *GetNotificationOfChangeReportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification of change report unauthorized response has a 5xx status code
func (o *GetNotificationOfChangeReportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification of change report unauthorized response a status code equal to that given
func (o *GetNotificationOfChangeReportUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get notification of change report unauthorized response
func (o *GetNotificationOfChangeReportUnauthorized) Code() int {
	return 401
}

func (o *GetNotificationOfChangeReportUnauthorized) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportUnauthorized", 401)
}

func (o *GetNotificationOfChangeReportUnauthorized) String() string {
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportUnauthorized", 401)
}

func (o *GetNotificationOfChangeReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNotificationOfChangeReportNotFound creates a GetNotificationOfChangeReportNotFound with default headers values
func NewGetNotificationOfChangeReportNotFound() *GetNotificationOfChangeReportNotFound {
	return &GetNotificationOfChangeReportNotFound{}
}

/*
GetNotificationOfChangeReportNotFound describes a response with status code 404, with default header values.

Report not found
*/
type GetNotificationOfChangeReportNotFound struct {
	Payload *GetNotificationOfChangeReportNotFoundBody
}

// IsSuccess returns true when this get notification of change report not found response has a 2xx status code
func (o *GetNotificationOfChangeReportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification of change report not found response has a 3xx status code
func (o *GetNotificationOfChangeReportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification of change report not found response has a 4xx status code
func (o *GetNotificationOfChangeReportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification of change report not found response has a 5xx status code
func (o *GetNotificationOfChangeReportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification of change report not found response a status code equal to that given
func (o *GetNotificationOfChangeReportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get notification of change report not found response
func (o *GetNotificationOfChangeReportNotFound) Code() int {
	return 404
}

func (o *GetNotificationOfChangeReportNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportNotFound %s", 404, payload)
}

func (o *GetNotificationOfChangeReportNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportNotFound %s", 404, payload)
}

func (o *GetNotificationOfChangeReportNotFound) GetPayload() *GetNotificationOfChangeReportNotFoundBody {
	return o.Payload
}

func (o *GetNotificationOfChangeReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationOfChangeReportNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationOfChangeReportInternalServerError creates a GetNotificationOfChangeReportInternalServerError with default headers values
func NewGetNotificationOfChangeReportInternalServerError() *GetNotificationOfChangeReportInternalServerError {
	return &GetNotificationOfChangeReportInternalServerError{}
}

/*
GetNotificationOfChangeReportInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetNotificationOfChangeReportInternalServerError struct {
	Payload *GetNotificationOfChangeReportInternalServerErrorBody
}

// IsSuccess returns true when this get notification of change report internal server error response has a 2xx status code
func (o *GetNotificationOfChangeReportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification of change report internal server error response has a 3xx status code
func (o *GetNotificationOfChangeReportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification of change report internal server error response has a 4xx status code
func (o *GetNotificationOfChangeReportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification of change report internal server error response has a 5xx status code
func (o *GetNotificationOfChangeReportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get notification of change report internal server error response a status code equal to that given
func (o *GetNotificationOfChangeReportInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get notification of change report internal server error response
func (o *GetNotificationOfChangeReportInternalServerError) Code() int {
	return 500
}

func (o *GetNotificationOfChangeReportInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportInternalServerError %s", 500, payload)
}

func (o *GetNotificationOfChangeReportInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/notification-of-changes][%d] getNotificationOfChangeReportInternalServerError %s", 500, payload)
}

func (o *GetNotificationOfChangeReportInternalServerError) GetPayload() *GetNotificationOfChangeReportInternalServerErrorBody {
	return o.Payload
}

func (o *GetNotificationOfChangeReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationOfChangeReportInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNotificationOfChangeReportBadRequestBody reportingV3NotificationofChangesGet400Response
//
// HTTP status code for client application
swagger:model GetNotificationOfChangeReportBadRequestBody
*/
type GetNotificationOfChangeReportBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetNotificationOfChangeReportBadRequestBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get notification of change report bad request body
func (o *GetNotificationOfChangeReportBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNotificationOfChangeReportBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getNotificationOfChangeReportBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get notification of change report bad request body based on the context it is used
func (o *GetNotificationOfChangeReportBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportBadRequestBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetNotificationOfChangeReportBadRequestBodyDetailsItems0
*/
type GetNotificationOfChangeReportBadRequestBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get notification of change report bad request body details items0
func (o *GetNotificationOfChangeReportBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get notification of change report bad request body details items0 based on context it is used
func (o *GetNotificationOfChangeReportBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportInternalServerErrorBody reportingV3NotificationofChangesGet500Response
//
// HTTP status code for client application
swagger:model GetNotificationOfChangeReportInternalServerErrorBody
*/
type GetNotificationOfChangeReportInternalServerErrorBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get notification of change report internal server error body
func (o *GetNotificationOfChangeReportInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportInternalServerErrorBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportInternalServerError"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNotificationOfChangeReportInternalServerErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportInternalServerError"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportInternalServerErrorBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportInternalServerError"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportInternalServerErrorBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportInternalServerError"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getNotificationOfChangeReportInternalServerError"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get notification of change report internal server error body based on the context it is used
func (o *GetNotificationOfChangeReportInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportInternalServerErrorBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportInternalServerError" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0
*/
type GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get notification of change report internal server error body details items0
func (o *GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get notification of change report internal server error body details items0 based on context it is used
func (o *GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportInternalServerErrorBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportNotFoundBody reportingV3NotificationofChangesGet404Response
//
// HTTP status code for client application
swagger:model GetNotificationOfChangeReportNotFoundBody
*/
type GetNotificationOfChangeReportNotFoundBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetNotificationOfChangeReportNotFoundBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get notification of change report not found body
func (o *GetNotificationOfChangeReportNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportNotFoundBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportNotFound"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNotificationOfChangeReportNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportNotFoundBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportNotFound"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetNotificationOfChangeReportNotFoundBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationOfChangeReportNotFound"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getNotificationOfChangeReportNotFound"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get notification of change report not found body based on the context it is used
func (o *GetNotificationOfChangeReportNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportNotFoundBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportNotFoundBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetNotificationOfChangeReportNotFoundBodyDetailsItems0
*/
type GetNotificationOfChangeReportNotFoundBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get notification of change report not found body details items0
func (o *GetNotificationOfChangeReportNotFoundBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get notification of change report not found body details items0 based on context it is used
func (o *GetNotificationOfChangeReportNotFoundBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportNotFoundBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportNotFoundBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportNotFoundBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportOKBody reportingV3NotificationofChangesGet200Response
swagger:model GetNotificationOfChangeReportOKBody
*/
type GetNotificationOfChangeReportOKBody struct {

	// List of Notification Of Change Info values
	NotificationOfChanges []*GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0 `json:"notificationOfChanges"`
}

// Validate validates this get notification of change report o k body
func (o *GetNotificationOfChangeReportOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNotificationOfChanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportOKBody) validateNotificationOfChanges(formats strfmt.Registry) error {
	if swag.IsZero(o.NotificationOfChanges) { // not required
		return nil
	}

	for i := 0; i < len(o.NotificationOfChanges); i++ {
		if swag.IsZero(o.NotificationOfChanges[i]) { // not required
			continue
		}

		if o.NotificationOfChanges[i] != nil {
			if err := o.NotificationOfChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportOK" + "." + "notificationOfChanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportOK" + "." + "notificationOfChanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get notification of change report o k body based on the context it is used
func (o *GetNotificationOfChangeReportOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNotificationOfChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportOKBody) contextValidateNotificationOfChanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NotificationOfChanges); i++ {

		if o.NotificationOfChanges[i] != nil {

			if swag.IsZero(o.NotificationOfChanges[i]) { // not required
				return nil
			}

			if err := o.NotificationOfChanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationOfChangeReportOK" + "." + "notificationOfChanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNotificationOfChangeReportOK" + "." + "notificationOfChanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportOKBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0 Notification Of Change
swagger:model GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0
*/
type GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0 struct {

	// Account Number
	// Example: ############1234
	AccountNumber string `json:"accountNumber,omitempty"`

	// Account Type
	// Example: Checking Account
	AccountType string `json:"accountType,omitempty"`

	// Merchant Reference Number
	// Example: TC30877-10
	Code string `json:"code,omitempty"`

	// Consumer Name
	// Example: Consumer Name
	ConsumerName string `json:"consumerName,omitempty"`

	// Merchant Reference Number
	// Example: TC30877-10
	MerchantReferenceNumber string `json:"merchantReferenceNumber,omitempty"`

	// Routing Number
	// Example: 123456789
	RoutingNumber string `json:"routingNumber,omitempty"`

	// Notification Of Change Date(ISO 8601 Extended)
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// Transaction Reference Number
	// Example: 55563
	TransactionReferenceNumber string `json:"transactionReferenceNumber,omitempty"`
}

// Validate validates this get notification of change report o k body notification of changes items0
func (o *GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get notification of change report o k body notification of changes items0 based on context it is used
func (o *GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0) UnmarshalBinary(b []byte) error {
	var res GetNotificationOfChangeReportOKBodyNotificationOfChangesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
