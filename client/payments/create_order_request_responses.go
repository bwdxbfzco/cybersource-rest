// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrderRequestReader is a Reader for the CreateOrderRequest structure.
type CreateOrderRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrderRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOrderRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateOrderRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateOrderRequestBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pts/v2/payment-references/{id}/intents] createOrderRequest", response, response.Code())
	}
}

// NewCreateOrderRequestCreated creates a CreateOrderRequestCreated with default headers values
func NewCreateOrderRequestCreated() *CreateOrderRequestCreated {
	return &CreateOrderRequestCreated{}
}

/*
CreateOrderRequestCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreateOrderRequestCreated struct {
	Payload *CreateOrderRequestCreatedBody
}

// IsSuccess returns true when this create order request created response has a 2xx status code
func (o *CreateOrderRequestCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create order request created response has a 3xx status code
func (o *CreateOrderRequestCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create order request created response has a 4xx status code
func (o *CreateOrderRequestCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create order request created response has a 5xx status code
func (o *CreateOrderRequestCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create order request created response a status code equal to that given
func (o *CreateOrderRequestCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create order request created response
func (o *CreateOrderRequestCreated) Code() int {
	return 201
}

func (o *CreateOrderRequestCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestCreated %s", 201, payload)
}

func (o *CreateOrderRequestCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestCreated %s", 201, payload)
}

func (o *CreateOrderRequestCreated) GetPayload() *CreateOrderRequestCreatedBody {
	return o.Payload
}

func (o *CreateOrderRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrderRequestCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderRequestBadRequest creates a CreateOrderRequestBadRequest with default headers values
func NewCreateOrderRequestBadRequest() *CreateOrderRequestBadRequest {
	return &CreateOrderRequestBadRequest{}
}

/*
CreateOrderRequestBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreateOrderRequestBadRequest struct {
	Payload *CreateOrderRequestBadRequestBody
}

// IsSuccess returns true when this create order request bad request response has a 2xx status code
func (o *CreateOrderRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create order request bad request response has a 3xx status code
func (o *CreateOrderRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create order request bad request response has a 4xx status code
func (o *CreateOrderRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create order request bad request response has a 5xx status code
func (o *CreateOrderRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create order request bad request response a status code equal to that given
func (o *CreateOrderRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create order request bad request response
func (o *CreateOrderRequestBadRequest) Code() int {
	return 400
}

func (o *CreateOrderRequestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestBadRequest %s", 400, payload)
}

func (o *CreateOrderRequestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestBadRequest %s", 400, payload)
}

func (o *CreateOrderRequestBadRequest) GetPayload() *CreateOrderRequestBadRequestBody {
	return o.Payload
}

func (o *CreateOrderRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrderRequestBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderRequestBadGateway creates a CreateOrderRequestBadGateway with default headers values
func NewCreateOrderRequestBadGateway() *CreateOrderRequestBadGateway {
	return &CreateOrderRequestBadGateway{}
}

/*
CreateOrderRequestBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreateOrderRequestBadGateway struct {
	Payload *CreateOrderRequestBadGatewayBody
}

// IsSuccess returns true when this create order request bad gateway response has a 2xx status code
func (o *CreateOrderRequestBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create order request bad gateway response has a 3xx status code
func (o *CreateOrderRequestBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create order request bad gateway response has a 4xx status code
func (o *CreateOrderRequestBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create order request bad gateway response has a 5xx status code
func (o *CreateOrderRequestBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create order request bad gateway response a status code equal to that given
func (o *CreateOrderRequestBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create order request bad gateway response
func (o *CreateOrderRequestBadGateway) Code() int {
	return 502
}

func (o *CreateOrderRequestBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestBadGateway %s", 502, payload)
}

func (o *CreateOrderRequestBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/payment-references/{id}/intents][%d] createOrderRequestBadGateway %s", 502, payload)
}

func (o *CreateOrderRequestBadGateway) GetPayload() *CreateOrderRequestBadGatewayBody {
	return o.Payload
}

func (o *CreateOrderRequestBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrderRequestBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateOrderRequestBadGatewayBody ptsV2PaymentsPost502Response
swagger:model CreateOrderRequestBadGatewayBody
*/
type CreateOrderRequestBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create order request bad gateway body
func (o *CreateOrderRequestBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create order request bad gateway body based on context it is used
func (o *CreateOrderRequestBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestBadRequestBody ptsV2PaymentsPost400Response
swagger:model CreateOrderRequestBadRequestBody
*/
type CreateOrderRequestBadRequestBody struct {

	// details
	Details []*CreateOrderRequestBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - CARD_TYPE_NOT_ACCEPTED
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//  - INVALID_AMOUNT
	//  - INVALID_CARD_TYPE
	//  - INVALID_PAYMENT_ID
	//  - NOT_SUPPORTED
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create order request bad request body
func (o *CreateOrderRequestBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrderRequestBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrderRequestBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create order request bad request body based on the context it is used
func (o *CreateOrderRequestBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrderRequestBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrderRequestBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestBadRequestBodyDetailsItems0 create order request bad request body details items0
swagger:model CreateOrderRequestBadRequestBodyDetailsItems0
*/
type CreateOrderRequestBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create order request bad request body details items0
func (o *CreateOrderRequestBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create order request bad request body details items0 based on context it is used
func (o *CreateOrderRequestBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestBody create order request body
swagger:model CreateOrderRequestBody
*/
type CreateOrderRequestBody struct {

	// client reference information
	ClientReferenceInformation *CreateOrderRequestParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// order information
	OrderInformation *CreateOrderRequestParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *CreateOrderRequestParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *CreateOrderRequestParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this create order request body
func (o *CreateOrderRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request body based on the context it is used
func (o *CreateOrderRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBody ptsV2PaymentsOrderPost201Response
swagger:model CreateOrderRequestCreatedBody
*/
type CreateOrderRequestCreatedBody struct {

	// buyer information
	BuyerInformation *CreateOrderRequestCreatedBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *CreateOrderRequestCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *CreateOrderRequestCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *CreateOrderRequestCreatedBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *CreateOrderRequestCreatedBodyProcessingInformation `json:"processingInformation,omitempty"`

	// processor information
	ProcessorInformation *CreateOrderRequestCreatedBodyProcessorInformation `json:"processorInformation,omitempty"`

	// Reference number for the transaction.
	// Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource.
	// The actual value used in the request to the processor is provided back to you by Cybersource in the response.
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// risk information
	RiskInformation *CreateOrderRequestCreatedBodyRiskInformation `json:"riskInformation,omitempty"`

	// The status of the submitted transaction.
	// Possible values:
	//   - CREATED
	//   - SAVED
	//   - APPROVED
	//   - VOIDED
	//   - COMPLETED
	//   - PAYER_ACTION_REQUIRED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create order request created body
func (o *CreateOrderRequestCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBody) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"reconciliationId", "body", o.ReconciliationID, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) validateRiskInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request created body based on the context it is used
func (o *CreateOrderRequestCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRiskInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBody) contextValidateRiskInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RiskInformation != nil {

		if swag.IsZero(o.RiskInformation) { // not required
			return nil
		}

		if err := o.RiskInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "riskInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyBuyerInformation create order request created body buyer information
swagger:model CreateOrderRequestCreatedBodyBuyerInformation
*/
type CreateOrderRequestCreatedBodyBuyerInformation struct {

	// personal identification
	PersonalIdentification []*CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this create order request created body buyer information
func (o *CreateOrderRequestCreatedBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrderRequestCreated" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrderRequestCreated" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create order request created body buyer information based on the context it is used
func (o *CreateOrderRequestCreatedBodyBuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyBuyerInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PersonalIdentification); i++ {

		if o.PersonalIdentification[i] != nil {

			if swag.IsZero(o.PersonalIdentification[i]) { // not required
				return nil
			}

			if err := o.PersonalIdentification[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrderRequestCreated" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrderRequestCreated" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0 create order request created body buyer information personal identification items0
swagger:model CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0
*/
type CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type. This field is supported only on the following processors.
	//
	// #### ComercioLatino
	// Set this field to the Cadastro de Pessoas Fisicas (CPF).
	//
	// #### CyberSource Latin American Processing
	// Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil.
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// For processor-specific information, see the `personal_id` field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// If `type = PASSPORT`, this is the cardholder's passport number.
	// Recommended for Discover ProtectBuy.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The type of the identification.
	//
	// Possible values:
	//   - `NATIONAL`
	//   - `CPF`
	//   - `CPNJ`
	//   - `CURP`
	//   - `SSN`
	//   - `DRIVER_LICENSE`
	//   - `PASSPORT_NUMBER`
	//   - `PERSONAL_ID`
	//   - `TAX_ID`
	//
	// This field is supported only on the following processors.
	//
	// #### ComercioLatino
	// Set this field to the Cadastro de Pessoas Fisicas (CPF).
	//
	// #### CyberSource Latin American Processing
	// Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil.
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// For processor-specific information, see the `personal_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create order request created body buyer information personal identification items0
func (o *CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body buyer information personal identification items0 based on context it is used
func (o *CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyClientReferenceInformation create order request created body client reference information
swagger:model CreateOrderRequestCreatedBodyClientReferenceInformation
*/
type CreateOrderRequestCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this create order request created body client reference information
func (o *CreateOrderRequestCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body client reference information based on context it is used
func (o *CreateOrderRequestCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyOrderInformation create order request created body order information
swagger:model CreateOrderRequestCreatedBodyOrderInformation
*/
type CreateOrderRequestCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateOrderRequestCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *CreateOrderRequestCreatedBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// ship to
	ShipTo *CreateOrderRequestCreatedBodyOrderInformationShipTo `json:"shipTo,omitempty"`

	// shipping details
	ShippingDetails *CreateOrderRequestCreatedBodyOrderInformationShippingDetails `json:"shippingDetails,omitempty"`
}

// Validate validates this create order request created body order information
func (o *CreateOrderRequestCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) validateShippingDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingDetails) { // not required
		return nil
	}

	if o.ShippingDetails != nil {
		if err := o.ShippingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shippingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shippingDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request created body order information based on the context it is used
func (o *CreateOrderRequestCreatedBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShippingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformation) contextValidateShippingDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.ShippingDetails != nil {

		if swag.IsZero(o.ShippingDetails) { // not required
			return nil
		}

		if err := o.ShippingDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shippingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "orderInformation" + "." + "shippingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyOrderInformationAmountDetails create order request created body order information amount details
swagger:model CreateOrderRequestCreatedBodyOrderInformationAmountDetails
*/
type CreateOrderRequestCreatedBodyOrderInformationAmountDetails struct {

	// Currency used for the order
	//
	// Max Length: 5
	Currency string `json:"currency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create order request created body order information amount details
func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 5); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body order information amount details based on context it is used
func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyOrderInformationBillTo create order request created body order information bill to
swagger:model CreateOrderRequestCreatedBodyOrderInformationBillTo
*/
type CreateOrderRequestCreatedBodyOrderInformationBillTo struct {

	// First line of the billing street address.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the billing street address.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 2
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of the billing address. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 20
	Country string `json:"country,omitempty"`

	// Customer's email address.
	//
	// Max Length: 256
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### RBS WorldPay Atlanta
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's middle name.
	//
	// Max Length: 60
	MiddleName string `json:"middleName,omitempty"`

	// Customer's name suffix.
	//
	// Max Length: 60
	NameSuffix string `json:"nameSuffix,omitempty"`

	// Customer's phone number.
	//
	// It is recommended that you include the country code when the order is from outside the U.S.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Optional field.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// Example: 12345-6789
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	// Example: A1B 2C3
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`

	// Title.
	//
	// Max Length: 60
	Title string `json:"title,omitempty"`

	// Whether buyer has verified their identity. Used in case of PayPal transactions.
	//
	// Possible Values:
	// * VERIFIED
	// * UNVERIFIED
	//
	VerificationStatus string `json:"verificationStatus,omitempty"`
}

// Validate validates this create order request created body order information bill to
func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", o.Country, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"email", "body", o.Email, 256); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"middleName", "body", o.MiddleName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateNameSuffix(formats strfmt.Registry) error {
	if swag.IsZero(o.NameSuffix) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"nameSuffix", "body", o.NameSuffix, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"billTo"+"."+"title", "body", o.Title, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body order information bill to based on context it is used
func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyOrderInformationShipTo create order request created body order information ship to
swagger:model CreateOrderRequestCreatedBodyOrderInformationShipTo
*/
type CreateOrderRequestCreatedBodyOrderInformationShipTo struct {

	// First line of the shipping address.
	//
	// Max Length: 100
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address
	//
	// Max Length: 100
	Address2 string `json:"address2,omitempty"`

	// State or province of shipping address. This is a State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 40
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of shipping address. This is a two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// First name of the recipient.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// shipping method for the product.
	// Possible values are:
	// - `sameday`
	// - `oneday`
	// - `twoday`
	// - `threeday`
	// - `lowcost`
	// - `pickup`
	// - `other`
	// - `none`
	//
	// Max Length: 225
	Method string `json:"method,omitempty"`

	// Phone number of shipping address.
	//
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code of shipping address. Consists of 5 to 9 digits.
	//
	// Max Length: 20
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create order request created body order information ship to
func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", o.Address1, 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"address2", "body", o.Address2, 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"method", "body", o.Method, 225); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"postalCode", "body", o.PostalCode, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body order information ship to based on context it is used
func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyOrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyOrderInformationShippingDetails create order request created body order information shipping details
swagger:model CreateOrderRequestCreatedBodyOrderInformationShippingDetails
*/
type CreateOrderRequestCreatedBodyOrderInformationShippingDetails struct {

	// Shipping method for the product. Possible values:
	//
	//  - `lowcost`: Lowest-cost service
	//  - `sameday`: Courier or same-day service
	//  - `oneday`: Next-day or overnight service
	//  - `twoday`: Two-day service
	//  - `threeday`: Three-day service
	//  - `pickup`: Store pick-up
	//  - `other`: Other shipping method
	//  - `none`: No shipping method because product is a service or subscription
	//
	// Max Length: 10
	ShippingMethod string `json:"shippingMethod,omitempty"`
}

// Validate validates this create order request created body order information shipping details
func (o *CreateOrderRequestCreatedBodyOrderInformationShippingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShippingMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyOrderInformationShippingDetails) validateShippingMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"orderInformation"+"."+"shippingDetails"+"."+"shippingMethod", "body", o.ShippingMethod, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body order information shipping details based on context it is used
func (o *CreateOrderRequestCreatedBodyOrderInformationShippingDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationShippingDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyOrderInformationShippingDetails) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyOrderInformationShippingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyPaymentInformation create order request created body payment information
swagger:model CreateOrderRequestCreatedBodyPaymentInformation
*/
type CreateOrderRequestCreatedBodyPaymentInformation struct {

	// e wallet
	EWallet *CreateOrderRequestCreatedBodyPaymentInformationEWallet `json:"eWallet,omitempty"`
}

// Validate validates this create order request created body payment information
func (o *CreateOrderRequestCreatedBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyPaymentInformation) validateEWallet(formats strfmt.Registry) error {
	if swag.IsZero(o.EWallet) { // not required
		return nil
	}

	if o.EWallet != nil {
		if err := o.EWallet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "paymentInformation" + "." + "eWallet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "paymentInformation" + "." + "eWallet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request created body payment information based on the context it is used
func (o *CreateOrderRequestCreatedBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEWallet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyPaymentInformation) contextValidateEWallet(ctx context.Context, formats strfmt.Registry) error {

	if o.EWallet != nil {

		if swag.IsZero(o.EWallet) { // not required
			return nil
		}

		if err := o.EWallet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "paymentInformation" + "." + "eWallet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "paymentInformation" + "." + "eWallet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyPaymentInformationEWallet create order request created body payment information e wallet
swagger:model CreateOrderRequestCreatedBodyPaymentInformationEWallet
*/
type CreateOrderRequestCreatedBodyPaymentInformationEWallet struct {

	// The ID of the customer, passed in the return_url field by PayPal after customer approval.
	// Max Length: 26
	AccountID string `json:"accountId,omitempty"`

	// Payment mode for the authorization or order transaction.  INSTANT_TRANSFER  MANUAL_BANK_TRANSFER  DELAYED_TRANSFER  ECHECK  UNRESTRICTED (default)—this value is available only when configured by PayPal for the merchant. INSTANT
	// Max Length: 30
	FundingSource string `json:"fundingSource,omitempty"`

	// Payment method for the unit purchase.
	// Possible values:
	// - `UNRESTRICTED (default)—this value
	// is only available if configured by PayPal
	// for the merchant.`
	// - `INSTANT`
	//
	// Max Length: 30
	FundingSourceSale string `json:"fundingSourceSale,omitempty"`
}

// Validate validates this create order request created body payment information e wallet
func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFundingSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFundingSourceSale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountID) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"paymentInformation"+"."+"eWallet"+"."+"accountId", "body", o.AccountID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) validateFundingSource(formats strfmt.Registry) error {
	if swag.IsZero(o.FundingSource) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"paymentInformation"+"."+"eWallet"+"."+"fundingSource", "body", o.FundingSource, 30); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) validateFundingSourceSale(formats strfmt.Registry) error {
	if swag.IsZero(o.FundingSourceSale) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"paymentInformation"+"."+"eWallet"+"."+"fundingSourceSale", "body", o.FundingSourceSale, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body payment information e wallet based on context it is used
func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyPaymentInformationEWallet) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyPaymentInformationEWallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyProcessingInformation create order request created body processing information
swagger:model CreateOrderRequestCreatedBodyProcessingInformation
*/
type CreateOrderRequestCreatedBodyProcessingInformation struct {

	// Set to the value of the requestID field returned in the order service response.
	// Max Length: 26
	IntentsID string `json:"intentsId,omitempty"`
}

// Validate validates this create order request created body processing information
func (o *CreateOrderRequestCreatedBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIntentsID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessingInformation) validateIntentsID(formats strfmt.Registry) error {
	if swag.IsZero(o.IntentsID) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processingInformation"+"."+"intentsId", "body", o.IntentsID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body processing information based on context it is used
func (o *CreateOrderRequestCreatedBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyProcessorInformation create order request created body processor information
swagger:model CreateOrderRequestCreatedBodyProcessorInformation
*/
type CreateOrderRequestCreatedBodyProcessorInformation struct {

	// avs
	Avs *CreateOrderRequestCreatedBodyProcessorInformationAvs `json:"avs,omitempty"`

	// This field might contain information about a decline. This field is supported only for **CyberSource through
	// VisaNet**.
	//
	// Max Length: 255
	ResponseDetails string `json:"responseDetails,omitempty"`

	// seller protection
	SellerProtection *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection `json:"sellerProtection,omitempty"`

	// Network transaction identifier (TID). You can use this value to identify a specific transaction when you are
	// discussing the transaction with your processor. Not all processors provide this value.
	//
	// Returned by the authorization service.
	//
	// #### PIN debit
	// Transaction identifier generated by the processor.
	//
	// Returned by PIN debit credit.
	//
	// #### GPX
	// Processor transaction ID.
	//
	// #### Cielo
	// For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.
	//
	// #### Comercio Latino
	// For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.
	//
	// #### CyberSource through VisaNet and GPN
	// For details about this value for CyberSource through VisaNet and GPN, see "Network Transaction Identifiers" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Moneris
	// This value identifies the transaction on a host system. It contains the following information:
	// - Terminal used to process the transaction
	// - Shift during which the transaction took place
	// - Batch number
	// - Transaction number within the batch
	// You must store this value. If you give the customer a receipt, display this value on the receipt.
	//
	// **Example** For the value
	// 66012345001069003:
	// - Terminal ID = 66012345
	// - Shift number = 001
	// - Batch number = 069
	// - Transaction number = 003
	//
	// Max Length: 50
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this create order request created body processor information
func (o *CreateOrderRequestCreatedBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSellerProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) validateAvs(formats strfmt.Registry) error {
	if swag.IsZero(o.Avs) { // not required
		return nil
	}

	if o.Avs != nil {
		if err := o.Avs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) validateResponseDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseDetails) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processorInformation"+"."+"responseDetails", "body", o.ResponseDetails, 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) validateSellerProtection(formats strfmt.Registry) error {
	if swag.IsZero(o.SellerProtection) { // not required
		return nil
	}

	if o.SellerProtection != nil {
		if err := o.SellerProtection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "sellerProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "sellerProtection")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processorInformation"+"."+"transactionId", "body", o.TransactionID, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create order request created body processor information based on the context it is used
func (o *CreateOrderRequestCreatedBodyProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSellerProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) contextValidateAvs(ctx context.Context, formats strfmt.Registry) error {

	if o.Avs != nil {

		if swag.IsZero(o.Avs) { // not required
			return nil
		}

		if err := o.Avs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformation) contextValidateSellerProtection(ctx context.Context, formats strfmt.Registry) error {

	if o.SellerProtection != nil {

		if swag.IsZero(o.SellerProtection) { // not required
			return nil
		}

		if err := o.SellerProtection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "sellerProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrderRequestCreated" + "." + "processorInformation" + "." + "sellerProtection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyProcessorInformationAvs create order request created body processor information avs
swagger:model CreateOrderRequestCreatedBodyProcessorInformationAvs
*/
type CreateOrderRequestCreatedBodyProcessorInformationAvs struct {

	// AVS result code sent directly from the processor. Returned only when the processor returns this value.
	// **Important** Do not use this field to evaluate the result of AVS. Use for debugging purposes only.
	//
	// Returned by authorization service.
	//
	// Max Length: 10
	CodeRaw string `json:"codeRaw,omitempty"`
}

// Validate validates this create order request created body processor information avs
func (o *CreateOrderRequestCreatedBodyProcessorInformationAvs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCodeRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformationAvs) validateCodeRaw(formats strfmt.Registry) error {
	if swag.IsZero(o.CodeRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processorInformation"+"."+"avs"+"."+"codeRaw", "body", o.CodeRaw, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body processor information avs based on context it is used
func (o *CreateOrderRequestCreatedBodyProcessorInformationAvs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformationAvs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformationAvs) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyProcessorInformationAvs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyProcessorInformationSellerProtection create order request created body processor information seller protection
swagger:model CreateOrderRequestCreatedBodyProcessorInformationSellerProtection
*/
type CreateOrderRequestCreatedBodyProcessorInformationSellerProtection struct {

	// The level of seller protection in force for the transaction.
	// Possible values:
	// - `ELIGIBLE`
	// - `PARTIALLY_ELIGIBLE`
	// - `INELIGIBLE`
	//
	// Max Length: 60
	Eligibilty string `json:"eligibilty,omitempty"`

	// The kind of seller protection in force for the transaction. This field is returned only when the protection eligibility is set to ELIGIBLE or PARTIALLY_ELIGIBLE.
	// Possible values:
	// - `ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.`
	// - `UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.One or both values can be returned.`
	//
	// Max Length: 60
	Type string `json:"type,omitempty"`
}

// Validate validates this create order request created body processor information seller protection
func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEligibilty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) validateEligibilty(formats strfmt.Registry) error {
	if swag.IsZero(o.Eligibilty) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processorInformation"+"."+"sellerProtection"+"."+"eligibilty", "body", o.Eligibilty, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"processorInformation"+"."+"sellerProtection"+"."+"type", "body", o.Type, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body processor information seller protection based on context it is used
func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyProcessorInformationSellerProtection) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyProcessorInformationSellerProtection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestCreatedBodyRiskInformation create order request created body risk information
swagger:model CreateOrderRequestCreatedBodyRiskInformation
*/
type CreateOrderRequestCreatedBodyRiskInformation struct {

	// Type of filter. Possible values:
	// - ACCEPT
	// - PENDING
	// - DENY
	// - REPORT
	//
	// Max Length: 60
	FraudDecision string `json:"fraudDecision,omitempty"`

	// possible values
	// - AVS_NO_MATCH
	// - AVS_PARTIAL_MATCH
	// - AVS_UNAVAILABLE_OR_UNSUPPORTED
	// - CARD_SECURITY_CODE_MISMATCH
	// - MAXIMUM_TRANSACTION_AMOUNT
	// - UNCONFIRMED_ADDRESS
	// - COUNTRY_MONITOR
	// - LARGE_ORDER_NUMBER
	// - BILLING_OR_SHIPPING_ADDRESS_MISMATCH
	// - RISKY_ZIP_CODE
	// - SUSPECTED_FREIGHT_FORWARDER_CHECK
	// - TOTAL_PURCHASE_PRICE_MINIMUM
	// - IP_ADDRESS_VELOCITY
	// - RISKY_EMAIL_ADDRESS_DOMAIN_CHECK
	// - RISKY_BANK_IDENTIFICATION_NUMBER_CHECK,
	// RISKY_IP_ADDRESS_RANGE
	// - PAYPAL_FRAUD_MODEL
	//
	// Max Length: 60
	FraudDecisionReason string `json:"fraudDecisionReason,omitempty"`
}

// Validate validates this create order request created body risk information
func (o *CreateOrderRequestCreatedBodyRiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFraudDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFraudDecisionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestCreatedBodyRiskInformation) validateFraudDecision(formats strfmt.Registry) error {
	if swag.IsZero(o.FraudDecision) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"riskInformation"+"."+"fraudDecision", "body", o.FraudDecision, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestCreatedBodyRiskInformation) validateFraudDecisionReason(formats strfmt.Registry) error {
	if swag.IsZero(o.FraudDecisionReason) { // not required
		return nil
	}

	if err := validate.MaxLength("createOrderRequestCreated"+"."+"riskInformation"+"."+"fraudDecisionReason", "body", o.FraudDecisionReason, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request created body risk information based on context it is used
func (o *CreateOrderRequestCreatedBodyRiskInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyRiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestCreatedBodyRiskInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestCreatedBodyRiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyClientReferenceInformation create order request params body client reference information
swagger:model CreateOrderRequestParamsBodyClientReferenceInformation
*/
type CreateOrderRequestParamsBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this create order request params body client reference information
func (o *CreateOrderRequestParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request params body client reference information based on context it is used
func (o *CreateOrderRequestParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyOrderInformation create order request params body order information
swagger:model CreateOrderRequestParamsBodyOrderInformation
*/
type CreateOrderRequestParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateOrderRequestParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this create order request params body order information
func (o *CreateOrderRequestParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request params body order information based on the context it is used
func (o *CreateOrderRequestParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyOrderInformationAmountDetails create order request params body order information amount details
swagger:model CreateOrderRequestParamsBodyOrderInformationAmountDetails
*/
type CreateOrderRequestParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order
	//
	// Max Length: 5
	Currency string `json:"currency,omitempty"`

	// Amount being charged as gift wrap fee.
	//
	//
	// Max Length: 15
	GiftWrapAmount string `json:"giftWrapAmount,omitempty"`

	// Aggregate handling charges for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value.
	//
	// Max Length: 15
	HandlingAmount string `json:"handlingAmount,omitempty"`

	// Amount being charged for the insurance fee. Only supported when the payment_method is set to paypal.
	//
	// Max Length: 15
	InsuranceAmount string `json:"insuranceAmount,omitempty"`

	// Aggregate shipping charges for the transaction If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value.
	//
	// Max Length: 15
	ShippingAmount string `json:"shippingAmount,omitempty"`

	// Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value.
	//
	// Max Length: 15
	ShippingDiscountAmount string `json:"shippingDiscountAmount,omitempty"`

	// Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value.
	//
	// Max Length: 15
	SubTotalAmount string `json:"subTotalAmount,omitempty"`

	// Total tax amount. When the purchaseTotals_ taxAmount and ap_subtotalAmount fields are included in the request, do not include the tax amount as part of the subtotal amount calculation.
	//
	// Max Length: 10
	TaxAmount string `json:"taxAmount,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places
	//
	// Max Length: 10
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create order request params body order information amount details
func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGiftWrapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHandlingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInsuranceAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingDiscountAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 5); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateGiftWrapAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.GiftWrapAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"giftWrapAmount", "body", o.GiftWrapAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateHandlingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.HandlingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"handlingAmount", "body", o.HandlingAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateInsuranceAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.InsuranceAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"insuranceAmount", "body", o.InsuranceAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateShippingAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"shippingAmount", "body", o.ShippingAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateShippingDiscountAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.ShippingDiscountAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"shippingDiscountAmount", "body", o.ShippingDiscountAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateSubTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.SubTotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"subTotalAmount", "body", o.SubTotalAmount, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateTaxAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TaxAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxAmount", "body", o.TaxAmount, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request params body order information amount details based on context it is used
func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyPaymentInformation create order request params body payment information
swagger:model CreateOrderRequestParamsBodyPaymentInformation
*/
type CreateOrderRequestParamsBodyPaymentInformation struct {

	// e wallet
	EWallet *CreateOrderRequestParamsBodyPaymentInformationEWallet `json:"eWallet,omitempty"`

	// payment type
	PaymentType *CreateOrderRequestParamsBodyPaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this create order request params body payment information
func (o *CreateOrderRequestParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEWallet(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformation) validateEWallet(formats strfmt.Registry) error {
	if swag.IsZero(o.EWallet) { // not required
		return nil
	}

	if o.EWallet != nil {
		if err := o.EWallet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "eWallet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "eWallet")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformation) validatePaymentType(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request params body payment information based on the context it is used
func (o *CreateOrderRequestParamsBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEWallet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformation) contextValidateEWallet(ctx context.Context, formats strfmt.Registry) error {

	if o.EWallet != nil {

		if swag.IsZero(o.EWallet) { // not required
			return nil
		}

		if err := o.EWallet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "eWallet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "eWallet")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformation) contextValidatePaymentType(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentType != nil {

		if swag.IsZero(o.PaymentType) { // not required
			return nil
		}

		if err := o.PaymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyPaymentInformationEWallet create order request params body payment information e wallet
swagger:model CreateOrderRequestParamsBodyPaymentInformationEWallet
*/
type CreateOrderRequestParamsBodyPaymentInformationEWallet struct {

	// The ID of the customer, passed in the return_url field by PayPal after customer approval.
	// Max Length: 26
	AccountID string `json:"accountId,omitempty"`
}

// Validate validates this create order request params body payment information e wallet
func (o *CreateOrderRequestParamsBodyPaymentInformationEWallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformationEWallet) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountID) { // not required
		return nil
	}

	if err := validate.MaxLength("OrderPaymentRequest"+"."+"paymentInformation"+"."+"eWallet"+"."+"accountId", "body", o.AccountID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create order request params body payment information e wallet based on context it is used
func (o *CreateOrderRequestParamsBodyPaymentInformationEWallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationEWallet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationEWallet) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyPaymentInformationEWallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyPaymentInformationPaymentType create order request params body payment information payment type
swagger:model CreateOrderRequestParamsBodyPaymentInformationPaymentType
*/
type CreateOrderRequestParamsBodyPaymentInformationPaymentType struct {

	// method
	Method *CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod `json:"method,omitempty"`
}

// Validate validates this create order request params body payment information payment type
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if o.Method != nil {
		if err := o.Method.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create order request params body payment information payment type based on the context it is used
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if o.Method != nil {

		if swag.IsZero(o.Method) { // not required
			return nil
		}

		if err := o.Method.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPaymentRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyPaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod create order request params body payment information payment type method
swagger:model CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod
*/
type CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod struct {

	// Identifier for the payment type
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this create order request params body payment information payment type method
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create order request params body payment information payment type method based on context it is used
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyPaymentInformationPaymentTypeMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrderRequestParamsBodyProcessingInformation create order request params body processing information
swagger:model CreateOrderRequestParamsBodyProcessingInformation
*/
type CreateOrderRequestParamsBodyProcessingInformation struct {

	// Array of actions (one or more) to be included in the order to invoke bundled services along with order.
	// Possible values:
	// - `AP_ORDER`: Use this when Alternative Payment Order service is requested.
	//
	ActionList []string `json:"actionList"`
}

// Validate validates this create order request params body processing information
func (o *CreateOrderRequestParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create order request params body processing information based on context it is used
func (o *CreateOrderRequestParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrderRequestParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateOrderRequestParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
