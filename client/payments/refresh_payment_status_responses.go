// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefreshPaymentStatusReader is a Reader for the RefreshPaymentStatus structure.
type RefreshPaymentStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshPaymentStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRefreshPaymentStatusCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshPaymentStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewRefreshPaymentStatusBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pts/v2/refresh-payment-status/{id}] refreshPaymentStatus", response, response.Code())
	}
}

// NewRefreshPaymentStatusCreated creates a RefreshPaymentStatusCreated with default headers values
func NewRefreshPaymentStatusCreated() *RefreshPaymentStatusCreated {
	return &RefreshPaymentStatusCreated{}
}

/*
RefreshPaymentStatusCreated describes a response with status code 201, with default header values.

Successful response.
*/
type RefreshPaymentStatusCreated struct {
	Payload *RefreshPaymentStatusCreatedBody
}

// IsSuccess returns true when this refresh payment status created response has a 2xx status code
func (o *RefreshPaymentStatusCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh payment status created response has a 3xx status code
func (o *RefreshPaymentStatusCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh payment status created response has a 4xx status code
func (o *RefreshPaymentStatusCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh payment status created response has a 5xx status code
func (o *RefreshPaymentStatusCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh payment status created response a status code equal to that given
func (o *RefreshPaymentStatusCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the refresh payment status created response
func (o *RefreshPaymentStatusCreated) Code() int {
	return 201
}

func (o *RefreshPaymentStatusCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusCreated %s", 201, payload)
}

func (o *RefreshPaymentStatusCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusCreated %s", 201, payload)
}

func (o *RefreshPaymentStatusCreated) GetPayload() *RefreshPaymentStatusCreatedBody {
	return o.Payload
}

func (o *RefreshPaymentStatusCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RefreshPaymentStatusCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshPaymentStatusBadRequest creates a RefreshPaymentStatusBadRequest with default headers values
func NewRefreshPaymentStatusBadRequest() *RefreshPaymentStatusBadRequest {
	return &RefreshPaymentStatusBadRequest{}
}

/*
RefreshPaymentStatusBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type RefreshPaymentStatusBadRequest struct {
	Payload *RefreshPaymentStatusBadRequestBody
}

// IsSuccess returns true when this refresh payment status bad request response has a 2xx status code
func (o *RefreshPaymentStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh payment status bad request response has a 3xx status code
func (o *RefreshPaymentStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh payment status bad request response has a 4xx status code
func (o *RefreshPaymentStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh payment status bad request response has a 5xx status code
func (o *RefreshPaymentStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh payment status bad request response a status code equal to that given
func (o *RefreshPaymentStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh payment status bad request response
func (o *RefreshPaymentStatusBadRequest) Code() int {
	return 400
}

func (o *RefreshPaymentStatusBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusBadRequest %s", 400, payload)
}

func (o *RefreshPaymentStatusBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusBadRequest %s", 400, payload)
}

func (o *RefreshPaymentStatusBadRequest) GetPayload() *RefreshPaymentStatusBadRequestBody {
	return o.Payload
}

func (o *RefreshPaymentStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RefreshPaymentStatusBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshPaymentStatusBadGateway creates a RefreshPaymentStatusBadGateway with default headers values
func NewRefreshPaymentStatusBadGateway() *RefreshPaymentStatusBadGateway {
	return &RefreshPaymentStatusBadGateway{}
}

/*
RefreshPaymentStatusBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type RefreshPaymentStatusBadGateway struct {
	Payload *RefreshPaymentStatusBadGatewayBody
}

// IsSuccess returns true when this refresh payment status bad gateway response has a 2xx status code
func (o *RefreshPaymentStatusBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh payment status bad gateway response has a 3xx status code
func (o *RefreshPaymentStatusBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh payment status bad gateway response has a 4xx status code
func (o *RefreshPaymentStatusBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh payment status bad gateway response has a 5xx status code
func (o *RefreshPaymentStatusBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh payment status bad gateway response a status code equal to that given
func (o *RefreshPaymentStatusBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the refresh payment status bad gateway response
func (o *RefreshPaymentStatusBadGateway) Code() int {
	return 502
}

func (o *RefreshPaymentStatusBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusBadGateway %s", 502, payload)
}

func (o *RefreshPaymentStatusBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v2/refresh-payment-status/{id}][%d] refreshPaymentStatusBadGateway %s", 502, payload)
}

func (o *RefreshPaymentStatusBadGateway) GetPayload() *RefreshPaymentStatusBadGatewayBody {
	return o.Payload
}

func (o *RefreshPaymentStatusBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RefreshPaymentStatusBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RefreshPaymentStatusBadGatewayBody ptsV2PaymentsPost502Response
swagger:model RefreshPaymentStatusBadGatewayBody
*/
type RefreshPaymentStatusBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this refresh payment status bad gateway body
func (o *RefreshPaymentStatusBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status bad gateway body based on context it is used
func (o *RefreshPaymentStatusBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusBadRequestBody ptsV2PaymentsPost400Response
swagger:model RefreshPaymentStatusBadRequestBody
*/
type RefreshPaymentStatusBadRequestBody struct {

	// details
	Details []*RefreshPaymentStatusBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - CARD_TYPE_NOT_ACCEPTED
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//  - INVALID_AMOUNT
	//  - INVALID_CARD_TYPE
	//  - INVALID_PAYMENT_ID
	//  - NOT_SUPPORTED
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this refresh payment status bad request body
func (o *RefreshPaymentStatusBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refreshPaymentStatusBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("refreshPaymentStatusBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this refresh payment status bad request body based on the context it is used
func (o *RefreshPaymentStatusBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refreshPaymentStatusBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("refreshPaymentStatusBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusBadRequestBodyDetailsItems0 refresh payment status bad request body details items0
swagger:model RefreshPaymentStatusBadRequestBodyDetailsItems0
*/
type RefreshPaymentStatusBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this refresh payment status bad request body details items0
func (o *RefreshPaymentStatusBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status bad request body details items0 based on context it is used
func (o *RefreshPaymentStatusBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusBody refresh payment status body
swagger:model RefreshPaymentStatusBody
*/
type RefreshPaymentStatusBody struct {

	// agreement information
	AgreementInformation *RefreshPaymentStatusParamsBodyAgreementInformation `json:"agreementInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *RefreshPaymentStatusParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// payment information
	PaymentInformation *RefreshPaymentStatusParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *RefreshPaymentStatusParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this refresh payment status body
func (o *RefreshPaymentStatusBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAgreementInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusBody) validateAgreementInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.AgreementInformation) { // not required
		return nil
	}

	if o.AgreementInformation != nil {
		if err := o.AgreementInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "agreementInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "agreementInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status body based on the context it is used
func (o *RefreshPaymentStatusBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAgreementInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusBody) contextValidateAgreementInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.AgreementInformation != nil {

		if swag.IsZero(o.AgreementInformation) { // not required
			return nil
		}

		if err := o.AgreementInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "agreementInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "agreementInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if swag.IsZero(o.ProcessingInformation) { // not required
			return nil
		}

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusBody) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBody ptsV2PaymentsPost201Response
swagger:model RefreshPaymentStatusCreatedBody
*/
type RefreshPaymentStatusCreatedBody struct {

	// client reference information
	ClientReferenceInformation *RefreshPaymentStatusCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// order information
	OrderInformation *RefreshPaymentStatusCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *RefreshPaymentStatusCreatedBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processor information
	ProcessorInformation *RefreshPaymentStatusCreatedBodyProcessorInformation `json:"processorInformation,omitempty"`

	// Reference number for the transaction.
	// Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource.
	// The actual value used in the request to the processor is provided back to you by Cybersource in the response.
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - AUTHORIZED
	//  - PARTIAL_AUTHORIZED
	//  - AUTHORIZED_PENDING_REVIEW
	//  - AUTHORIZED_RISK_DECLINED
	//  - PENDING_AUTHENTICATION
	//  - PENDING_REVIEW
	//  - DECLINED
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this refresh payment status created body
func (o *RefreshPaymentStatusCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"reconciliationId", "body", o.ReconciliationID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this refresh payment status created body based on the context it is used
func (o *RefreshPaymentStatusCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBody) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBody) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyClientReferenceInformation refresh payment status created body client reference information
swagger:model RefreshPaymentStatusCreatedBodyClientReferenceInformation
*/
type RefreshPaymentStatusCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this refresh payment status created body client reference information
func (o *RefreshPaymentStatusCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status created body client reference information based on context it is used
func (o *RefreshPaymentStatusCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyOrderInformation refresh payment status created body order information
swagger:model RefreshPaymentStatusCreatedBodyOrderInformation
*/
type RefreshPaymentStatusCreatedBodyOrderInformation struct {

	// bill to
	BillTo *RefreshPaymentStatusCreatedBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// ship to
	ShipTo *RefreshPaymentStatusCreatedBodyOrderInformationShipTo `json:"shipTo,omitempty"`
}

// Validate validates this refresh payment status created body order information
func (o *RefreshPaymentStatusCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformation) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status created body order information based on the context it is used
func (o *RefreshPaymentStatusCreatedBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformation) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyOrderInformationBillTo refresh payment status created body order information bill to
swagger:model RefreshPaymentStatusCreatedBodyOrderInformationBillTo
*/
type RefreshPaymentStatusCreatedBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_,
	// it must be sent as _1 1st Street_.
	//
	// Required if keyed; not used if swiped.
	//
	// String (20)
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional.
	// String (60)
	//
	// #### For Payouts
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Used for additional address information. For example: _Attention: Accounts Payable_
	// Optional field.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### FDMS Nashville
	// `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters.
	// String (20)
	//
	// #### All Other Processors
	// String (60)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// #### SEPA/BACS
	// Required for Create Mandate and Import Mandate
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer's first name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer's last name. This name must be the same as the name on the card.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	// #### BACS
	// Required for Import Mandate
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### RBS WorldPay Atlanta
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer's name suffix.
	//
	// Max Length: 60
	NameSuffix string `json:"nameSuffix,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada.
	// Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada.
	// Not used if swiped.
	//
	// #### RBS WorldPay Atlanta:
	// For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional field.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`

	// Whether buyer has verified their identity. Used in case of PayPal transactions.
	//
	// Possible Values:
	// * VERIFIED
	// * UNVERIFIED
	//
	VerificationStatus string `json:"verificationStatus,omitempty"`
}

// Validate validates this refresh payment status created body order information bill to
func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"email", "body", o.Email, 255); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validateNameSuffix(formats strfmt.Registry) error {
	if swag.IsZero(o.NameSuffix) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"nameSuffix", "body", o.NameSuffix, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status created body order information bill to based on context it is used
func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyOrderInformationShipTo refresh payment status created body order information ship to
swagger:model RefreshPaymentStatusCreatedBodyOrderInformationShipTo
*/
type RefreshPaymentStatusCreatedBodyOrderInformationShipTo struct {

	// First line of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	//
	// Optional field.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) (maximum length: 2)
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S.
	// or Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// First name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// #### Litle
	// Maximum length: 25
	//
	// #### All other processors
	// Maximum length: 60
	//
	// Optional field.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or
	// Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Phone number associated with the shipping address.
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// Required field for authorization if any shipping address information is included in the request and
	// shipping to the U.S. or Canada; otherwise, optional.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the
	// remaining value is longer than nine characters, the value is truncated starting from the right side.
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this refresh payment status created body order information ship to
func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"firstName", "body", o.FirstName, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"lastName", "body", o.LastName, 60); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", o.PhoneNumber, 15); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"orderInformation"+"."+"shipTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status created body order information ship to based on context it is used
func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyOrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyOrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformation refresh payment status created body payment information
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformation
*/
type RefreshPaymentStatusCreatedBodyPaymentInformation struct {

	// bank
	Bank *RefreshPaymentStatusCreatedBodyPaymentInformationBank `json:"bank,omitempty"`

	// customer
	Customer *RefreshPaymentStatusCreatedBodyPaymentInformationCustomer `json:"customer,omitempty"`

	// payment type
	PaymentType *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this refresh payment status created body payment information
func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) validateBank(formats strfmt.Registry) error {
	if swag.IsZero(o.Bank) { // not required
		return nil
	}

	if o.Bank != nil {
		if err := o.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) validatePaymentType(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status created body payment information based on the context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBank(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) contextValidateBank(ctx context.Context, formats strfmt.Registry) error {

	if o.Bank != nil {

		if swag.IsZero(o.Bank) { // not required
			return nil
		}

		if err := o.Bank.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) contextValidatePaymentType(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentType != nil {

		if swag.IsZero(o.PaymentType) { // not required
			return nil
		}

		if err := o.PaymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformationBank refresh payment status created body payment information bank
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformationBank
*/
type RefreshPaymentStatusCreatedBodyPaymentInformationBank struct {

	// account
	Account *RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount `json:"account,omitempty"`
}

// Validate validates this refresh payment status created body payment information bank
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status created body payment information bank based on the context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.Account != nil {

		if swag.IsZero(o.Account) { // not required
			return nil
		}

		if err := o.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBank) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformationBank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount refresh payment status created body payment information bank account
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount
*/
type RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount struct {

	// The description for this field is not available.
	IbanSuffix string `json:"ibanSuffix,omitempty"`
}

// Validate validates this refresh payment status created body payment information bank account
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status created body payment information bank account based on context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformationBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformationCustomer refresh payment status created body payment information customer
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformationCustomer
*/
type RefreshPaymentStatusCreatedBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer's card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this refresh payment status created body payment information customer
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status created body payment information customer based on context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType refresh payment status created body payment information payment type
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType
*/
type RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType struct {

	// method
	Method *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod `json:"method,omitempty"`
}

// Validate validates this refresh payment status created body payment information payment type
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if o.Method != nil {
		if err := o.Method.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status created body payment information payment type based on the context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if o.Method != nil {

		if swag.IsZero(o.Method) { // not required
			return nil
		}

		if err := o.Method.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod refresh payment status created body payment information payment type method
swagger:model RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod
*/
type RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod struct {

	// The payment channel that facilitates the transactions. This parameter can be used if the payment channels are listed on the merchant's site, and the payment channel is known.
	//
	// Possible Values:
	//
	// #### Via PPRO
	// - `alfaVa`
	// - `kredivo`
	// - `consumerBarCode`
	// - `merchantQrCode`
	// - `dokuWallet`
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this refresh payment status created body payment information payment type method
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status created body payment information payment type method based on context it is used
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyPaymentInformationPaymentTypeMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyProcessorInformation refresh payment status created body processor information
swagger:model RefreshPaymentStatusCreatedBodyProcessorInformation
*/
type RefreshPaymentStatusCreatedBodyProcessorInformation struct {

	// avs
	Avs *RefreshPaymentStatusCreatedBodyProcessorInformationAvs `json:"avs,omitempty"`

	// This field is set to the value of failure reason returned by the processor.
	//
	RawResponse string `json:"rawResponse,omitempty"`

	// This field is set to the value of response code returned by the processor.
	//
	ResponseCode string `json:"responseCode,omitempty"`

	// seller protection
	SellerProtection *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection `json:"sellerProtection,omitempty"`

	// The description for this field is not available.
	TradeNumber string `json:"tradeNumber,omitempty"`

	// Network transaction identifier (TID). You can use this value to identify a specific transaction when you are
	// discussing the transaction with your processor. Not all processors provide this value.
	//
	// Returned by the authorization service.
	//
	// #### PIN debit
	// Transaction identifier generated by the processor.
	//
	// Returned by PIN debit credit.
	//
	// #### GPX
	// Processor transaction ID.
	//
	// #### Cielo
	// For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.
	//
	// #### Comercio Latino
	// For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.
	//
	// #### CyberSource through VisaNet and GPN
	// For details about this value for CyberSource through VisaNet and GPN, see "Network Transaction Identifiers" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Moneris
	// This value identifies the transaction on a host system. It contains the following information:
	// - Terminal used to process the transaction
	// - Shift during which the transaction took place
	// - Batch number
	// - Transaction number within the batch
	// You must store this value. If you give the customer a receipt, display this value on the receipt.
	//
	// **Example** For the value
	// 66012345001069003:
	// - Terminal ID = 66012345
	// - Shift number = 001
	// - Batch number = 069
	// - Transaction number = 003
	//
	// Max Length: 50
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this refresh payment status created body processor information
func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSellerProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) validateAvs(formats strfmt.Registry) error {
	if swag.IsZero(o.Avs) { // not required
		return nil
	}

	if o.Avs != nil {
		if err := o.Avs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) validateSellerProtection(formats strfmt.Registry) error {
	if swag.IsZero(o.SellerProtection) { // not required
		return nil
	}

	if o.SellerProtection != nil {
		if err := o.SellerProtection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "sellerProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "sellerProtection")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"processorInformation"+"."+"transactionId", "body", o.TransactionID, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this refresh payment status created body processor information based on the context it is used
func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSellerProtection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) contextValidateAvs(ctx context.Context, formats strfmt.Registry) error {

	if o.Avs != nil {

		if swag.IsZero(o.Avs) { // not required
			return nil
		}

		if err := o.Avs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "avs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) contextValidateSellerProtection(ctx context.Context, formats strfmt.Registry) error {

	if o.SellerProtection != nil {

		if swag.IsZero(o.SellerProtection) { // not required
			return nil
		}

		if err := o.SellerProtection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "sellerProtection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusCreated" + "." + "processorInformation" + "." + "sellerProtection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyProcessorInformationAvs refresh payment status created body processor information avs
swagger:model RefreshPaymentStatusCreatedBodyProcessorInformationAvs
*/
type RefreshPaymentStatusCreatedBodyProcessorInformationAvs struct {

	// AVS result code sent directly from the processor. Returned only when the processor returns this value.
	// **Important** Do not use this field to evaluate the result of AVS. Use for debugging purposes only.
	//
	// Returned by authorization service.
	//
	// Max Length: 10
	CodeRaw string `json:"codeRaw,omitempty"`
}

// Validate validates this refresh payment status created body processor information avs
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationAvs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCodeRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformationAvs) validateCodeRaw(formats strfmt.Registry) error {
	if swag.IsZero(o.CodeRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"processorInformation"+"."+"avs"+"."+"codeRaw", "body", o.CodeRaw, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status created body processor information avs based on context it is used
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationAvs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationAvs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationAvs) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyProcessorInformationAvs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection refresh payment status created body processor information seller protection
swagger:model RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection
*/
type RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection struct {

	// The level of seller protection in force for the transaction.
	// Possible values:
	// - `ELIGIBLE`
	// - `PARTIALLY_ELIGIBLE`
	// - `INELIGIBLE`
	//
	Eligibility string `json:"eligibility,omitempty"`

	// The kind of seller protection in force for the transaction. This field is returned only when the protection_eligibility property is set to ELIGIBLE or PARTIALLY_ELIGIBLE.
	// Possible values:
	// - `ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.`
	// - `UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.`
	// One or both values can be returned.
	//
	// Max Length: 60
	EligibilityType string `json:"eligibilityType,omitempty"`

	// The kind of seller protection in force for the transaction. This field is
	// returned only when the protection eligibility value is set to
	// ELIGIBLE or PARTIALLY_ELIGIBLE.
	// Possible values
	// - ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected
	// against claims for items not received.
	// - UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are
	// protected against claims for unauthorized payments.
	// One or both values can be returned.
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this refresh payment status created body processor information seller protection
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEligibilityType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection) validateEligibilityType(formats strfmt.Registry) error {
	if swag.IsZero(o.EligibilityType) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusCreated"+"."+"processorInformation"+"."+"sellerProtection"+"."+"eligibilityType", "body", o.EligibilityType, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status created body processor information seller protection based on context it is used
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusCreatedBodyProcessorInformationSellerProtection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyAgreementInformation refresh payment status params body agreement information
swagger:model RefreshPaymentStatusParamsBodyAgreementInformation
*/
type RefreshPaymentStatusParamsBodyAgreementInformation struct {

	// The identifier for the billing agreement.
	//
	AgreementID string `json:"agreementId,omitempty"`
}

// Validate validates this refresh payment status params body agreement information
func (o *RefreshPaymentStatusParamsBodyAgreementInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status params body agreement information based on context it is used
func (o *RefreshPaymentStatusParamsBodyAgreementInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyAgreementInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyAgreementInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyAgreementInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyClientReferenceInformation refresh payment status params body client reference information
swagger:model RefreshPaymentStatusParamsBodyClientReferenceInformation
*/
type RefreshPaymentStatusParamsBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Reference number for the transaction.
	// Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource.
	// The actual value used in the request to the processor is provided back to you by Cybersource in the response.
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`
}

// Validate validates this refresh payment status params body client reference information
func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("refreshPaymentStatusRequest"+"."+"clientReferenceInformation"+"."+"reconciliationId", "body", o.ReconciliationID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh payment status params body client reference information based on context it is used
func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyPaymentInformation refresh payment status params body payment information
swagger:model RefreshPaymentStatusParamsBodyPaymentInformation
*/
type RefreshPaymentStatusParamsBodyPaymentInformation struct {

	// customer
	Customer *RefreshPaymentStatusParamsBodyPaymentInformationCustomer `json:"customer,omitempty"`

	// payment type
	PaymentType *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this refresh payment status params body payment information
func (o *RefreshPaymentStatusParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformation) validatePaymentType(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status params body payment information based on the context it is used
func (o *RefreshPaymentStatusParamsBodyPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformation) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformation) contextValidatePaymentType(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentType != nil {

		if swag.IsZero(o.PaymentType) { // not required
			return nil
		}

		if err := o.PaymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyPaymentInformationCustomer refresh payment status params body payment information customer
swagger:model RefreshPaymentStatusParamsBodyPaymentInformationCustomer
*/
type RefreshPaymentStatusParamsBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer's card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this refresh payment status params body payment information customer
func (o *RefreshPaymentStatusParamsBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status params body payment information customer based on context it is used
func (o *RefreshPaymentStatusParamsBodyPaymentInformationCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyPaymentInformationPaymentType refresh payment status params body payment information payment type
swagger:model RefreshPaymentStatusParamsBodyPaymentInformationPaymentType
*/
type RefreshPaymentStatusParamsBodyPaymentInformationPaymentType struct {

	// method
	Method *RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod `json:"method,omitempty"`

	// A Payment Type is an agreed means for a payee to receive legal tender from a payer. The way one pays for a commercial financial transaction. Examples: Card, Bank Transfer, Digital, Direct Debit.
	// Possible values:
	// - `CARD` (use this for a PIN debit transaction)
	// - `CHECK` (use this for all eCheck payment transactions - ECP Debit, ECP Follow-on Credit, ECP StandAlone Credit)
	// - `bankTransfer` (use for Online Bank Transafer for methods such as P24, iDeal, Estonia Bank, KCP)
	// - `localCard` (KCP Local card via Altpay)
	// - `carrierBilling` (KCP Carrier Billing via Altpay)
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this refresh payment status params body payment information payment type
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	if o.Method != nil {
		if err := o.Method.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refresh payment status params body payment information payment type based on the context it is used
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if o.Method != nil {

		if swag.IsZero(o.Method) { // not required
			return nil
		}

		if err := o.Method.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshPaymentStatusRequest" + "." + "paymentInformation" + "." + "paymentType" + "." + "method")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyPaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod refresh payment status params body payment information payment type method
swagger:model RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod
*/
type RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod struct {

	// A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal, 7Eleven, alfamart, etc
	//
	// For Japan Payment Processing Valid Values:
	// - 1 Banking Data
	// - 2 Authorization Data
	//
	// #### Via KCP
	// - `KCP` : Local Card, Bank Transfer and Carrier Billing.
	// - `PAYCO`
	// - `KAKAOPAY`
	// - `NAVERPAY`
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this refresh payment status params body payment information payment type method
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status params body payment information payment type method based on context it is used
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyPaymentInformationPaymentTypeMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RefreshPaymentStatusParamsBodyProcessingInformation refresh payment status params body processing information
swagger:model RefreshPaymentStatusParamsBodyProcessingInformation
*/
type RefreshPaymentStatusParamsBodyProcessingInformation struct {

	// Array of actions (one or more) to be included in the payment to invoke bundled services along with payment status.
	//
	// Possible values are one or more of follows:
	//
	//  - `AP_STATUS`: Use this when Alternative Payment check status service is requested.
	//
	//  - `AP_SESSION_STATUS`: Use this when Alternative Payment check status service for Paypal, Klarna is requested.
	//
	//  - `AP_INITIATE_STATUS`: Use this when Alternative Payment check status service for KCP is requested.
	//
	ActionList []string `json:"actionList"`
}

// Validate validates this refresh payment status params body processing information
func (o *RefreshPaymentStatusParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this refresh payment status params body processing information based on context it is used
func (o *RefreshPaymentStatusParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshPaymentStatusParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res RefreshPaymentStatusParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
