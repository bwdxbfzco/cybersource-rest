// Code generated by go-swagger; DO NOT EDIT.

package user_management_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchUsersReader is a Reader for the SearchUsers structure.
type SearchUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ums/v1/users/search] searchUsers", response, response.Code())
	}
}

// NewSearchUsersOK creates a SearchUsersOK with default headers values
func NewSearchUsersOK() *SearchUsersOK {
	return &SearchUsersOK{}
}

/*
SearchUsersOK describes a response with status code 200, with default header values.

OK
*/
type SearchUsersOK struct {
	Payload *SearchUsersOKBody
}

// IsSuccess returns true when this search users o k response has a 2xx status code
func (o *SearchUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search users o k response has a 3xx status code
func (o *SearchUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search users o k response has a 4xx status code
func (o *SearchUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search users o k response has a 5xx status code
func (o *SearchUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search users o k response a status code equal to that given
func (o *SearchUsersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search users o k response
func (o *SearchUsersOK) Code() int {
	return 200
}

func (o *SearchUsersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersOK %s", 200, payload)
}

func (o *SearchUsersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersOK %s", 200, payload)
}

func (o *SearchUsersOK) GetPayload() *SearchUsersOKBody {
	return o.Payload
}

func (o *SearchUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchUsersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchUsersBadRequest creates a SearchUsersBadRequest with default headers values
func NewSearchUsersBadRequest() *SearchUsersBadRequest {
	return &SearchUsersBadRequest{}
}

/*
SearchUsersBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type SearchUsersBadRequest struct {
	Payload *SearchUsersBadRequestBody
}

// IsSuccess returns true when this search users bad request response has a 2xx status code
func (o *SearchUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search users bad request response has a 3xx status code
func (o *SearchUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search users bad request response has a 4xx status code
func (o *SearchUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search users bad request response has a 5xx status code
func (o *SearchUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search users bad request response a status code equal to that given
func (o *SearchUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search users bad request response
func (o *SearchUsersBadRequest) Code() int {
	return 400
}

func (o *SearchUsersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersBadRequest %s", 400, payload)
}

func (o *SearchUsersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersBadRequest %s", 400, payload)
}

func (o *SearchUsersBadRequest) GetPayload() *SearchUsersBadRequestBody {
	return o.Payload
}

func (o *SearchUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchUsersBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchUsersInternalServerError creates a SearchUsersInternalServerError with default headers values
func NewSearchUsersInternalServerError() *SearchUsersInternalServerError {
	return &SearchUsersInternalServerError{}
}

/*
SearchUsersInternalServerError describes a response with status code 500, with default header values.

Unexpected server error.
*/
type SearchUsersInternalServerError struct {
}

// IsSuccess returns true when this search users internal server error response has a 2xx status code
func (o *SearchUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search users internal server error response has a 3xx status code
func (o *SearchUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search users internal server error response has a 4xx status code
func (o *SearchUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search users internal server error response has a 5xx status code
func (o *SearchUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search users internal server error response a status code equal to that given
func (o *SearchUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search users internal server error response
func (o *SearchUsersInternalServerError) Code() int {
	return 500
}

func (o *SearchUsersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersInternalServerError", 500)
}

func (o *SearchUsersInternalServerError) String() string {
	return fmt.Sprintf("[POST /ums/v1/users/search][%d] searchUsersInternalServerError", 500)
}

func (o *SearchUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchUsersBadRequestBody umsV1UsersGet400Response
swagger:model SearchUsersBadRequestBody
*/
type SearchUsersBadRequestBody struct {

	// details
	Details []*SearchUsersBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - INVALID_AMOUNT
	//  - CAPTURE_ALREADY_VOIDED
	//  - ACCOUNT_NOT_ALLOWED_CREDIT
	//  - NOT_SUPPORTED
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this search users bad request body
func (o *SearchUsersBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchUsersBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchUsersBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search users bad request body based on the context it is used
func (o *SearchUsersBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchUsersBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchUsersBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchUsersBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersBadRequestBodyDetailsItems0 search users bad request body details items0
swagger:model SearchUsersBadRequestBodyDetailsItems0
*/
type SearchUsersBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this search users bad request body details items0
func (o *SearchUsersBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search users bad request body details items0 based on context it is used
func (o *SearchUsersBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SearchUsersBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersBody search users body
// Example: {"organizationId":"merchantId","permissionId":"CustomerProfileViewPermission","role":"custom","userName":"userName"}
swagger:model SearchUsersBody
*/
type SearchUsersBody struct {

	// This is the orgId of the organization which the user belongs to.
	// Example: merchantId
	OrganizationID string `json:"organizationId,omitempty"`

	// permission that you are trying to search user on.
	// Example: CustomerProfileViewPermission
	PermissionID string `json:"permissionId,omitempty"`

	// role of the user you are trying to search on.
	// Example: custom
	RoleID string `json:"roleId,omitempty"`

	// User ID of the user you want to get details on.
	// Example: userName
	UserName string `json:"userName,omitempty"`
}

// Validate validates this search users body
func (o *SearchUsersBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search users body based on context it is used
func (o *SearchUsersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersBody) UnmarshalBinary(b []byte) error {
	var res SearchUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersOKBody umsV1UsersGet200Response
// Example: {"users":[{"accountInformation":{"createdTime":"2018-06-14T19:45:52.093Z","languagePreference":"en-US","lastAccessTime":"2018-06-14T19:45:52.093Z","permissions":["ReportViewPermission","ReportGeneratePermission"],"roleId":"admin","status":"active","timezone":"America/Los_Angeles","userName":"auto_nonmember"},"contactInformation":{"email":"auto_nonmember@exchange.com","firstName":"Zeta","lastName":"DMH","phoneNumber":"4445551234"},"customFields":{"department":"map","employeeDesignation":"abc","employeeId":"12344","employeeName":"John Doe","zone":"NA"},"organizationInformation":{"organizationId":"auto_nonmember"}}]}
swagger:model SearchUsersOKBody
*/
type SearchUsersOKBody struct {

	// users
	Users []*SearchUsersOKBodyUsersItems0 `json:"users"`
}

// Validate validates this search users o k body
func (o *SearchUsersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersOKBody) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search users o k body based on the context it is used
func (o *SearchUsersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersOKBody) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Users); i++ {

		if o.Users[i] != nil {

			if swag.IsZero(o.Users[i]) { // not required
				return nil
			}

			if err := o.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersOKBody) UnmarshalBinary(b []byte) error {
	var res SearchUsersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersOKBodyUsersItems0 search users o k body users items0
swagger:model SearchUsersOKBodyUsersItems0
*/
type SearchUsersOKBodyUsersItems0 struct {

	// account information
	AccountInformation *SearchUsersOKBodyUsersItems0AccountInformation `json:"accountInformation,omitempty"`

	// contact information
	ContactInformation *SearchUsersOKBodyUsersItems0ContactInformation `json:"contactInformation,omitempty"`

	// custom fields
	CustomFields map[string]string `json:"customFields,omitempty"`

	// organization information
	OrganizationInformation *SearchUsersOKBodyUsersItems0OrganizationInformation `json:"organizationInformation,omitempty"`
}

// Validate validates this search users o k body users items0
func (o *SearchUsersOKBodyUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrganizationInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersOKBodyUsersItems0) validateAccountInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountInformation) { // not required
		return nil
	}

	if o.AccountInformation != nil {
		if err := o.AccountInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SearchUsersOKBodyUsersItems0) validateContactInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ContactInformation) { // not required
		return nil
	}

	if o.ContactInformation != nil {
		if err := o.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SearchUsersOKBodyUsersItems0) validateOrganizationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrganizationInformation) { // not required
		return nil
	}

	if o.OrganizationInformation != nil {
		if err := o.OrganizationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search users o k body users items0 based on the context it is used
func (o *SearchUsersOKBodyUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccountInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrganizationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersOKBodyUsersItems0) contextValidateAccountInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.AccountInformation != nil {

		if swag.IsZero(o.AccountInformation) { // not required
			return nil
		}

		if err := o.AccountInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accountInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SearchUsersOKBodyUsersItems0) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ContactInformation != nil {

		if swag.IsZero(o.ContactInformation) { // not required
			return nil
		}

		if err := o.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (o *SearchUsersOKBodyUsersItems0) contextValidateOrganizationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrganizationInformation != nil {

		if swag.IsZero(o.OrganizationInformation) { // not required
			return nil
		}

		if err := o.OrganizationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0) UnmarshalBinary(b []byte) error {
	var res SearchUsersOKBodyUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersOKBodyUsersItems0AccountInformation search users o k body users items0 account information
swagger:model SearchUsersOKBodyUsersItems0AccountInformation
*/
type SearchUsersOKBodyUsersItems0AccountInformation struct {

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// language preference
	LanguagePreference string `json:"languagePreference,omitempty"`

	// last access time
	// Format: date-time
	LastAccessTime strfmt.DateTime `json:"lastAccessTime,omitempty"`

	// permissions
	Permissions []string `json:"permissions"`

	// role Id
	RoleID string `json:"roleId,omitempty"`

	// Valid values:
	// - active
	// - inactive
	// - locked
	// - disabled
	// - forgotpassword
	// - deleted
	//
	Status string `json:"status,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this search users o k body users items0 account information
func (o *SearchUsersOKBodyUsersItems0AccountInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastAccessTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersOKBodyUsersItems0AccountInformation) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("accountInformation"+"."+"createdTime", "body", "date-time", o.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SearchUsersOKBodyUsersItems0AccountInformation) validateLastAccessTime(formats strfmt.Registry) error {
	if swag.IsZero(o.LastAccessTime) { // not required
		return nil
	}

	if err := validate.FormatOf("accountInformation"+"."+"lastAccessTime", "body", "date-time", o.LastAccessTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search users o k body users items0 account information based on context it is used
func (o *SearchUsersOKBodyUsersItems0AccountInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0AccountInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0AccountInformation) UnmarshalBinary(b []byte) error {
	var res SearchUsersOKBodyUsersItems0AccountInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersOKBodyUsersItems0ContactInformation search users o k body users items0 contact information
swagger:model SearchUsersOKBodyUsersItems0ContactInformation
*/
type SearchUsersOKBodyUsersItems0ContactInformation struct {

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this search users o k body users items0 contact information
func (o *SearchUsersOKBodyUsersItems0ContactInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search users o k body users items0 contact information based on context it is used
func (o *SearchUsersOKBodyUsersItems0ContactInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0ContactInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0ContactInformation) UnmarshalBinary(b []byte) error {
	var res SearchUsersOKBodyUsersItems0ContactInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchUsersOKBodyUsersItems0OrganizationInformation search users o k body users items0 organization information
swagger:model SearchUsersOKBodyUsersItems0OrganizationInformation
*/
type SearchUsersOKBodyUsersItems0OrganizationInformation struct {

	// organization Id
	OrganizationID string `json:"organizationId,omitempty"`
}

// Validate validates this search users o k body users items0 organization information
func (o *SearchUsersOKBodyUsersItems0OrganizationInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search users o k body users items0 organization information based on context it is used
func (o *SearchUsersOKBodyUsersItems0OrganizationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0OrganizationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersOKBodyUsersItems0OrganizationInformation) UnmarshalBinary(b []byte) error {
	var res SearchUsersOKBodyUsersItems0OrganizationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
