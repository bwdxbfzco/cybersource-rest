// Code generated by go-swagger; DO NOT EDIT.

package verification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VerifyCustomerAddressReader is a Reader for the VerifyCustomerAddress structure.
type VerifyCustomerAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyCustomerAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewVerifyCustomerAddressCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVerifyCustomerAddressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewVerifyCustomerAddressBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /risk/v1/address-verifications] verifyCustomerAddress", response, response.Code())
	}
}

// NewVerifyCustomerAddressCreated creates a VerifyCustomerAddressCreated with default headers values
func NewVerifyCustomerAddressCreated() *VerifyCustomerAddressCreated {
	return &VerifyCustomerAddressCreated{}
}

/*
VerifyCustomerAddressCreated describes a response with status code 201, with default header values.

Successful response
*/
type VerifyCustomerAddressCreated struct {
	Payload *VerifyCustomerAddressCreatedBody
}

// IsSuccess returns true when this verify customer address created response has a 2xx status code
func (o *VerifyCustomerAddressCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify customer address created response has a 3xx status code
func (o *VerifyCustomerAddressCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify customer address created response has a 4xx status code
func (o *VerifyCustomerAddressCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify customer address created response has a 5xx status code
func (o *VerifyCustomerAddressCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this verify customer address created response a status code equal to that given
func (o *VerifyCustomerAddressCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the verify customer address created response
func (o *VerifyCustomerAddressCreated) Code() int {
	return 201
}

func (o *VerifyCustomerAddressCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressCreated %s", 201, payload)
}

func (o *VerifyCustomerAddressCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressCreated %s", 201, payload)
}

func (o *VerifyCustomerAddressCreated) GetPayload() *VerifyCustomerAddressCreatedBody {
	return o.Payload
}

func (o *VerifyCustomerAddressCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VerifyCustomerAddressCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyCustomerAddressBadRequest creates a VerifyCustomerAddressBadRequest with default headers values
func NewVerifyCustomerAddressBadRequest() *VerifyCustomerAddressBadRequest {
	return &VerifyCustomerAddressBadRequest{}
}

/*
VerifyCustomerAddressBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type VerifyCustomerAddressBadRequest struct {
	Payload *VerifyCustomerAddressBadRequestBody
}

// IsSuccess returns true when this verify customer address bad request response has a 2xx status code
func (o *VerifyCustomerAddressBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify customer address bad request response has a 3xx status code
func (o *VerifyCustomerAddressBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify customer address bad request response has a 4xx status code
func (o *VerifyCustomerAddressBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify customer address bad request response has a 5xx status code
func (o *VerifyCustomerAddressBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this verify customer address bad request response a status code equal to that given
func (o *VerifyCustomerAddressBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the verify customer address bad request response
func (o *VerifyCustomerAddressBadRequest) Code() int {
	return 400
}

func (o *VerifyCustomerAddressBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressBadRequest %s", 400, payload)
}

func (o *VerifyCustomerAddressBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressBadRequest %s", 400, payload)
}

func (o *VerifyCustomerAddressBadRequest) GetPayload() *VerifyCustomerAddressBadRequestBody {
	return o.Payload
}

func (o *VerifyCustomerAddressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VerifyCustomerAddressBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyCustomerAddressBadGateway creates a VerifyCustomerAddressBadGateway with default headers values
func NewVerifyCustomerAddressBadGateway() *VerifyCustomerAddressBadGateway {
	return &VerifyCustomerAddressBadGateway{}
}

/*
VerifyCustomerAddressBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type VerifyCustomerAddressBadGateway struct {
	Payload *VerifyCustomerAddressBadGatewayBody
}

// IsSuccess returns true when this verify customer address bad gateway response has a 2xx status code
func (o *VerifyCustomerAddressBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify customer address bad gateway response has a 3xx status code
func (o *VerifyCustomerAddressBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify customer address bad gateway response has a 4xx status code
func (o *VerifyCustomerAddressBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify customer address bad gateway response has a 5xx status code
func (o *VerifyCustomerAddressBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this verify customer address bad gateway response a status code equal to that given
func (o *VerifyCustomerAddressBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the verify customer address bad gateway response
func (o *VerifyCustomerAddressBadGateway) Code() int {
	return 502
}

func (o *VerifyCustomerAddressBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressBadGateway %s", 502, payload)
}

func (o *VerifyCustomerAddressBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /risk/v1/address-verifications][%d] verifyCustomerAddressBadGateway %s", 502, payload)
}

func (o *VerifyCustomerAddressBadGateway) GetPayload() *VerifyCustomerAddressBadGatewayBody {
	return o.Payload
}

func (o *VerifyCustomerAddressBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VerifyCustomerAddressBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
VerifyCustomerAddressBadGatewayBody riskV1AddressVerificationsPost502Response
swagger:model VerifyCustomerAddressBadGatewayBody
*/
type VerifyCustomerAddressBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this verify customer address bad gateway body
func (o *VerifyCustomerAddressBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this verify customer address bad gateway body based on context it is used
func (o *VerifyCustomerAddressBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressBadRequestBody riskV1AddressVerificationsPost400Response
swagger:model VerifyCustomerAddressBadRequestBody
*/
type VerifyCustomerAddressBadRequestBody struct {

	// details
	Details []*VerifyCustomerAddressBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible Values:
	// - `MISSING_FIELD`
	// - `INVALID_DATA`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this verify customer address bad request body
func (o *VerifyCustomerAddressBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this verify customer address bad request body based on the context it is used
func (o *VerifyCustomerAddressBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressBadRequestBody) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressBadRequestBodyDetailsItems0 verify customer address bad request body details items0
swagger:model VerifyCustomerAddressBadRequestBodyDetailsItems0
*/
type VerifyCustomerAddressBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this verify customer address bad request body details items0
func (o *VerifyCustomerAddressBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this verify customer address bad request body details items0 based on context it is used
func (o *VerifyCustomerAddressBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressBody verify customer address body
swagger:model VerifyCustomerAddressBody
*/
type VerifyCustomerAddressBody struct {

	// buyer information
	BuyerInformation *VerifyCustomerAddressParamsBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *VerifyCustomerAddressParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// order information
	OrderInformation *VerifyCustomerAddressParamsBodyOrderInformation `json:"orderInformation,omitempty"`
}

// Validate validates this verify customer address body
func (o *VerifyCustomerAddressBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressBody) validateBuyerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verify customer address body based on the context it is used
func (o *VerifyCustomerAddressBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBuyerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressBody) contextValidateBuyerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.BuyerInformation != nil {

		if swag.IsZero(o.BuyerInformation) { // not required
			return nil
		}

		if err := o.BuyerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "buyerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressBody) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBody riskV1AddressVerificationsPost201Response
swagger:model VerifyCustomerAddressCreatedBody
*/
type VerifyCustomerAddressCreatedBody struct {

	// links
	Links *VerifyCustomerAddressCreatedBodyLinks `json:"_links,omitempty"`

	// address verification information
	AddressVerificationInformation *VerifyCustomerAddressCreatedBodyAddressVerificationInformation `json:"addressVerificationInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *VerifyCustomerAddressCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// error information
	ErrorInformation *VerifyCustomerAddressCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The message describing the reason of the status. Value can be
	//   - Apartment number missing or not found.
	//   - Insufficient address information.
	//   - House/Box number not found on street.
	//   - Multiple address matches were found.
	//   - P.O. Box identifier not found or out of range.
	//   - Route service identifier not found or out of range.
	//   - Street name not found in Postal code.
	//   - Postal code not found in database.
	//   - Unable to verify or correct address.
	//   - Multiple addres matches were found (international)
	//   - Address match not found (no reason given)
	//   - Unsupported character set
	//
	Message string `json:"message,omitempty"`

	// The status for the call can be:
	// - COMPLETED
	// - INVALID_REQUEST
	// - DECLINED
	//
	Status string `json:"status,omitempty"`

	// Time that the transaction was submitted in local time. Generated by Cybersource.
	SubmitTimeLocal string `json:"submitTimeLocal,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this verify customer address created body
func (o *VerifyCustomerAddressCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddressVerificationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) validateAddressVerificationInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.AddressVerificationInformation) { // not required
		return nil
	}

	if o.AddressVerificationInformation != nil {
		if err := o.AddressVerificationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this verify customer address created body based on the context it is used
func (o *VerifyCustomerAddressCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAddressVerificationInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) contextValidateAddressVerificationInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.AddressVerificationInformation != nil {

		if swag.IsZero(o.AddressVerificationInformation) { // not required
			return nil
		}

		if err := o.AddressVerificationInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBody) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyAddressVerificationInformation verify customer address created body address verification information
swagger:model VerifyCustomerAddressCreatedBodyAddressVerificationInformation
*/
type VerifyCustomerAddressCreatedBodyAddressVerificationInformation struct {

	// Contains the record type of the postal code with which the address was matched.
	//
	// #### U.S. Addresses
	// Depending on the quantity and quality of the address information provided,
	// this field contains one or two characters:
	//
	// - One character: sufficient correct information was provided to result in accurate matching.
	// - Two characters: standardization would provide a better address if more or better
	// input address information were available. The second character is D (default).
	//
	// Blank fields are unassigned. When an address cannot be standardized, how the input
	// data was parsed determines the address type. In this case, standardization may indicate a street, rural route,
	// highway contract, general delivery, or PO box. For possible values, see the description for the `dav_address_type` reply field in [CyberSource Verification Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/Verification_Svcs_SCMP_API/html/)
	//
	// #### All Other Countries
	// This field contains one of the following values:
	// - P: Post.
	// - S: Street.
	// - x: Unknown.
	//
	// Max Length: 255
	AddressType string `json:"addressType,omitempty"`

	// Value can be
	// - Canada
	// - US
	// - International
	// The values of errorCode and statusCode mean different things depending on the applicable region.
	// Refer to the guide for more info.
	//
	// Max Length: 255
	ApplicableRegion string `json:"applicableRegion,omitempty"`

	// bar code
	BarCode *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode `json:"barCode,omitempty"`

	// Care of data dropped from the standard address.
	// Max Length: 255
	CareOf string `json:"careOf,omitempty"`

	// Four-character error code returned for Canadian, US and international addresses.
	// For possible values, see Verification Services guide.
	// The meaning of the errorCode depends on value of applicableRegion.
	//
	// Max Length: 255
	ErrorCode string `json:"errorCode,omitempty"`

	// Indicates the probable correctness of the address match. Returned for U.S. and Canadian addresses.
	// Returns a value from 0-9, where 0 is most likely to be correct and 9 is least
	// likely to be correct, or -1 if there is no address match.
	//
	MatchScore int64 `json:"matchScore,omitempty"`

	// standard address
	StandardAddress *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress `json:"standardAddress,omitempty"`

	// Four-to-ten character status code returned for Canadian, US and international addresses.
	// For possible values, see Verification Services guide.
	// The meaning of the errorCode depends on value of applicableRegion.
	//
	// Max Length: 255
	StatusCode string `json:"statusCode,omitempty"`
}

// Validate validates this verify customer address created body address verification information
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicableRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBarCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCareOf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStandardAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateAddressType(formats strfmt.Registry) error {
	if swag.IsZero(o.AddressType) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"addressType", "body", o.AddressType, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateApplicableRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicableRegion) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"applicableRegion", "body", o.ApplicableRegion, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateBarCode(formats strfmt.Registry) error {
	if swag.IsZero(o.BarCode) { // not required
		return nil
	}

	if o.BarCode != nil {
		if err := o.BarCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "barCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "barCode")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateCareOf(formats strfmt.Registry) error {
	if swag.IsZero(o.CareOf) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"careOf", "body", o.CareOf, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateErrorCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorCode) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"errorCode", "body", o.ErrorCode, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateStandardAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.StandardAddress) { // not required
		return nil
	}

	if o.StandardAddress != nil {
		if err := o.StandardAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) validateStatusCode(formats strfmt.Registry) error {
	if swag.IsZero(o.StatusCode) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"statusCode", "body", o.StatusCode, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this verify customer address created body address verification information based on the context it is used
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBarCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStandardAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) contextValidateBarCode(ctx context.Context, formats strfmt.Registry) error {

	if o.BarCode != nil {

		if swag.IsZero(o.BarCode) { // not required
			return nil
		}

		if err := o.BarCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "barCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "barCode")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) contextValidateStandardAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.StandardAddress != nil {

		if swag.IsZero(o.StandardAddress) { // not required
			return nil
		}

		if err := o.StandardAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyAddressVerificationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode verify customer address created body address verification information bar code
swagger:model VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode
*/
type VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode struct {

	// Check digit for the 11-digit delivery point bar code.
	CheckDigit float64 `json:"checkDigit,omitempty"`

	// Delivery point bar code determined from the input address.
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this verify customer address created body address verification information bar code
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"barCode"+"."+"value", "body", o.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address created body address verification information bar code based on context it is used
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyAddressVerificationInformationBarCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress verify customer address created body address verification information standard address
swagger:model VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress
*/
type VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress struct {

	// address1
	Address1 *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1 `json:"address1,omitempty"`

	// Second line of the standardized address.
	// Max Length: 255
	Address2 string `json:"address2,omitempty"`

	// Third line of the standardized address.
	// Max Length: 255
	Address3 string `json:"address3,omitempty"`

	// Fourth line of the standardized address.
	// Max Length: 255
	Address4 string `json:"address4,omitempty"`

	// U.S.P.S. standardized state or province abbreviation.
	// Max Length: 255
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Standardized country name.
	// Max Length: 255
	Country string `json:"country,omitempty"`

	// U.S. county if available.
	// Max Length: 255
	County string `json:"county,omitempty"`

	// Standardized city, state or province, and ZIP +4 code or postal code line.
	// Max Length: 255
	Csz string `json:"csz,omitempty"`

	// Standardized two-character ISO country code.
	// Max Length: 255
	IsoCountry string `json:"isoCountry,omitempty"`

	// Standardized city name.
	// Max Length: 255
	Locality string `json:"locality,omitempty"`

	// Standardized U.S. ZIP + 4 postal code.
	// Max Length: 255
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this verify customer address created body address verification information standard address
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCsz(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsoCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if o.Address1 != nil {
		if err := o.Address1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress" + "." + "address1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress" + "." + "address1")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"address2", "body", o.Address2, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateAddress3(formats strfmt.Registry) error {
	if swag.IsZero(o.Address3) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"address3", "body", o.Address3, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateAddress4(formats strfmt.Registry) error {
	if swag.IsZero(o.Address4) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"address4", "body", o.Address4, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"administrativeArea", "body", o.AdministrativeArea, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"country", "body", o.Country, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateCounty(formats strfmt.Registry) error {
	if swag.IsZero(o.County) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"county", "body", o.County, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateCsz(formats strfmt.Registry) error {
	if swag.IsZero(o.Csz) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"csz", "body", o.Csz, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateIsoCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.IsoCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"isoCountry", "body", o.IsoCountry, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"locality", "body", o.Locality, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"postalCode", "body", o.PostalCode, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this verify customer address created body address verification information standard address based on the context it is used
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) contextValidateAddress1(ctx context.Context, formats strfmt.Registry) error {

	if o.Address1 != nil {

		if swag.IsZero(o.Address1) { // not required
			return nil
		}

		if err := o.Address1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress" + "." + "address1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "addressVerificationInformation" + "." + "standardAddress" + "." + "address1")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1 verify customer address created body address verification information standard address address1
swagger:model VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1
*/
type VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1 struct {

	// First line of the standardized address, including apartment information.
	// Max Length: 255
	WithApartment string `json:"withApartment,omitempty"`

	// First line of the standardized address, without apartment information.
	// Returned for U.S. and Canadian addresses.
	//
	// Max Length: 255
	WithoutApartment string `json:"withoutApartment,omitempty"`
}

// Validate validates this verify customer address created body address verification information standard address address1
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWithApartment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWithoutApartment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) validateWithApartment(formats strfmt.Registry) error {
	if swag.IsZero(o.WithApartment) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"address1"+"."+"withApartment", "body", o.WithApartment, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) validateWithoutApartment(formats strfmt.Registry) error {
	if swag.IsZero(o.WithoutApartment) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"addressVerificationInformation"+"."+"standardAddress"+"."+"address1"+"."+"withoutApartment", "body", o.WithoutApartment, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address created body address verification information standard address address1 based on context it is used
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyAddressVerificationInformationStandardAddressAddress1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyClientReferenceInformation verify customer address created body client reference information
swagger:model VerifyCustomerAddressCreatedBodyClientReferenceInformation
*/
type VerifyCustomerAddressCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this verify customer address created body client reference information
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verify customer address created body client reference information based on the context it is used
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner verify customer address created body client reference information partner
swagger:model VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner
*/
type VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this verify customer address created body client reference information partner
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressCreated"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address created body client reference information partner based on context it is used
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyErrorInformation verify customer address created body error information
swagger:model VerifyCustomerAddressCreatedBodyErrorInformation
*/
type VerifyCustomerAddressCreatedBodyErrorInformation struct {

	// details
	Details []*VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status. Value can be
	//   - `APARTMENT_NUMBER_NOT_FOUND`
	//   - `INSUFFICIENT_ADDRESS_INFORMATION`
	//   - `HOUSE_OR_BOX_NUMBER_NOT_FOUND`
	//   - `MULTIPLE_ADDRESS_MATCHES`
	//   - `BOX_NUMBER_NOT_FOUND`
	//   - `ROUTE_SERVICE_NOT_FOUND`
	//   - `STREET_NAME_NOT_FOUND`
	//   - `POSTAL_CODE_NOT_FOUND`
	//   - `UNVERIFIABLE_ADDRESS`
	//   - `MULTIPLE_ADDRESS_MATCHES_INTERNATIONAL`
	//   - `ADDRESS_MATCH_NOT_FOUND`
	//   - `UNSUPPORTED_CHARACTER_SET`
	//   - `INVALID_MERCHANT_CONFIGURATION`
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this verify customer address created body error information
func (o *VerifyCustomerAddressCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this verify customer address created body error information based on the context it is used
func (o *VerifyCustomerAddressCreatedBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0 verify customer address created body error information details items0
swagger:model VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0
*/
type VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this verify customer address created body error information details items0
func (o *VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this verify customer address created body error information details items0 based on context it is used
func (o *VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyLinks verify customer address created body links
swagger:model VerifyCustomerAddressCreatedBodyLinks
*/
type VerifyCustomerAddressCreatedBodyLinks struct {

	// self
	Self *VerifyCustomerAddressCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this verify customer address created body links
func (o *VerifyCustomerAddressCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verify customer address created body links based on the context it is used
func (o *VerifyCustomerAddressCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressCreatedBodyLinksSelf verify customer address created body links self
swagger:model VerifyCustomerAddressCreatedBodyLinksSelf
*/
type VerifyCustomerAddressCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this verify customer address created body links self
func (o *VerifyCustomerAddressCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this verify customer address created body links self based on context it is used
func (o *VerifyCustomerAddressCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyBuyerInformation verify customer address params body buyer information
swagger:model VerifyCustomerAddressParamsBodyBuyerInformation
*/
type VerifyCustomerAddressParamsBodyBuyerInformation struct {

	// Optional customer's account ID, tracking number, reward number, or other unique number
	// that you assign to the customer for the purpose that you choose
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`
}

// Validate validates this verify customer address params body buyer information
func (o *VerifyCustomerAddressParamsBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyBuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"buyerInformation"+"."+"merchantCustomerId", "body", o.MerchantCustomerID, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address params body buyer information based on context it is used
func (o *VerifyCustomerAddressParamsBodyBuyerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyClientReferenceInformation verify customer address params body client reference information
swagger:model VerifyCustomerAddressParamsBodyClientReferenceInformation
*/
type VerifyCustomerAddressParamsBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Required: true
	// Max Length: 50
	Code *string `json:"code"`

	// Brief description of the order or any comment you wish to add to the order.
	//
	// Max Length: 255
	Comments string `json:"comments,omitempty"`

	// partner
	Partner *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner `json:"partner,omitempty"`
}

// Validate validates this verify customer address params body client reference information
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"clientReferenceInformation"+"."+"code", "body", *o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {
	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"clientReferenceInformation"+"."+"comments", "body", o.Comments, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verify customer address params body client reference information based on the context it is used
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {

		if swag.IsZero(o.Partner) { // not required
			return nil
		}

		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation" + "." + "partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "clientReferenceInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyClientReferenceInformationPartner verify customer address params body client reference information partner
swagger:model VerifyCustomerAddressParamsBodyClientReferenceInformationPartner
*/
type VerifyCustomerAddressParamsBodyClientReferenceInformationPartner struct {

	// Identifier for the developer that helped integrate a partner solution to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solutions built by that developer.
	// CyberSource assigns the ID to the developer.
	//
	// **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
	//
	// Max Length: 8
	DeveloperID string `json:"developerId,omitempty"`

	// Identifier for the partner that is integrated to CyberSource.
	//
	// Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.
	//
	// **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
	//
	// Max Length: 8
	SolutionID string `json:"solutionId,omitempty"`
}

// Validate validates this verify customer address params body client reference information partner
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeveloperID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSolutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) validateDeveloperID(formats strfmt.Registry) error {
	if swag.IsZero(o.DeveloperID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"developerId", "body", o.DeveloperID, 8); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) validateSolutionID(formats strfmt.Registry) error {
	if swag.IsZero(o.SolutionID) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"clientReferenceInformation"+"."+"partner"+"."+"solutionId", "body", o.SolutionID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address params body client reference information partner based on context it is used
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyClientReferenceInformationPartner) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyClientReferenceInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyOrderInformation verify customer address params body order information
swagger:model VerifyCustomerAddressParamsBodyOrderInformation
*/
type VerifyCustomerAddressParamsBodyOrderInformation struct {

	// bill to
	BillTo *VerifyCustomerAddressParamsBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// line items
	LineItems []*VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0 `json:"lineItems"`

	// ship to
	ShipTo *VerifyCustomerAddressParamsBodyOrderInformationShipTo `json:"shipTo,omitempty"`
}

// Validate validates this verify customer address params body order information
func (o *VerifyCustomerAddressParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {
	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verify customer address params body order information based on the context it is used
func (o *VerifyCustomerAddressParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLineItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {

		if swag.IsZero(o.BillTo) { // not required
			return nil
		}

		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) contextValidateLineItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LineItems); i++ {

		if o.LineItems[i] != nil {

			if swag.IsZero(o.LineItems[i]) { // not required
				return nil
			}

			if err := o.LineItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformation) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if o.ShipTo != nil {

		if swag.IsZero(o.ShipTo) { // not required
			return nil
		}

		if err := o.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verifyCustomerAddressRequest" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyOrderInformationBillTo verify customer address params body order information bill to
swagger:model VerifyCustomerAddressParamsBodyOrderInformationBillTo
*/
type VerifyCustomerAddressParamsBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer's records.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_,
	// it must be sent as _1 1st Street_.
	//
	// Required if keyed; not used if swiped.
	//
	// String (20)
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional.
	// String (60)
	//
	// #### For Payouts
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Required: true
	// Max Length: 60
	Address1 *string `json:"address1"`

	// Used for additional address information. For example: _Attention: Accounts Payable_
	// Optional field.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`,
	// CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters,
	// CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank.
	// Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### FDMS Nashville
	// `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters.
	// String (20)
	//
	// #### All Other Processors
	// String (60)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// Additional address information (third line of the billing address)
	//
	// Max Length: 60
	Address3 string `json:"address3,omitempty"`

	// Additional address information (fourth line of the billing address)
	//
	// Max Length: 60
	Address4 string `json:"address4,omitempty"`

	// State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless
	// ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
	//
	// #### SEPA/BACS
	// Required for Create Mandate and Import Mandate
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Required: true
	// Max Length: 2
	Country *string `json:"country"`

	// Payment card billing city.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Required: true
	// Max Length: 50
	Locality *string `json:"locality"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### SEPA
	// Required for Create Mandate and Import Mandate
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet
	// accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations
	// of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the
	// credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII
	// characters for transmission to the credit card networks.
	//
	// #### FDMS Nashville
	// Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada.
	// Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada.
	// Not used if swiped.
	//
	// #### RBS WorldPay Atlanta:
	// For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### All other processors:
	// Optional field.
	//
	// Required: true
	// Max Length: 10
	PostalCode *string `json:"postalCode"`
}

// Validate validates this verify customer address params body order information bill to
func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", o.Address1); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", *o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateAddress3(formats strfmt.Registry) error {
	if swag.IsZero(o.Address3) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address3", "body", o.Address3, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateAddress4(formats strfmt.Registry) error {
	if swag.IsZero(o.Address4) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address4", "body", o.Address4, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", o.Country); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", *o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", o.Locality); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", *o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", *o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address params body order information bill to based on context it is used
func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0 verify customer address params body order information line items items0
swagger:model VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0
*/
type VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0 struct {

	// Type of product. The value for this field is used to identify the product category (electronic, handling, physical,
	// service, or shipping). The default value is `default`.
	//
	// If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set
	// this field to a value other than `default` or one of the values related to shipping and/or handling, then
	// `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and
	// `orderInformation.lineItems[].productSku` fields are required.
	//
	// Optional field.
	//
	// For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// The Product Codes for the tax service are located in the Cybersource Tax Codes guide. Contact Customer Support to request the guide. If you don't send a tax service Product Code in your tax request, product-based rules or exemptions will not be applied and the transaction will default to fully taxable in the locations where you've indicated you need to collect tax [by way of nexus, no nexus, or seller registration number fields].
	//
	// Max Length: 255
	ProductCode string `json:"productCode,omitempty"`

	// For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of
	// the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Max Length: 255
	ProductName string `json:"productName,omitempty"`

	// Indicates the level of risk for the product. This field can contain one of the following values:
	// - `low`: The product is associated with few chargebacks.
	// - `normal`: The product is associated with a normal number of chargebacks.
	// - `high`: The product is associated with many chargebacks.
	//
	// Max Length: 6
	ProductRisk string `json:"productRisk,omitempty"`

	// Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.
	//
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is
	// required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
	//
	// Max Length: 255
	ProductSKU string `json:"productSKU,omitempty"`

	// Number of units for this order. Must be a non-negative integer.
	//
	// The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values
	// related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// Per-item price of the product. This value for this field cannot be negative.
	//
	// You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// You can include a decimal point (.), but you cannot include any other special characters.
	// The value is truncated to the correct number of decimal places.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either
	// the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)
	//
	// #### Tax Calculation
	// Required field for U.S., Canadian, international and value added taxes.
	//
	// #### Zero Amount Authorizations
	// If your processor supports zero amount authorizations, you can set this field to 0 for the
	// authorization to check if the card is lost or stolen.
	//
	// #### Maximum Field Lengths
	// For GPN and JCN Gateway: Decimal (10)
	// All other processors: Decimal (15)
	//
	// Required: true
	// Max Length: 15
	UnitPrice *string `json:"unitPrice"`
}

// Validate validates this verify customer address params body order information line items items0
func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductRisk(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSKU(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateProductCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductCode) { // not required
		return nil
	}

	if err := validate.MaxLength("productCode", "body", o.ProductCode, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateProductName(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductName) { // not required
		return nil
	}

	if err := validate.MaxLength("productName", "body", o.ProductName, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateProductRisk(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductRisk) { // not required
		return nil
	}

	if err := validate.MaxLength("productRisk", "body", o.ProductRisk, 6); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateProductSKU(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductSKU) { // not required
		return nil
	}

	if err := validate.MaxLength("productSKU", "body", o.ProductSKU, 255); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {
	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", o.Quantity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", o.Quantity, 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("unitPrice", "body", o.UnitPrice); err != nil {
		return err
	}

	if err := validate.MaxLength("unitPrice", "body", *o.UnitPrice, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address params body order information line items items0 based on context it is used
func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
VerifyCustomerAddressParamsBodyOrderInformationShipTo verify customer address params body order information ship to
swagger:model VerifyCustomerAddressParamsBodyOrderInformationShipTo
*/
type VerifyCustomerAddressParamsBodyOrderInformationShipTo struct {

	// First line of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Required: true
	// Max Length: 60
	Address1 *string `json:"address1"`

	// Second line of the shipping address.
	//
	// Optional field.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// Third line of the shipping address.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 60
	Address3 string `json:"address3,omitempty"`

	// Fourth line of the shipping address.
	// Max Length: 60
	Address4 string `json:"address4,omitempty"`

	// State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) (maximum length: 2)
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S.
	// or Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)
	//
	// Required field for authorization if any shipping address information is included in the request; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Required: true
	// Max Length: 2
	Country *string `json:"country"`

	// City of the shipping address.
	//
	// Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or
	// Canada; otherwise, optional.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// Required field for authorization if any shipping address information is included in the request and
	// shipping to the U.S. or Canada; otherwise, optional.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the
	// remaining value is longer than nine characters, the value is truncated starting from the right side.
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// Billing address objects will be used to determine the cardholder's location when shipTo objects are not present.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this verify customer address params body order information ship to
func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", o.Address1); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", *o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateAddress3(formats strfmt.Registry) error {
	if swag.IsZero(o.Address3) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address3", "body", o.Address3, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateAddress4(formats strfmt.Registry) error {
	if swag.IsZero(o.Address4) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"address4", "body", o.Address4, 60); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", o.Country); err != nil {
		return err
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", *o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("verifyCustomerAddressRequest"+"."+"orderInformation"+"."+"shipTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify customer address params body order information ship to based on context it is used
func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VerifyCustomerAddressParamsBodyOrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res VerifyCustomerAddressParamsBodyOrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
