// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllInvoicesReader is a Reader for the GetAllInvoices structure.
type GetAllInvoicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllInvoicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllInvoicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllInvoicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllInvoicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAllInvoicesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAllInvoicesOK creates a GetAllInvoicesOK with default headers values
func NewGetAllInvoicesOK() *GetAllInvoicesOK {
	return &GetAllInvoicesOK{}
}

/*
GetAllInvoicesOK describes a response with status code 200, with default header values.

OK.
*/
type GetAllInvoicesOK struct {
	Payload *GetAllInvoicesOKBody
}

// IsSuccess returns true when this get all invoices o k response has a 2xx status code
func (o *GetAllInvoicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all invoices o k response has a 3xx status code
func (o *GetAllInvoicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all invoices o k response has a 4xx status code
func (o *GetAllInvoicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all invoices o k response has a 5xx status code
func (o *GetAllInvoicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all invoices o k response a status code equal to that given
func (o *GetAllInvoicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all invoices o k response
func (o *GetAllInvoicesOK) Code() int {
	return 200
}

func (o *GetAllInvoicesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesOK %s", 200, payload)
}

func (o *GetAllInvoicesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesOK %s", 200, payload)
}

func (o *GetAllInvoicesOK) GetPayload() *GetAllInvoicesOKBody {
	return o.Payload
}

func (o *GetAllInvoicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllInvoicesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllInvoicesBadRequest creates a GetAllInvoicesBadRequest with default headers values
func NewGetAllInvoicesBadRequest() *GetAllInvoicesBadRequest {
	return &GetAllInvoicesBadRequest{}
}

/*
GetAllInvoicesBadRequest describes a response with status code 400, with default header values.

Invalid invoice status. The status should be one of: `DRAFT`, `CREATED`, `SENT`, `PARTIAL`, `PAID`, or `CANCELED`.
*/
type GetAllInvoicesBadRequest struct {
	Payload *GetAllInvoicesBadRequestBody
}

// IsSuccess returns true when this get all invoices bad request response has a 2xx status code
func (o *GetAllInvoicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all invoices bad request response has a 3xx status code
func (o *GetAllInvoicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all invoices bad request response has a 4xx status code
func (o *GetAllInvoicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all invoices bad request response has a 5xx status code
func (o *GetAllInvoicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all invoices bad request response a status code equal to that given
func (o *GetAllInvoicesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all invoices bad request response
func (o *GetAllInvoicesBadRequest) Code() int {
	return 400
}

func (o *GetAllInvoicesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesBadRequest %s", 400, payload)
}

func (o *GetAllInvoicesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesBadRequest %s", 400, payload)
}

func (o *GetAllInvoicesBadRequest) GetPayload() *GetAllInvoicesBadRequestBody {
	return o.Payload
}

func (o *GetAllInvoicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllInvoicesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllInvoicesNotFound creates a GetAllInvoicesNotFound with default headers values
func NewGetAllInvoicesNotFound() *GetAllInvoicesNotFound {
	return &GetAllInvoicesNotFound{}
}

/*
GetAllInvoicesNotFound describes a response with status code 404, with default header values.

No invoices found.
*/
type GetAllInvoicesNotFound struct {
	Payload *GetAllInvoicesNotFoundBody
}

// IsSuccess returns true when this get all invoices not found response has a 2xx status code
func (o *GetAllInvoicesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all invoices not found response has a 3xx status code
func (o *GetAllInvoicesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all invoices not found response has a 4xx status code
func (o *GetAllInvoicesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all invoices not found response has a 5xx status code
func (o *GetAllInvoicesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all invoices not found response a status code equal to that given
func (o *GetAllInvoicesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all invoices not found response
func (o *GetAllInvoicesNotFound) Code() int {
	return 404
}

func (o *GetAllInvoicesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesNotFound %s", 404, payload)
}

func (o *GetAllInvoicesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoicesNotFound %s", 404, payload)
}

func (o *GetAllInvoicesNotFound) GetPayload() *GetAllInvoicesNotFoundBody {
	return o.Payload
}

func (o *GetAllInvoicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllInvoicesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllInvoicesDefault creates a GetAllInvoicesDefault with default headers values
func NewGetAllInvoicesDefault(code int) *GetAllInvoicesDefault {
	return &GetAllInvoicesDefault{
		_statusCode: code,
	}
}

/*
GetAllInvoicesDefault describes a response with status code -1, with default header values.

Unexpected error.
*/
type GetAllInvoicesDefault struct {
	_statusCode int

	Payload *GetAllInvoicesDefaultBody
}

// IsSuccess returns true when this get all invoices default response has a 2xx status code
func (o *GetAllInvoicesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get all invoices default response has a 3xx status code
func (o *GetAllInvoicesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get all invoices default response has a 4xx status code
func (o *GetAllInvoicesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get all invoices default response has a 5xx status code
func (o *GetAllInvoicesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get all invoices default response a status code equal to that given
func (o *GetAllInvoicesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get all invoices default response
func (o *GetAllInvoicesDefault) Code() int {
	return o._statusCode
}

func (o *GetAllInvoicesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoices default %s", o._statusCode, payload)
}

func (o *GetAllInvoicesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /invoicing/v2/invoices][%d] getAllInvoices default %s", o._statusCode, payload)
}

func (o *GetAllInvoicesDefault) GetPayload() *GetAllInvoicesDefaultBody {
	return o.Payload
}

func (o *GetAllInvoicesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAllInvoicesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAllInvoicesBadRequestBody invoicingV2InvoicesAllGet400Response
// Example: {"details":[{"field":"customerInformation.email","reason":"Invalid email"}],"message":"Field validation errors.","reason":"VALIDATION_ERROR","status":"BADREQUEST","submitTimeUtc":"2019-07-01T21:40:10Z"}
swagger:model GetAllInvoicesBadRequestBody
*/
type GetAllInvoicesBadRequestBody struct {

	// details
	Details []*GetAllInvoicesBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	//   - BADREQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get all invoices bad request body
func (o *GetAllInvoicesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all invoices bad request body based on the context it is used
func (o *GetAllInvoicesBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesBadRequestBodyDetailsItems0 get all invoices bad request body details items0
swagger:model GetAllInvoicesBadRequestBodyDetailsItems0
*/
type GetAllInvoicesBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get all invoices bad request body details items0
func (o *GetAllInvoicesBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices bad request body details items0 based on context it is used
func (o *GetAllInvoicesBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesDefaultBody invoicingV2InvoicesAllGet502Response
// Example: {"message":"Error - General system failure.","reason":"SERVER_ERROR","status":"SERVER_ERROR","submitTimeUtc":"2018-06-12T09:27:20.000Z"}
swagger:model GetAllInvoicesDefaultBody
*/
type GetAllInvoicesDefaultBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get all invoices default body
func (o *GetAllInvoicesDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices default body based on context it is used
func (o *GetAllInvoicesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesNotFoundBody invoicingV2InvoicesAllGet404Response
// Example: {"message":"Invoice does not exist.","reason":"NOT_FOUND","status":"NOTFOUND","submitTimeUtc":"2019-07-01T21:36:29Z"}
swagger:model GetAllInvoicesNotFoundBody
*/
type GetAllInvoicesNotFoundBody struct {

	// details
	Details []*GetAllInvoicesNotFoundBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	//  - NOTFOUND
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get all invoices not found body
func (o *GetAllInvoicesNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesNotFoundBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all invoices not found body based on the context it is used
func (o *GetAllInvoicesNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesNotFoundBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesNotFoundBodyDetailsItems0 get all invoices not found body details items0
swagger:model GetAllInvoicesNotFoundBodyDetailsItems0
*/
type GetAllInvoicesNotFoundBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get all invoices not found body details items0
func (o *GetAllInvoicesNotFoundBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices not found body details items0 based on context it is used
func (o *GetAllInvoicesNotFoundBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesNotFoundBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesNotFoundBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesNotFoundBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBody invoicingV2InvoicesAllGet200Response
// Example: {"_links":{"next":{"href":"/v2/invoices/?offset=3\u0026limit=2\u0026status=draft","method":"GET"},"previous":{"href":"/v2/invoices/?offset=0\u0026limit=2\u0026status=draft","method":"GET"},"self":{"href":"/v2/invoices/?offset=1\u0026limit=2\u0026status=draft","method":"GET"}},"invoices":[{"_links":{"self":{"href":"/v2/invoices/98772","method":"GET"}},"_supportedActions":[{"href":"/v2/invoices/98772/delivery","method":"POST"},{"href":"/v2/invoices/98772","method":"PUT"},{"href":"/v2/invoices/98772/cancelation","method":"POST"}],"customerInformation":{"company":{"name":"ABC"},"merchantCustomerId":"1234","name":"Tanya Lee"},"id":"98772","invoiceInformation":{"dueDate":"2019-07-11"},"orderInformation":{"amountDetails":{"currency":"USD","totalAmount":"14249.56"}},"status":"DRAFT"},{"_links":{"self":{"href":"/v2/invoices/98771","method":"GET"}},"_supportedActions":[{"href":"/v2/invoices/98771/delivery","method":"POST"},{"href":"/v2/invoices/98771","method":"PUT"},{"href":"/v2/invoices/98771/cancelation","method":"POST"}],"customerInformation":{"company":{"name":"ABC"},"merchantCustomerId":"1234","name":"Tanya Lee"},"id":"98771","invoiceInformation":{"dueDate":"2019-07-11"},"orderInformation":{"amountDetails":{"currency":"USD","totalAmount":"14249.56"}},"status":"DRAFT"}],"submitTimeUtc":"2019-07-03T19:22:26Z","totalInvoices":123}
swagger:model GetAllInvoicesOKBody
*/
type GetAllInvoicesOKBody struct {

	// links
	Links *GetAllInvoicesOKBodyLinks `json:"_links,omitempty"`

	// invoices
	Invoices []*GetAllInvoicesOKBodyInvoicesItems0 `json:"invoices"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by Cybersource for all services.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// total invoices
	TotalInvoices int64 `json:"totalInvoices,omitempty"`
}

// Validate validates this get all invoices o k body
func (o *GetAllInvoicesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBody) validateInvoices(formats strfmt.Registry) error {
	if swag.IsZero(o.Invoices) { // not required
		return nil
	}

	for i := 0; i < len(o.Invoices); i++ {
		if swag.IsZero(o.Invoices[i]) { // not required
			continue
		}

		if o.Invoices[i] != nil {
			if err := o.Invoices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesOK" + "." + "invoices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesOK" + "." + "invoices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get all invoices o k body based on the context it is used
func (o *GetAllInvoicesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInvoices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBody) contextValidateInvoices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Invoices); i++ {

		if o.Invoices[i] != nil {

			if swag.IsZero(o.Invoices[i]) { // not required
				return nil
			}

			if err := o.Invoices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllInvoicesOK" + "." + "invoices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getAllInvoicesOK" + "." + "invoices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBody) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0 A list of invoices.
swagger:model GetAllInvoicesOKBodyInvoicesItems0
*/
type GetAllInvoicesOKBodyInvoicesItems0 struct {

	// links
	Links *GetAllInvoicesOKBodyInvoicesItems0Links `json:"_links,omitempty"`

	// customer information
	CustomerInformation *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation `json:"customerInformation,omitempty"`

	// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services.
	// It is also appended to the endpoint of the resource.
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// invoice information
	InvoiceInformation *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation `json:"invoiceInformation,omitempty"`

	// order information
	OrderInformation *GetAllInvoicesOKBodyInvoicesItems0OrderInformation `json:"orderInformation,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	// - DRAFT
	// - CREATED
	// - SENT
	// - PARTIAL
	// - PAID
	// - CANCELED
	//
	Status string `json:"status,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0
func (o *GetAllInvoicesOKBodyInvoicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoiceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) validateCustomerInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomerInformation) { // not required
		return nil
	}

	if o.CustomerInformation != nil {
		if err := o.CustomerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) validateInvoiceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.InvoiceInformation) { // not required
		return nil
	}

	if o.InvoiceInformation != nil {
		if err := o.InvoiceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all invoices o k body invoices items0 based on the context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomerInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInvoiceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) contextValidateCustomerInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.CustomerInformation != nil {

		if swag.IsZero(o.CustomerInformation) { // not required
			return nil
		}

		if err := o.CustomerInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) contextValidateInvoiceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.InvoiceInformation != nil {

		if swag.IsZero(o.InvoiceInformation) { // not required
			return nil
		}

		if err := o.InvoiceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0CustomerInformation get all invoices o k body invoices items0 customer information
swagger:model GetAllInvoicesOKBodyInvoicesItems0CustomerInformation
*/
type GetAllInvoicesOKBodyInvoicesItems0CustomerInformation struct {

	// Your identifier for the customer.
	//
	// When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.
	//
	// #### Comercio Latino
	// For recurring payments in Mexico, the value is the customer's contract number.
	// Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.
	//
	// #### Worldpay VAP
	// For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order
	// given, for a customer account ID value and uses the first value it finds:
	// 1. `customer_account_id` value in the follow-on credit request
	// 2. Customer account ID value that was used for the capture that is being credited
	// 3. Customer account ID value that was used for the original authorization
	// If a customer account ID value cannot be found in any of these locations, then no value is used.
	//
	// For processor-specific information, see the `customer_account_id` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`

	// Payer name for the invoice.
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 customer information
func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customerInformation"+"."+"merchantCustomerId", "body", o.MerchantCustomerID, 100); err != nil {
		return err
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("customerInformation"+"."+"name", "body", o.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 customer information based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0CustomerInformation) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0CustomerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation get all invoices o k body invoices items0 invoice information
swagger:model GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation
*/
type GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation struct {

	// The invoice due date. This field is required for creating an invoice.
	// Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
	//
	// Max Length: 10
	// Format: date
	DueDate strfmt.Date `json:"dueDate,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 invoice information
func (o *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation) validateDueDate(formats strfmt.Registry) error {
	if swag.IsZero(o.DueDate) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceInformation"+"."+"dueDate", "body", o.DueDate.String(), 10); err != nil {
		return err
	}

	if err := validate.FormatOf("invoiceInformation"+"."+"dueDate", "body", "date", o.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 invoice information based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0InvoiceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0Links get all invoices o k body invoices items0 links
swagger:model GetAllInvoicesOKBodyInvoicesItems0Links
*/
type GetAllInvoicesOKBodyInvoicesItems0Links struct {

	// cancel
	Cancel *GetAllInvoicesOKBodyInvoicesItems0LinksCancel `json:"cancel,omitempty"`

	// deliver
	Deliver *GetAllInvoicesOKBodyInvoicesItems0LinksDeliver `json:"deliver,omitempty"`

	// self
	Self *GetAllInvoicesOKBodyInvoicesItems0LinksSelf `json:"self,omitempty"`

	// update
	Update *GetAllInvoicesOKBodyInvoicesItems0LinksUpdate `json:"update,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 links
func (o *GetAllInvoicesOKBodyInvoicesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeliver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) validateCancel(formats strfmt.Registry) error {
	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) validateDeliver(formats strfmt.Registry) error {
	if swag.IsZero(o.Deliver) { // not required
		return nil
	}

	if o.Deliver != nil {
		if err := o.Deliver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "deliver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "deliver")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) validateUpdate(formats strfmt.Registry) error {
	if swag.IsZero(o.Update) { // not required
		return nil
	}

	if o.Update != nil {
		if err := o.Update.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "update")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all invoices o k body invoices items0 links based on the context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeliver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) contextValidateCancel(ctx context.Context, formats strfmt.Registry) error {

	if o.Cancel != nil {

		if swag.IsZero(o.Cancel) { // not required
			return nil
		}

		if err := o.Cancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "cancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) contextValidateDeliver(ctx context.Context, formats strfmt.Registry) error {

	if o.Deliver != nil {

		if swag.IsZero(o.Deliver) { // not required
			return nil
		}

		if err := o.Deliver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "deliver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "deliver")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0Links) contextValidateUpdate(ctx context.Context, formats strfmt.Registry) error {

	if o.Update != nil {

		if swag.IsZero(o.Update) { // not required
			return nil
		}

		if err := o.Update.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0Links) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0LinksCancel get all invoices o k body invoices items0 links cancel
swagger:model GetAllInvoicesOKBodyInvoicesItems0LinksCancel
*/
type GetAllInvoicesOKBodyInvoicesItems0LinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 links cancel
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 links cancel based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksCancel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksCancel) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0LinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0LinksDeliver get all invoices o k body invoices items0 links deliver
swagger:model GetAllInvoicesOKBodyInvoicesItems0LinksDeliver
*/
type GetAllInvoicesOKBodyInvoicesItems0LinksDeliver struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 links deliver
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksDeliver) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 links deliver based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksDeliver) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksDeliver) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksDeliver) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0LinksDeliver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0LinksSelf get all invoices o k body invoices items0 links self
swagger:model GetAllInvoicesOKBodyInvoicesItems0LinksSelf
*/
type GetAllInvoicesOKBodyInvoicesItems0LinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 links self
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 links self based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0LinksUpdate get all invoices o k body invoices items0 links update
swagger:model GetAllInvoicesOKBodyInvoicesItems0LinksUpdate
*/
type GetAllInvoicesOKBodyInvoicesItems0LinksUpdate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 links update
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksUpdate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 links update based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksUpdate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0LinksUpdate) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0LinksUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0OrderInformation get all invoices o k body invoices items0 order information
swagger:model GetAllInvoicesOKBodyInvoicesItems0OrderInformation
*/
type GetAllInvoicesOKBodyInvoicesItems0OrderInformation struct {

	// amount details
	AmountDetails *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 order information
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all invoices o k body invoices items0 order information based on the context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformation) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0OrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails Contains all of the amount-related fields for a list of invoices.
swagger:model GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails
*/
type GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this get all invoices o k body invoices items0 order information amount details
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get all invoices o k body invoices items0 order information amount details based on context it is used
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyInvoicesItems0OrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyLinks get all invoices o k body links
swagger:model GetAllInvoicesOKBodyLinks
*/
type GetAllInvoicesOKBodyLinks struct {

	// next
	Next *GetAllInvoicesOKBodyLinksNext `json:"next,omitempty"`

	// previous
	Previous *GetAllInvoicesOKBodyLinksPrevious `json:"previous,omitempty"`

	// self
	Self *GetAllInvoicesOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get all invoices o k body links
func (o *GetAllInvoicesOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrevious(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(o.Next) { // not required
		return nil
	}

	if o.Next != nil {
		if err := o.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyLinks) validatePrevious(formats strfmt.Registry) error {
	if swag.IsZero(o.Previous) { // not required
		return nil
	}

	if o.Previous != nil {
		if err := o.Previous.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "previous")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "previous")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get all invoices o k body links based on the context it is used
func (o *GetAllInvoicesOKBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePrevious(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllInvoicesOKBodyLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if o.Next != nil {

		if swag.IsZero(o.Next) { // not required
			return nil
		}

		if err := o.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyLinks) contextValidatePrevious(ctx context.Context, formats strfmt.Registry) error {

	if o.Previous != nil {

		if swag.IsZero(o.Previous) { // not required
			return nil
		}

		if err := o.Previous.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "previous")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "previous")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllInvoicesOKBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAllInvoicesOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyLinksNext get all invoices o k body links next
swagger:model GetAllInvoicesOKBodyLinksNext
*/
type GetAllInvoicesOKBodyLinksNext struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body links next
func (o *GetAllInvoicesOKBodyLinksNext) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body links next based on context it is used
func (o *GetAllInvoicesOKBodyLinksNext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksNext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksNext) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyLinksNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyLinksPrevious get all invoices o k body links previous
swagger:model GetAllInvoicesOKBodyLinksPrevious
*/
type GetAllInvoicesOKBodyLinksPrevious struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body links previous
func (o *GetAllInvoicesOKBodyLinksPrevious) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body links previous based on context it is used
func (o *GetAllInvoicesOKBodyLinksPrevious) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksPrevious) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksPrevious) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyLinksPrevious
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAllInvoicesOKBodyLinksSelf get all invoices o k body links self
swagger:model GetAllInvoicesOKBodyLinksSelf
*/
type GetAllInvoicesOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get all invoices o k body links self
func (o *GetAllInvoicesOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get all invoices o k body links self based on context it is used
func (o *GetAllInvoicesOKBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllInvoicesOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllInvoicesOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
