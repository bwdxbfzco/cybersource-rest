// Code generated by go-swagger; DO NOT EDIT.

package conversion_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetConversionDetailReader is a Reader for the GetConversionDetail structure.
type GetConversionDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversionDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversionDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversionDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversionDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reporting/v3/conversion-details] getConversionDetail", response, response.Code())
	}
}

// NewGetConversionDetailOK creates a GetConversionDetailOK with default headers values
func NewGetConversionDetailOK() *GetConversionDetailOK {
	return &GetConversionDetailOK{}
}

/*
GetConversionDetailOK describes a response with status code 200, with default header values.

OK
*/
type GetConversionDetailOK struct {
	Payload *GetConversionDetailOKBody
}

// IsSuccess returns true when this get conversion detail o k response has a 2xx status code
func (o *GetConversionDetailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get conversion detail o k response has a 3xx status code
func (o *GetConversionDetailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion detail o k response has a 4xx status code
func (o *GetConversionDetailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversion detail o k response has a 5xx status code
func (o *GetConversionDetailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion detail o k response a status code equal to that given
func (o *GetConversionDetailOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get conversion detail o k response
func (o *GetConversionDetailOK) Code() int {
	return 200
}

func (o *GetConversionDetailOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailOK %s", 200, payload)
}

func (o *GetConversionDetailOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailOK %s", 200, payload)
}

func (o *GetConversionDetailOK) GetPayload() *GetConversionDetailOKBody {
	return o.Payload
}

func (o *GetConversionDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetConversionDetailOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversionDetailBadRequest creates a GetConversionDetailBadRequest with default headers values
func NewGetConversionDetailBadRequest() *GetConversionDetailBadRequest {
	return &GetConversionDetailBadRequest{}
}

/*
GetConversionDetailBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type GetConversionDetailBadRequest struct {
	Payload *GetConversionDetailBadRequestBody
}

// IsSuccess returns true when this get conversion detail bad request response has a 2xx status code
func (o *GetConversionDetailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion detail bad request response has a 3xx status code
func (o *GetConversionDetailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion detail bad request response has a 4xx status code
func (o *GetConversionDetailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion detail bad request response has a 5xx status code
func (o *GetConversionDetailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion detail bad request response a status code equal to that given
func (o *GetConversionDetailBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get conversion detail bad request response
func (o *GetConversionDetailBadRequest) Code() int {
	return 400
}

func (o *GetConversionDetailBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailBadRequest %s", 400, payload)
}

func (o *GetConversionDetailBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailBadRequest %s", 400, payload)
}

func (o *GetConversionDetailBadRequest) GetPayload() *GetConversionDetailBadRequestBody {
	return o.Payload
}

func (o *GetConversionDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetConversionDetailBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversionDetailNotFound creates a GetConversionDetailNotFound with default headers values
func NewGetConversionDetailNotFound() *GetConversionDetailNotFound {
	return &GetConversionDetailNotFound{}
}

/*
GetConversionDetailNotFound describes a response with status code 404, with default header values.

Conversion detail not found
*/
type GetConversionDetailNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this get conversion detail not found response has a 2xx status code
func (o *GetConversionDetailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversion detail not found response has a 3xx status code
func (o *GetConversionDetailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversion detail not found response has a 4xx status code
func (o *GetConversionDetailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversion detail not found response has a 5xx status code
func (o *GetConversionDetailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversion detail not found response a status code equal to that given
func (o *GetConversionDetailNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get conversion detail not found response
func (o *GetConversionDetailNotFound) Code() int {
	return 404
}

func (o *GetConversionDetailNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailNotFound %s", 404, payload)
}

func (o *GetConversionDetailNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reporting/v3/conversion-details][%d] getConversionDetailNotFound %s", 404, payload)
}

func (o *GetConversionDetailNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetConversionDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetConversionDetailBadRequestBody reportingV3ConversionDetailsGet400Response
//
// HTTP status code for client application
swagger:model GetConversionDetailBadRequestBody
*/
type GetConversionDetailBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*GetConversionDetailBadRequestBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get conversion detail bad request body
func (o *GetConversionDetailBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getConversionDetailBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConversionDetailBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConversionDetailBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetConversionDetailBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getConversionDetailBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetConversionDetailBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getConversionDetailBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetConversionDetailBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getConversionDetailBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getConversionDetailBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get conversion detail bad request body based on the context it is used
func (o *GetConversionDetailBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConversionDetailBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConversionDetailBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConversionDetailBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConversionDetailBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetConversionDetailBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetConversionDetailBadRequestBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model GetConversionDetailBadRequestBodyDetailsItems0
*/
type GetConversionDetailBadRequestBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get conversion detail bad request body details items0
func (o *GetConversionDetailBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get conversion detail bad request body details items0 based on context it is used
func (o *GetConversionDetailBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetConversionDetailBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConversionDetailBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetConversionDetailBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetConversionDetailOKBody reportingV3ConversionDetailsGet200Response
swagger:model GetConversionDetailOKBody
*/
type GetConversionDetailOKBody struct {

	// conversion details
	ConversionDetails []*GetConversionDetailOKBodyConversionDetailsItems0 `json:"conversionDetails"`

	// end time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty" xml:"ReportEndDate,attr,omitempty"`

	// Merchant Id
	// Example: testMerchantId
	OrganizationID string `json:"organizationId,omitempty" xml:"MerchantID,attr,omitempty"`

	// start time
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty" xml:"ReportStartDate,attr,omitempty"`
}

// Validate validates this get conversion detail o k body
func (o *GetConversionDetailOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConversionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailOKBody) validateConversionDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.ConversionDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.ConversionDetails); i++ {
		if swag.IsZero(o.ConversionDetails[i]) { // not required
			continue
		}

		if o.ConversionDetails[i] != nil {
			if err := o.ConversionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConversionDetailOK" + "." + "conversionDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConversionDetailOK" + "." + "conversionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetConversionDetailOKBody) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(o.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getConversionDetailOK"+"."+"endTime", "body", "date-time", o.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetConversionDetailOKBody) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getConversionDetailOK"+"."+"startTime", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get conversion detail o k body based on the context it is used
func (o *GetConversionDetailOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConversionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailOKBody) contextValidateConversionDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ConversionDetails); i++ {

		if o.ConversionDetails[i] != nil {

			if swag.IsZero(o.ConversionDetails[i]) { // not required
				return nil
			}

			if err := o.ConversionDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConversionDetailOK" + "." + "conversionDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConversionDetailOK" + "." + "conversionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConversionDetailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConversionDetailOKBody) UnmarshalBinary(b []byte) error {
	var res GetConversionDetailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetConversionDetailOKBodyConversionDetailsItems0 get conversion detail o k body conversion details items0
swagger:model GetConversionDetailOKBodyConversionDetailsItems0
*/
type GetConversionDetailOKBodyConversionDetailsItems0 struct {

	// Date of conversion
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	ConversionTime strfmt.DateTime `json:"conversionTime,omitempty" xml:"ConversionDate,attr,omitempty"`

	// Merchant reference number of a merchant
	// Example: 1234567890
	MerchantReferenceNumber string `json:"merchantReferenceNumber,omitempty" xml:"MerchantReferenceNumber,attr,omitempty"`

	// New decision
	// Example: ACCEPT
	NewDecision string `json:"newDecision,omitempty" xml:"NewDecision,omitempty"`

	// notes
	Notes []*GetConversionDetailOKBodyConversionDetailsItems0NotesItems0 `json:"notes" xml:"Notes"`

	// Original decision
	// Example: REVIEW
	OriginalDecision string `json:"originalDecision,omitempty" xml:"OriginalDecision,omitempty"`

	// Name of the profile
	// Example: Test Profile
	Profile string `json:"profile,omitempty" xml:"Profile,omitempty"`

	// Name of the queue
	// Example: Review Queue
	Queue string `json:"queue,omitempty" xml:"Queue,omitempty"`

	// Cybersource Transation request id
	// Example: 1234567890123456789012
	RequestID string `json:"requestId,omitempty" xml:"RequestID,attr,omitempty"`

	// User name of the reviewer
	// Example: testuserId
	Reviewer string `json:"reviewer,omitempty" xml:"Reviewer,omitempty"`

	// Comments of the reviewer
	// Example: Verified order.
	ReviewerComments string `json:"reviewerComments,omitempty" xml:"ReviewerComments,omitempty"`
}

// Validate validates this get conversion detail o k body conversion details items0
func (o *GetConversionDetailOKBodyConversionDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConversionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailOKBodyConversionDetailsItems0) validateConversionTime(formats strfmt.Registry) error {
	if swag.IsZero(o.ConversionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("conversionTime", "body", "date-time", o.ConversionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetConversionDetailOKBodyConversionDetailsItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(o.Notes) { // not required
		return nil
	}

	for i := 0; i < len(o.Notes); i++ {
		if swag.IsZero(o.Notes[i]) { // not required
			continue
		}

		if o.Notes[i] != nil {
			if err := o.Notes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get conversion detail o k body conversion details items0 based on the context it is used
func (o *GetConversionDetailOKBodyConversionDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailOKBodyConversionDetailsItems0) contextValidateNotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Notes); i++ {

		if o.Notes[i] != nil {

			if swag.IsZero(o.Notes[i]) { // not required
				return nil
			}

			if err := o.Notes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConversionDetailOKBodyConversionDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConversionDetailOKBodyConversionDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetConversionDetailOKBodyConversionDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetConversionDetailOKBodyConversionDetailsItems0NotesItems0 get conversion detail o k body conversion details items0 notes items0
swagger:model GetConversionDetailOKBodyConversionDetailsItems0NotesItems0
*/
type GetConversionDetailOKBodyConversionDetailsItems0NotesItems0 struct {

	// Note added by reviewer
	// Example: testuserId
	AddedBy string `json:"addedBy,omitempty" xml:"AddedBy,attr,omitempty"`

	// Comments given by the reviewer
	// Example: Verified the order and accepted.
	Comments string `json:"comments,omitempty" xml:"Comment,attr,omitempty"`

	// Time of the note added by reviewer
	// Example: 2017-10-01T10:10:10+05:00
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty" xml:"Date,attr,omitempty"`
}

// Validate validates this get conversion detail o k body conversion details items0 notes items0
func (o *GetConversionDetailOKBodyConversionDetailsItems0NotesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConversionDetailOKBodyConversionDetailsItems0NotesItems0) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get conversion detail o k body conversion details items0 notes items0 based on context it is used
func (o *GetConversionDetailOKBodyConversionDetailsItems0NotesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetConversionDetailOKBodyConversionDetailsItems0NotesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConversionDetailOKBodyConversionDetailsItems0NotesItems0) UnmarshalBinary(b []byte) error {
	var res GetConversionDetailOKBodyConversionDetailsItems0NotesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
