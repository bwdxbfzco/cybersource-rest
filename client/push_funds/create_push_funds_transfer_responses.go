// Code generated by go-swagger; DO NOT EDIT.

package push_funds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePushFundsTransferReader is a Reader for the CreatePushFundsTransfer structure.
type CreatePushFundsTransferReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePushFundsTransferReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePushFundsTransferCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePushFundsTransferBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreatePushFundsTransferUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreatePushFundsTransferNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreatePushFundsTransferBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pts/v1/push-funds-transfer] createPushFundsTransfer", response, response.Code())
	}
}

// NewCreatePushFundsTransferCreated creates a CreatePushFundsTransferCreated with default headers values
func NewCreatePushFundsTransferCreated() *CreatePushFundsTransferCreated {
	return &CreatePushFundsTransferCreated{}
}

/*
CreatePushFundsTransferCreated describes a response with status code 201, with default header values.

Successful response.
*/
type CreatePushFundsTransferCreated struct {
	Payload *CreatePushFundsTransferCreatedBody
}

// IsSuccess returns true when this create push funds transfer created response has a 2xx status code
func (o *CreatePushFundsTransferCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create push funds transfer created response has a 3xx status code
func (o *CreatePushFundsTransferCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create push funds transfer created response has a 4xx status code
func (o *CreatePushFundsTransferCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create push funds transfer created response has a 5xx status code
func (o *CreatePushFundsTransferCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create push funds transfer created response a status code equal to that given
func (o *CreatePushFundsTransferCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create push funds transfer created response
func (o *CreatePushFundsTransferCreated) Code() int {
	return 201
}

func (o *CreatePushFundsTransferCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferCreated %s", 201, payload)
}

func (o *CreatePushFundsTransferCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferCreated %s", 201, payload)
}

func (o *CreatePushFundsTransferCreated) GetPayload() *CreatePushFundsTransferCreatedBody {
	return o.Payload
}

func (o *CreatePushFundsTransferCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePushFundsTransferCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePushFundsTransferBadRequest creates a CreatePushFundsTransferBadRequest with default headers values
func NewCreatePushFundsTransferBadRequest() *CreatePushFundsTransferBadRequest {
	return &CreatePushFundsTransferBadRequest{}
}

/*
CreatePushFundsTransferBadRequest describes a response with status code 400, with default header values.

Invalid request.
*/
type CreatePushFundsTransferBadRequest struct {
	Payload *CreatePushFundsTransferBadRequestBody
}

// IsSuccess returns true when this create push funds transfer bad request response has a 2xx status code
func (o *CreatePushFundsTransferBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create push funds transfer bad request response has a 3xx status code
func (o *CreatePushFundsTransferBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create push funds transfer bad request response has a 4xx status code
func (o *CreatePushFundsTransferBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create push funds transfer bad request response has a 5xx status code
func (o *CreatePushFundsTransferBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create push funds transfer bad request response a status code equal to that given
func (o *CreatePushFundsTransferBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create push funds transfer bad request response
func (o *CreatePushFundsTransferBadRequest) Code() int {
	return 400
}

func (o *CreatePushFundsTransferBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferBadRequest %s", 400, payload)
}

func (o *CreatePushFundsTransferBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferBadRequest %s", 400, payload)
}

func (o *CreatePushFundsTransferBadRequest) GetPayload() *CreatePushFundsTransferBadRequestBody {
	return o.Payload
}

func (o *CreatePushFundsTransferBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePushFundsTransferBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePushFundsTransferUnauthorized creates a CreatePushFundsTransferUnauthorized with default headers values
func NewCreatePushFundsTransferUnauthorized() *CreatePushFundsTransferUnauthorized {
	return &CreatePushFundsTransferUnauthorized{}
}

/*
CreatePushFundsTransferUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type CreatePushFundsTransferUnauthorized struct {
	Payload *CreatePushFundsTransferUnauthorizedBody
}

// IsSuccess returns true when this create push funds transfer unauthorized response has a 2xx status code
func (o *CreatePushFundsTransferUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create push funds transfer unauthorized response has a 3xx status code
func (o *CreatePushFundsTransferUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create push funds transfer unauthorized response has a 4xx status code
func (o *CreatePushFundsTransferUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create push funds transfer unauthorized response has a 5xx status code
func (o *CreatePushFundsTransferUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create push funds transfer unauthorized response a status code equal to that given
func (o *CreatePushFundsTransferUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create push funds transfer unauthorized response
func (o *CreatePushFundsTransferUnauthorized) Code() int {
	return 401
}

func (o *CreatePushFundsTransferUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferUnauthorized %s", 401, payload)
}

func (o *CreatePushFundsTransferUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferUnauthorized %s", 401, payload)
}

func (o *CreatePushFundsTransferUnauthorized) GetPayload() *CreatePushFundsTransferUnauthorizedBody {
	return o.Payload
}

func (o *CreatePushFundsTransferUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePushFundsTransferUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePushFundsTransferNotFound creates a CreatePushFundsTransferNotFound with default headers values
func NewCreatePushFundsTransferNotFound() *CreatePushFundsTransferNotFound {
	return &CreatePushFundsTransferNotFound{}
}

/*
CreatePushFundsTransferNotFound describes a response with status code 404, with default header values.

Not Found.
*/
type CreatePushFundsTransferNotFound struct {
	Payload *CreatePushFundsTransferNotFoundBody
}

// IsSuccess returns true when this create push funds transfer not found response has a 2xx status code
func (o *CreatePushFundsTransferNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create push funds transfer not found response has a 3xx status code
func (o *CreatePushFundsTransferNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create push funds transfer not found response has a 4xx status code
func (o *CreatePushFundsTransferNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create push funds transfer not found response has a 5xx status code
func (o *CreatePushFundsTransferNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create push funds transfer not found response a status code equal to that given
func (o *CreatePushFundsTransferNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create push funds transfer not found response
func (o *CreatePushFundsTransferNotFound) Code() int {
	return 404
}

func (o *CreatePushFundsTransferNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferNotFound %s", 404, payload)
}

func (o *CreatePushFundsTransferNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferNotFound %s", 404, payload)
}

func (o *CreatePushFundsTransferNotFound) GetPayload() *CreatePushFundsTransferNotFoundBody {
	return o.Payload
}

func (o *CreatePushFundsTransferNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePushFundsTransferNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePushFundsTransferBadGateway creates a CreatePushFundsTransferBadGateway with default headers values
func NewCreatePushFundsTransferBadGateway() *CreatePushFundsTransferBadGateway {
	return &CreatePushFundsTransferBadGateway{}
}

/*
CreatePushFundsTransferBadGateway describes a response with status code 502, with default header values.

Unexpected system error or system timeout.
*/
type CreatePushFundsTransferBadGateway struct {
	Payload *CreatePushFundsTransferBadGatewayBody
}

// IsSuccess returns true when this create push funds transfer bad gateway response has a 2xx status code
func (o *CreatePushFundsTransferBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create push funds transfer bad gateway response has a 3xx status code
func (o *CreatePushFundsTransferBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create push funds transfer bad gateway response has a 4xx status code
func (o *CreatePushFundsTransferBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this create push funds transfer bad gateway response has a 5xx status code
func (o *CreatePushFundsTransferBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this create push funds transfer bad gateway response a status code equal to that given
func (o *CreatePushFundsTransferBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the create push funds transfer bad gateway response
func (o *CreatePushFundsTransferBadGateway) Code() int {
	return 502
}

func (o *CreatePushFundsTransferBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferBadGateway %s", 502, payload)
}

func (o *CreatePushFundsTransferBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pts/v1/push-funds-transfer][%d] createPushFundsTransferBadGateway %s", 502, payload)
}

func (o *CreatePushFundsTransferBadGateway) GetPayload() *CreatePushFundsTransferBadGatewayBody {
	return o.Payload
}

func (o *CreatePushFundsTransferBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePushFundsTransferBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreatePushFundsTransferBadGatewayBody pushFunds502Response
swagger:model CreatePushFundsTransferBadGatewayBody
*/
type CreatePushFundsTransferBadGatewayBody struct {

	// A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The detail message related to the status and reason listed above.
	//
	// Possible values:
	// - Error - General system failure.
	//
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	// - SYSTEM_ERROR
	//
	Reason string `json:"reason,omitempty"`

	// Possible values:
	// - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC.
	// Format: `YYYY-MM-DDThh:mm:ssZ`
	//
	// **Example**
	// `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time.
	// The `Z` indicates UTC.
	//
	// Max Length: 20
	// Min Length: 20
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create push funds transfer bad gateway body
func (o *CreatePushFundsTransferBadGatewayBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferBadGatewayBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferBadGateway"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferBadGatewayBody) validateSubmitTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTimeUtc) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferBadGateway"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferBadGateway"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer bad gateway body based on context it is used
func (o *CreatePushFundsTransferBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferBadRequestBody pushFunds400Response
swagger:model CreatePushFundsTransferBadRequestBody
*/
type CreatePushFundsTransferBadRequestBody struct {

	// details
	Details []*CreatePushFundsTransferBadRequestBodyDetailsItems0 `json:"details"`

	// A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The detail message related to the status and reason listed above.
	//
	// Possible values:
	// - Declined - One or more fields in the request contains invalid data
	// - Declined - The request is missing one or more fields
	// - Declined - There is a problem with your CyberSource merchant configuration.
	//
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	// - INVALID_DATA
	// - MISSING_FIELD
	// - INVALID_MERCHANT_CONFIGURATION
	// - INVALID_REQUEST
	// - INVALID_PAYMENT_ID
	//
	Reason string `json:"reason,omitempty"`

	// Possible values:
	// - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC.
	// Format: `YYYY-MM-DDThh:mm:ssZ`
	//
	// **Example**
	// `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time.
	// The `Z` indicates UTC.
	//
	// Max Length: 20
	// Min Length: 20
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create push funds transfer bad request body
func (o *CreatePushFundsTransferBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferBadRequestBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPushFundsTransferBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPushFundsTransferBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreatePushFundsTransferBadRequestBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferBadRequest"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTimeUtc) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer bad request body based on the context it is used
func (o *CreatePushFundsTransferBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPushFundsTransferBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPushFundsTransferBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferBadRequestBodyDetailsItems0 create push funds transfer bad request body details items0
swagger:model CreatePushFundsTransferBadRequestBodyDetailsItems0
*/
type CreatePushFundsTransferBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	// - MISSING_FIELD
	// - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create push funds transfer bad request body details items0
func (o *CreatePushFundsTransferBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer bad request body details items0 based on context it is used
func (o *CreatePushFundsTransferBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferBody create push funds transfer body
// Example: {"aggregatorInformation":{"aggregatorId":"123456","name":"abc","subMerchant":{"address1":"Paseo Padre Boulevard","administrativeArea":"840","country":"US","email":"abc@abc","id":"1234","locality":"Foster City","name":"John","phoneNumber":"123 123-1234","postalCode":"94440"}},"clientReferenceInformation":{"applicationName":"EXAMPLE API","applicationUser":"example_user","applicationVersion":"V1","code":"33557799"},"merchantDefinedInformation":{"key":"123","value":"abc"},"merchantInformation":{"categoryCode":"1234","merchantDescriptor":{"administrativeArea":"840","contact":"Example","country":"US","locality":"Foster City","name":"John","postalCode":"94440"},"submitLocalDateTime":"2021-08-19T10:07:57Z","vatRegistrationNumber":"PQRS123423456"},"orderInformation":{"amountDetails":{"currency":"AED","totalAmount":"53.00"},"isCryptocurrencyPurchase":"true","surcharge":{"amount":"54.00"}},"pointOfServiceInformation":{"catLevel":"1","entryMode":"contact","pinEntryCapability":"1","terminalCapability":"1","terminalId":"123"},"processingInformation":{"businessApplicationId":"WT","commerceIndicator":"INTERNET","networkRoutingOrder":"test","payoutsOptions":{"accountFundingReferenceId":"1234","retrievalReferenceNumber":"1234"},"purposeOfPayment":"test","reconciliationId":"1234","recurringOptions":{"loanPayment":true},"transactionReason":"test"},"processingOptions":{"fundingOptions":{"initiator":{"type":"S"}}},"recipientInformation":{"address1":"8310 Capital of Texas Highwas North","address2":"Bluffstone Drive","administrativeArea":"CA","country":"USA","dateOfBirth":"2000-12-12","firstName":"Jennifer","lastName":"Doe","locality":"Austin","middleInitial":"M","middleName":"A","paymentInformation":{"card":{"customer":{"id":"40195947"},"expirationMonth":"12","expirationYear":"2025","instrumentIdentifier":{"id":"38792480110"},"number":"4111111111111111","paymentInstrument":{"id":"1234567783"},"securityCode":"123","type":"001"}},"personalIdentification":{"id":"!23132456","type":"CUID"},"phoneNumber":"123 123-1234","postalCode":"78731"},"senderInformation":{"account":{"fundsSource":"01","number":"1234567890"},"address1":"Paseo Padre Boulevard","address2":"Bluffstone Drive","administrativeArea":"CA","country":"US","dateOfBirth":"20001212","firstName":"John","lastName":"Doe","locality":"Foster City","middleName":"A","name":"Tom","paymentInformation":{"card":{"expirationMonth":"12","expirationYear":"2025","number":"4111111111111111","securityCode":"932","sourceAccountType":"SA","type":"001"}},"personalIdentification":{"id":"123132456","personalIdType":"A","type":"BTHD"},"phoneNumber":"123 123-1234","postalCode":"94440","referenceNumber":"1234567890","vatRegistrationNumber":"PQRS123423456"}}
swagger:model CreatePushFundsTransferBody
*/
type CreatePushFundsTransferBody struct {

	// aggregator information
	AggregatorInformation *CreatePushFundsTransferParamsBodyAggregatorInformation `json:"aggregatorInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *CreatePushFundsTransferParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// merchant defined information
	MerchantDefinedInformation *CreatePushFundsTransferParamsBodyMerchantDefinedInformation `json:"merchantDefinedInformation,omitempty"`

	// merchant information
	MerchantInformation *CreatePushFundsTransferParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	// Required: true
	OrderInformation *CreatePushFundsTransferParamsBodyOrderInformation `json:"orderInformation"`

	// point of service information
	PointOfServiceInformation *CreatePushFundsTransferParamsBodyPointOfServiceInformation `json:"pointOfServiceInformation,omitempty"`

	// processing information
	// Required: true
	ProcessingInformation *CreatePushFundsTransferParamsBodyProcessingInformation `json:"processingInformation"`

	// processing options
	ProcessingOptions *CreatePushFundsTransferParamsBodyProcessingOptions `json:"processingOptions,omitempty"`

	// recipient information
	RecipientInformation *CreatePushFundsTransferParamsBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// sender information
	// Required: true
	SenderInformation *CreatePushFundsTransferParamsBodySenderInformation `json:"senderInformation"`
}

// Validate validates this create push funds transfer body
func (o *CreatePushFundsTransferBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAggregatorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePointOfServiceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSenderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferBody) validateAggregatorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.AggregatorInformation) { // not required
		return nil
	}

	if o.AggregatorInformation != nil {
		if err := o.AggregatorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "aggregatorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "aggregatorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateMerchantDefinedInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	if o.MerchantDefinedInformation != nil {
		if err := o.MerchantDefinedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantDefinedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantDefinedInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateOrderInformation(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"orderInformation", "body", o.OrderInformation); err != nil {
		return err
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validatePointOfServiceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PointOfServiceInformation) { // not required
		return nil
	}

	if o.PointOfServiceInformation != nil {
		if err := o.PointOfServiceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "pointOfServiceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "pointOfServiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateProcessingInformation(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"processingInformation", "body", o.ProcessingInformation); err != nil {
		return err
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateProcessingOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingOptions) { // not required
		return nil
	}

	if o.ProcessingOptions != nil {
		if err := o.ProcessingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateRecipientInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) validateSenderInformation(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"senderInformation", "body", o.SenderInformation); err != nil {
		return err
	}

	if o.SenderInformation != nil {
		if err := o.SenderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer body based on the context it is used
func (o *CreatePushFundsTransferBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAggregatorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantDefinedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePointOfServiceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipientInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSenderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateAggregatorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.AggregatorInformation != nil {

		if swag.IsZero(o.AggregatorInformation) { // not required
			return nil
		}

		if err := o.AggregatorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "aggregatorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "aggregatorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateMerchantDefinedInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDefinedInformation != nil {

		if swag.IsZero(o.MerchantDefinedInformation) { // not required
			return nil
		}

		if err := o.MerchantDefinedInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantDefinedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantDefinedInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidatePointOfServiceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PointOfServiceInformation != nil {

		if swag.IsZero(o.PointOfServiceInformation) { // not required
			return nil
		}

		if err := o.PointOfServiceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "pointOfServiceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "pointOfServiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {

		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateProcessingOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingOptions != nil {

		if swag.IsZero(o.ProcessingOptions) { // not required
			return nil
		}

		if err := o.ProcessingOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateRecipientInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RecipientInformation != nil {

		if swag.IsZero(o.RecipientInformation) { // not required
			return nil
		}

		if err := o.RecipientInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferBody) contextValidateSenderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.SenderInformation != nil {

		if err := o.SenderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBody pushFunds201Response
// Example: {"_links":{"self":{"href":"https://A GET link to the OCT","method":"GET"}},"clientReferenceInformation":{"code":"33557799","submitLocalDateTime":"2021-08-19T10:07:57Z"},"errorInformation":{"details":[{"field":"string","reason":"string"}],"message":"string","reason":"string"},"id":"4963015122056179201545","merchantInformation":{"merchantDescriptor":{"country":"US","locality":"Austin","name":"John"}},"orderInformation":{"amountDetails":{"currency":"AED","settlementAmount":"123","settlementCurrency":"USD","totalAmount":"53.00"}},"processorInformation":{"approvalCode":"123456","responseCode":"1234567890","responseCodeSource":"A","retrievalReferenceNumber":"1234567890","systemTraceAuditNumber":"123456","transactionId":"1234567890"},"recipientInformation":{"card":{"balance":"123","currency":"USD"}},"reconciliationId":"1234567890","status":"AUTHORIZED","submitTimeUtc":"2021-08-19T10:07:57Z"}
swagger:model CreatePushFundsTransferCreatedBody
*/
type CreatePushFundsTransferCreatedBody struct {

	// links
	Links *CreatePushFundsTransferCreatedBodyLinks `json:"_links,omitempty"`

	// client reference information
	ClientReferenceInformation *CreatePushFundsTransferCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// error information
	ErrorInformation *CreatePushFundsTransferCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// merchant information
	MerchantInformation *CreatePushFundsTransferCreatedBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *CreatePushFundsTransferCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// processor information
	ProcessorInformation *CreatePushFundsTransferCreatedBodyProcessorInformation `json:"processorInformation,omitempty"`

	// recipient information
	RecipientInformation *CreatePushFundsTransferCreatedBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is This value is used for reconciliation purposes.
	//
	// Max Length: 25
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	// - AUTHORIZED
	// - DECLINED
	// - SERVER_ERROR
	// - INVALID_REQUEST
	// - PARTIAL_AUTHORIZED
	//
	// Max Length: 18
	Status string `json:"status,omitempty"`

	// Time of request in UTC.
	// Format: `YYYY-MM-DDThh:mm:ssZ`
	//
	// **Example**
	// `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time.
	// The `Z` indicates UTC.
	//
	// Max Length: 20
	// Min Length: 20
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create push funds transfer created body
func (o *CreatePushFundsTransferCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateErrorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateMerchantInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateOrderInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateProcessorInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateRecipientInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"reconciliationId", "body", o.ReconciliationID, 25); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"status", "body", o.Status, 18); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) validateSubmitTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTimeUtc) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferCreated"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body based on the context it is used
func (o *CreatePushFundsTransferCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientReferenceInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateErrorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMerchantInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrderInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessorInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipientInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {

		if swag.IsZero(o.Links) { // not required
			return nil
		}

		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateClientReferenceInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ClientReferenceInformation != nil {

		if swag.IsZero(o.ClientReferenceInformation) { // not required
			return nil
		}

		if err := o.ClientReferenceInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "clientReferenceInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateErrorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ErrorInformation != nil {

		if swag.IsZero(o.ErrorInformation) { // not required
			return nil
		}

		if err := o.ErrorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateMerchantInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInformation != nil {

		if swag.IsZero(o.MerchantInformation) { // not required
			return nil
		}

		if err := o.MerchantInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateOrderInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.OrderInformation != nil {

		if swag.IsZero(o.OrderInformation) { // not required
			return nil
		}

		if err := o.OrderInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateProcessorInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessorInformation != nil {

		if swag.IsZero(o.ProcessorInformation) { // not required
			return nil
		}

		if err := o.ProcessorInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "processorInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBody) contextValidateRecipientInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.RecipientInformation != nil {

		if swag.IsZero(o.RecipientInformation) { // not required
			return nil
		}

		if err := o.RecipientInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyClientReferenceInformation create push funds transfer created body client reference information
swagger:model CreatePushFundsTransferCreatedBodyClientReferenceInformation
*/
type CreatePushFundsTransferCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Date and time at your physical location.
	//
	// Format: YYYYMMDDhhmmss, where YYYY = year, MM = month, DD = day, hh = hour, mm = minutes ss = seconds
	//
	// Max Length: 14
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`
}

// Validate validates this create push funds transfer created body client reference information
func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitLocalDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) validateSubmitLocalDateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitLocalDateTime) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"clientReferenceInformation"+"."+"submitLocalDateTime", "body", o.SubmitLocalDateTime, 14); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body client reference information based on context it is used
func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyErrorInformation create push funds transfer created body error information
swagger:model CreatePushFundsTransferCreatedBodyErrorInformation
*/
type CreatePushFundsTransferCreatedBodyErrorInformation struct {

	// details
	Details []*CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	//
	// Max Length: 256
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//
	// - CONTACT_PROCESSOR
	// - INVALID_MERCHANT_CONFIGURATION
	// - STOLEN_LOST_CARD
	// - PROCESSOR_DECLINED
	// - PARTIAL_APPROVAL
	// - PAYMENT_REFUSED
	// - INVALID_ACCOUNT
	// - ISSUER_UNAVAILABLE
	// - INSUFFICIENT_FUND
	// - EXPIRED_CARD
	// - INVALID_PIN
	// - UNAUTHORIZED_CARD
	// - EXCEEDS_CREDIT_LIMIT
	// - DEBIT_CARD_USAGE_LIMIT_EXCEEDED
	// - CVN_NOT_MATCH
	// - DUPLICATE_REQUEST
	// - GENERAL_DECLINE
	// - BLACKLISTED_CUSTOMER
	// - GATEWAY_TIMEOUT
	// - INVALID_DATA
	// - SYSTEM_ERROR
	// - SERVICE_UNAVAILABLE
	// - GATEWAY_TIMEOUT
	//
	// Max Length: 31
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create push funds transfer created body error information
func (o *CreatePushFundsTransferCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformation) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"errorInformation"+"."+"message", "body", o.Message, 256); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformation) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(o.Reason) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"errorInformation"+"."+"reason", "body", o.Reason, 31); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body error information based on the context it is used
func (o *CreatePushFundsTransferCreatedBodyErrorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformation) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createPushFundsTransferCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0 create push funds transfer created body error information details items0
swagger:model CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0
*/
type CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	//
	// Max Length: 256
	Field string `json:"field,omitempty"`

	// Possible reasons for the status
	//
	// Possible values:
	//
	// - MISSING_FIELD
	// - INVALID_DATA
	//
	// Max Length: 31
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create push funds transfer created body error information details items0
func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) validateField(formats strfmt.Registry) error {
	if swag.IsZero(o.Field) { // not required
		return nil
	}

	if err := validate.MaxLength("field", "body", o.Field, 256); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(o.Reason) { // not required
		return nil
	}

	if err := validate.MaxLength("reason", "body", o.Reason, 31); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body error information details items0 based on context it is used
func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyLinks create push funds transfer created body links
swagger:model CreatePushFundsTransferCreatedBodyLinks
*/
type CreatePushFundsTransferCreatedBodyLinks struct {

	// customer
	Customer *CreatePushFundsTransferCreatedBodyLinksCustomer `json:"customer,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// payment instrument
	PaymentInstrument *CreatePushFundsTransferCreatedBodyLinksPaymentInstrument `json:"paymentInstrument,omitempty"`

	// self
	Self *CreatePushFundsTransferCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this create push funds transfer created body links
func (o *CreatePushFundsTransferCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) validatePaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrument) { // not required
		return nil
	}

	if o.PaymentInstrument != nil {
		if err := o.PaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body links based on the context it is used
func (o *CreatePushFundsTransferCreatedBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) contextValidatePaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstrument != nil {

		if swag.IsZero(o.PaymentInstrument) { // not required
			return nil
		}

		if err := o.PaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {

		if swag.IsZero(o.Self) { // not required
			return nil
		}

		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyLinksCustomer A GET link to the customer supplied in the OCT
swagger:model CreatePushFundsTransferCreatedBodyLinksCustomer
*/
type CreatePushFundsTransferCreatedBodyLinksCustomer struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create push funds transfer created body links customer
func (o *CreatePushFundsTransferCreatedBodyLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer created body links customer based on context it is used
func (o *CreatePushFundsTransferCreatedBodyLinksCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksCustomer) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier A GET link to the instrument identifier used in the OCT
swagger:model CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier
*/
type CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create push funds transfer created body links instrument identifier
func (o *CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer created body links instrument identifier based on context it is used
func (o *CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyLinksInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyLinksPaymentInstrument A GET link to the payment instrument supplied in the OCT
swagger:model CreatePushFundsTransferCreatedBodyLinksPaymentInstrument
*/
type CreatePushFundsTransferCreatedBodyLinksPaymentInstrument struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create push funds transfer created body links payment instrument
func (o *CreatePushFundsTransferCreatedBodyLinksPaymentInstrument) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer created body links payment instrument based on context it is used
func (o *CreatePushFundsTransferCreatedBodyLinksPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyLinksPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyLinksSelf A GET link to the OCT
swagger:model CreatePushFundsTransferCreatedBodyLinksSelf
*/
type CreatePushFundsTransferCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create push funds transfer created body links self
func (o *CreatePushFundsTransferCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer created body links self based on context it is used
func (o *CreatePushFundsTransferCreatedBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyMerchantInformation create push funds transfer created body merchant information
swagger:model CreatePushFundsTransferCreatedBodyMerchantInformation
*/
type CreatePushFundsTransferCreatedBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this create push funds transfer created body merchant information
func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body merchant information based on the context it is used
func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor create push funds transfer created body merchant information merchant descriptor
swagger:model CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor
*/
type CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor struct {

	// Merchant's country.
	// Country code for your business location.
	//
	// ISO Standard Alpha Country Code.
	//
	// https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Your merchant name.
	//
	// Note For Chase Paymentech, the maximum data length is 22.
	//
	// Max Length: 23
	Name string `json:"name,omitempty"`
}

// Validate validates this create push funds transfer created body merchant information merchant descriptor
func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", o.Locality, 13); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"name", "body", o.Name, 23); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body merchant information merchant descriptor based on context it is used
func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyOrderInformation create push funds transfer created body order information
swagger:model CreatePushFundsTransferCreatedBodyOrderInformation
*/
type CreatePushFundsTransferCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this create push funds transfer created body order information
func (o *CreatePushFundsTransferCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body order information based on the context it is used
func (o *CreatePushFundsTransferCreatedBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if swag.IsZero(o.AmountDetails) { // not required
			return nil
		}

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails create push funds transfer created body order information amount details
swagger:model CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails
*/
type CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character ISO Standard Currency Codes
	//
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder's account. This field is returned for OCT transactions.
	//
	// Max Length: 12
	SettlementAmount string `json:"settlementAmount,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account. This field is returned for OCT transactions.
	//
	// Max Length: 3
	SettlementCurrency string `json:"settlementCurrency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// Note For Visa Platform Conenct, FDC Compass, and Chase Paymentech processors, the maximum length for this field is 12 numbers.
	//
	// Processor Amount Ranges:
	// Visa Platform Connect: .01-9999999999.99
	//
	// Mastercard Send: 1-9999999999.99
	//
	// FDC Compass: .01- 9999999999.994
	//
	// Chase Paymentech: .01-9999999999.99
	//
	// Max Length: 19
	// Min Length: 1
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create push funds transfer created body order information amount details
func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", *o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) validateSettlementAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementAmount", "body", o.SettlementAmount, 12); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) validateSettlementCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.SettlementCurrency) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementCurrency", "body", o.SettlementCurrency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body order information amount details based on context it is used
func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyProcessorInformation create push funds transfer created body processor information
swagger:model CreatePushFundsTransferCreatedBodyProcessorInformation
*/
type CreatePushFundsTransferCreatedBodyProcessorInformation struct {

	// Issuer-generated approval code for the transaction.
	//
	// Max Length: 6
	ApprovalCode string `json:"approvalCode,omitempty"`

	// Transaction status from the processor.
	//
	// Max Length: 15
	ResponseCode string `json:"responseCode,omitempty"`

	// Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
	//
	// Max Length: 1
	ResponseCodeSource string `json:"responseCodeSource,omitempty"`

	// Unique reference number returned by the processor that identifies the transaction at the network.
	//
	// Supported by Mastercard Send
	//
	// Max Length: 24
	RetrievalReferenceNumber string `json:"retrievalReferenceNumber,omitempty"`

	// System audit number. Returned by authorization and incremental authorization services.
	//
	// Visa Platform Connect
	//
	// System trace number that must be printed on the customer's receipt.
	//
	// Max Length: 6
	SystemTraceAuditNumber string `json:"systemTraceAuditNumber,omitempty"`

	// Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor.
	//
	TransactionID int64 `json:"transactionId,omitempty"`
}

// Validate validates this create push funds transfer created body processor information
func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApprovalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCodeSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetrievalReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemTraceAuditNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) validateApprovalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ApprovalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"processorInformation"+"."+"approvalCode", "body", o.ApprovalCode, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) validateResponseCode(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"processorInformation"+"."+"responseCode", "body", o.ResponseCode, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) validateResponseCodeSource(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseCodeSource) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"processorInformation"+"."+"responseCodeSource", "body", o.ResponseCodeSource, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) validateRetrievalReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.RetrievalReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"processorInformation"+"."+"retrievalReferenceNumber", "body", o.RetrievalReferenceNumber, 24); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) validateSystemTraceAuditNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.SystemTraceAuditNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"processorInformation"+"."+"systemTraceAuditNumber", "body", o.SystemTraceAuditNumber, 6); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body processor information based on context it is used
func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyRecipientInformation create push funds transfer created body recipient information
swagger:model CreatePushFundsTransferCreatedBodyRecipientInformation
*/
type CreatePushFundsTransferCreatedBodyRecipientInformation struct {

	// card
	Card *CreatePushFundsTransferCreatedBodyRecipientInformationCard `json:"card,omitempty"`
}

// Validate validates this create push funds transfer created body recipient information
func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer created body recipient information based on the context it is used
func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createPushFundsTransferCreated" + "." + "recipientInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferCreatedBodyRecipientInformationCard create push funds transfer created body recipient information card
swagger:model CreatePushFundsTransferCreatedBodyRecipientInformationCard
*/
type CreatePushFundsTransferCreatedBodyRecipientInformationCard struct {

	// This field shows the available balance in the prepaid account. Acquirers always receive the available balance in the transaction currency.
	//
	// Max Length: 12
	Balance string `json:"balance,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`
}

// Validate validates this create push funds transfer created body recipient information card
func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(o.Balance) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"recipientInformation"+"."+"card"+"."+"balance", "body", o.Balance, 12); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferCreated"+"."+"recipientInformation"+"."+"card"+"."+"currency", "body", o.Currency, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer created body recipient information card based on context it is used
func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferCreatedBodyRecipientInformationCard) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferCreatedBodyRecipientInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferNotFoundBody pushFunds404Response
swagger:model CreatePushFundsTransferNotFoundBody
*/
type CreatePushFundsTransferNotFoundBody struct {

	// A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The detail message related to the status and reason listed above.
	//
	// Possible values:
	// - The requested resource does not exist
	//
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	// - NOT_FOUND
	//
	Reason string `json:"reason,omitempty"`

	// Time of request in UTC.
	// Format: `YYYY-MM-DDThh:mm:ssZ`
	//
	// **Example**
	// `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time.
	// The `Z` indicates UTC.
	//
	// Max Length: 20
	// Min Length: 20
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create push funds transfer not found body
func (o *CreatePushFundsTransferNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferNotFoundBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferNotFound"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferNotFoundBody) validateSubmitTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTimeUtc) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferNotFound"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferNotFound"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer not found body based on context it is used
func (o *CreatePushFundsTransferNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyAggregatorInformation create push funds transfer params body aggregator information
swagger:model CreatePushFundsTransferParamsBodyAggregatorInformation
*/
type CreatePushFundsTransferParamsBodyAggregatorInformation struct {

	// Value that identifies you as a payment aggregator.
	// Get this value from the processor.
	//
	// FDC Compass
	// This value must consist of uppercase letters.
	//
	// Visa Platform Connect
	// The value for this field corresponds to the following data in the TC 33 capture file:
	// - `Record`: CP01 TCR6
	// - `Position`: 95-105
	// - `Field`: Market Identifier / Payment Facilitator ID
	//
	// Max Length: 20
	AggregatorID string `json:"aggregatorId,omitempty"`

	// Your payment aggregator business name.
	//
	// Visa Platform COnnect
	// With American Express, the maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// For processor-specific information, see the aggregator_name field in Credit Card Services Using the SCMP API.
	//
	// Max Length: 37
	Name string `json:"name,omitempty"`

	// sub merchant
	SubMerchant *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant `json:"subMerchant,omitempty"`
}

// Validate validates this create push funds transfer params body aggregator information
func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAggregatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubMerchant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) validateAggregatorID(formats strfmt.Registry) error {
	if swag.IsZero(o.AggregatorID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"aggregatorId", "body", o.AggregatorID, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"name", "body", o.Name, 37); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) validateSubMerchant(formats strfmt.Registry) error {
	if swag.IsZero(o.SubMerchant) { // not required
		return nil
	}

	if o.SubMerchant != nil {
		if err := o.SubMerchant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "aggregatorInformation" + "." + "subMerchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "aggregatorInformation" + "." + "subMerchant")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body aggregator information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSubMerchant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) contextValidateSubMerchant(ctx context.Context, formats strfmt.Registry) error {

	if o.SubMerchant != nil {

		if swag.IsZero(o.SubMerchant) { // not required
			return nil
		}

		if err := o.SubMerchant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "aggregatorInformation" + "." + "subMerchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "aggregatorInformation" + "." + "subMerchant")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyAggregatorInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyAggregatorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant create push funds transfer params body aggregator information sub merchant
swagger:model CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant
*/
type CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant struct {

	// First line of the sub-merchant's street address.
	//
	// Visa Platform Connect
	// The value for this field does not map to the TC 33 capture file5.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 38
	Address1 string `json:"address1,omitempty"`

	// Sub-merchant's state or province.
	// See https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf
	//
	// Visa Platform Connect
	// The value for this field does not map to the TC 33 capture file.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 3
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Sub-merchant's country. Use the ISO Standard numeric Country Codes.
	//
	// See https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf
	//
	// Visa Platform Connect
	// The value for this field does not map to the TC 33 capture file.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Sub-merchant's email address.
	//
	// CyberSource through VisaNet |
	// With American Express, the value for this field corresponds to the following data in the TC 33 capture file:
	//
	// - Record: CP01 TCRB
	// - Position: 25-64
	// - Field: American Express Seller E-mail Address
	// - Note The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant's acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
	//
	// Max Length: 40
	Email string `json:"email,omitempty"`

	// The ID you assigned to your sub-merchant.
	//
	// FDC Compass: This value must consist of uppercase characters.
	//
	// Visa Platform Connect with Mastercard: String (15)
	// FDC Compass: String (20)
	//
	// Max Length: 20
	ID string `json:"id,omitempty"`

	// Sub-merchant's city.
	//
	// For processor-specific details, see submerchant_city request field description in Credit Card Services Using the SCMP API.
	//
	// Visa Platform Connect
	// The value for this field does not map to the TC 33 capture file5.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 21
	Locality string `json:"locality,omitempty"`

	// Sub-merchant's business name.
	//
	// Visa Platform Connect
	// With American Express, the maximum length of the sub-merchant name depends on the length of the aggregator name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 37
	Name string `json:"name,omitempty"`

	// Sub-merchant's telephone number.
	//
	// Maximum length for procesors
	//
	// Visa Platform Connect: 20
	// FDC Compass: 13
	//
	// FDC Compass
	// This value must consist of uppercase characters. Use one of these recommended formats:
	// NNN-NNN-NNNN
	// NNN-AAAAAAA
	//
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Partial postal code for the sub-merchant's address.
	//
	// For processor-specific details, see submerchant_postal_code request field description in Credit Card Services Using the SCMP API.
	//
	// Visa Platform Connect
	// The value for this field does not map to the TC 33 capture file5.
	//
	// FDC Compass
	// This value must consist of uppercase characters.
	//
	// Max Length: 15
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create push funds transfer params body aggregator information sub merchant
func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"address1", "body", o.Address1, 38); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"administrativeArea", "body", o.AdministrativeArea, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"email", "body", o.Email, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"id", "body", o.ID, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"locality", "body", o.Locality, 21); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"name", "body", o.Name, 37); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"phoneNumber", "body", o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"aggregatorInformation"+"."+"subMerchant"+"."+"postalCode", "body", o.PostalCode, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body aggregator information sub merchant based on context it is used
func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyAggregatorInformationSubMerchant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyClientReferenceInformation create push funds transfer params body client reference information
swagger:model CreatePushFundsTransferParamsBodyClientReferenceInformation
*/
type CreatePushFundsTransferParamsBodyClientReferenceInformation struct {

	// The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
	//
	// Max Length: 50
	ApplicationName string `json:"applicationName,omitempty"`

	// The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
	//
	// Max Length: 60
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Version of the CyberSource application or integration used for a transaction.
	//
	// Max Length: 50
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this create push funds transfer params body client reference information
func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplicationName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicationUser(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) validateApplicationName(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicationName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"clientReferenceInformation"+"."+"applicationName", "body", o.ApplicationName, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) validateApplicationUser(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicationUser) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"clientReferenceInformation"+"."+"applicationUser", "body", o.ApplicationUser, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) validateApplicationVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ApplicationVersion) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"clientReferenceInformation"+"."+"applicationVersion", "body", o.ApplicationVersion, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body client reference information based on context it is used
func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyMerchantDefinedInformation create push funds transfer params body merchant defined information
swagger:model CreatePushFundsTransferParamsBodyMerchantDefinedInformation
*/
type CreatePushFundsTransferParamsBodyMerchantDefinedInformation struct {

	// The number you assign for as the key for your merchant-defined data field. Valid values are 0 to 100.
	//
	// For example, to set or access the key for the 2nd merchant-defined data field in the array, you would reference merchantDefinedInformation[1].key.
	//
	// For Mastercard Send:
	// Name to be displayed in the reconciliation report for this disbursement. This value will appear as a header in the column name of the report.
	//
	// Max Length: 50
	Key string `json:"key,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// For details, see merchant_defined_data1 field description in the Credit Card Services Using the SCMP API Guide.
	//
	// Warning Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV, CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// For Mastercard Send:
	// Value to be displayed in the reconciliation report for this disbursement.
	//
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this create push funds transfer params body merchant defined information
func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantDefinedInformation"+"."+"key", "body", o.Key, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantDefinedInformation"+"."+"value", "body", o.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body merchant defined information based on context it is used
func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantDefinedInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyMerchantDefinedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyMerchantInformation create push funds transfer params body merchant information
swagger:model CreatePushFundsTransferParamsBodyMerchantInformation
*/
type CreatePushFundsTransferParamsBodyMerchantInformation struct {

	// The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company's cards. When you do not include this field in your request, CyberSource uses the value in your CyberSource account.
	//
	// For processor-specific information, see the merchant_category_code field description in Credit Card Services Using the SCMP API.
	//
	// Visa Platform Connect
	// The value for this field corresponds to the following data in the TC 33 capture file5:
	//
	// Record: CP01 TCR4
	// Position: 150-153
	// Field: Merchant Category Code
	//
	CategoryCode int64 `json:"categoryCode,omitempty"`

	// merchant descriptor
	MerchantDescriptor *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`

	// Time that the transaction was submitted in local time. The time is in hhmmss format.
	//
	// Max Length: 6
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`

	// Your government-assigned tax identification number.
	//
	// Visa Platform Connect: max length is 20
	//
	// Max Length: 21
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this create push funds transfer params body merchant information
func (o *CreatePushFundsTransferParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitLocalDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformation) validateSubmitLocalDateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitLocalDateTime) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"submitLocalDateTime", "body", o.SubmitLocalDateTime, 6); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"vatRegistrationNumber", "body", o.VatRegistrationNumber, 21); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body merchant information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyMerchantInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformation) contextValidateMerchantDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantDescriptor != nil {

		if swag.IsZero(o.MerchantDescriptor) { // not required
			return nil
		}

		if err := o.MerchantDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor create push funds transfer params body merchant information merchant descriptor
swagger:model CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor
*/
type CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor struct {

	// The state where the merchant is located.
	//
	// See https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf
	//
	// Note This field is supported only for businesses located in the U.S. or Canada.
	//
	// Max Length: 3
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// For the descriptions, used-by information, data types, and lengths for these fields, see merchant_descriptor_contact field description in Credit Card Services Using the SCMP API.--> Contact information for the merchant.
	//
	// Note These are the maximum data lengths for the following payment processors:
	//
	// FDC Compass (13)
	// Chase Paymentech (13).
	//
	// Max Length: 14
	Contact string `json:"contact,omitempty"`

	// Merchant's country.
	//
	// Country code for your business location. Use the ISO Standard Alpha Country Codes This value might be displayed on the cardholder's statement.
	//
	// See https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf
	//
	// Note If your business is located in the U.S. or Canada and you include this field in a request, you must also include merchantInformation.merchantDescriptor.administrativeArea.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// City for your business location. This value might be displayed on the cardholder's statement.
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Merchant's business name. This name is displayed on the cardholder's statement.
	//
	// Chase Paymentech, Visa Platform Connect: length 22
	//
	// Max Length: 23
	Name string `json:"name,omitempty"`

	// Merchant's postal code. This value might be displayed on the cardholder's statement.
	//
	// If your business is domiciled in the U.S., you can use a 5-digit or 9-digit postal code. A 9-digit postal code must follow this format: [5 digits][dash][4 digits] Example: 12345-6789
	//
	// If your business is domiciled in Canada, you can use a 6-digit or 9-digit postal code. A 6-digit postal code must follow this format: [alpha][numeric][alpha][space] [numeric][alpha][numeric] Example: A1B 2C3
	//
	// Max Length: 14
	PostalCode string `json:"postalCode,omitempty"`

	// The unique id of the merchant's shop which assigned by the merchant.
	//
	// Max Length: 32
	StoreID string `json:"storeId,omitempty"`
}

// Validate validates this create push funds transfer params body merchant information merchant descriptor
func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStoreID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"administrativeArea", "body", o.AdministrativeArea, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(o.Contact) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"contact", "body", o.Contact, 14); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", o.Locality, 13); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"name", "body", o.Name, 23); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"postalCode", "body", o.PostalCode, 14); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) validateStoreID(formats strfmt.Registry) error {
	if swag.IsZero(o.StoreID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"storeId", "body", o.StoreID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body merchant information merchant descriptor based on context it is used
func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyOrderInformation create push funds transfer params body order information
swagger:model CreatePushFundsTransferParamsBodyOrderInformation
*/
type CreatePushFundsTransferParamsBodyOrderInformation struct {

	// amount details
	// Required: true
	AmountDetails *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails `json:"amountDetails"`

	// This indicates that the funds transfer is for a crypto currency transaction. Optional Y/y, true N/n, false
	//
	// Max Length: 5
	IsCryptocurrencyPurchase string `json:"isCryptocurrencyPurchase,omitempty"`

	// surcharge
	Surcharge *CreatePushFundsTransferParamsBodyOrderInformationSurcharge `json:"surcharge,omitempty"`
}

// Validate validates this create push funds transfer params body order information
func (o *CreatePushFundsTransferParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsCryptocurrencyPurchase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSurcharge(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"orderInformation"+"."+"amountDetails", "body", o.AmountDetails); err != nil {
		return err
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformation) validateIsCryptocurrencyPurchase(formats strfmt.Registry) error {
	if swag.IsZero(o.IsCryptocurrencyPurchase) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"orderInformation"+"."+"isCryptocurrencyPurchase", "body", o.IsCryptocurrencyPurchase, 5); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformation) validateSurcharge(formats strfmt.Registry) error {
	if swag.IsZero(o.Surcharge) { // not required
		return nil
	}

	if o.Surcharge != nil {
		if err := o.Surcharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "surcharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "surcharge")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body order information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyOrderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmountDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSurcharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformation) contextValidateAmountDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.AmountDetails != nil {

		if err := o.AmountDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "amountDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformation) contextValidateSurcharge(ctx context.Context, formats strfmt.Registry) error {

	if o.Surcharge != nil {

		if swag.IsZero(o.Surcharge) { // not required
			return nil
		}

		if err := o.Surcharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "surcharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "orderInformation" + "." + "surcharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyOrderInformationAmountDetails create push funds transfer params body order information amount details
swagger:model CreatePushFundsTransferParamsBodyOrderInformationAmountDetails
*/
type CreatePushFundsTransferParamsBodyOrderInformationAmountDetails struct {

	// Use a 3-character alpha currency code for currency of the sender.
	//
	// ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf
	//
	// Currency must be supported by the processor.
	//
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// The disbursement amount. Numeric integer, 1-999999999999. The decimal point is implied based on the relevant currency exponent. For example, a US Dollar $53 amount is a value of 5300.
	//
	// Processor Amount Ranges:
	// Visa Platform Connect: .01-9999999999.99
	//
	// Mastercard Send: 1-9999999999.99
	//
	// FDC Compass: .01- 9999999999.99
	//
	// Chase Paymentech: .01-9999999999.99
	//
	// Required: true
	// Max Length: 19
	TotalAmount *string `json:"totalAmount"`
}

// Validate validates this create push funds transfer params body order information amount details
func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", *o.Currency, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount); err != nil {
		return err
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", *o.TotalAmount, 19); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body order information amount details based on context it is used
func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyOrderInformationSurcharge create push funds transfer params body order information surcharge
swagger:model CreatePushFundsTransferParamsBodyOrderInformationSurcharge
*/
type CreatePushFundsTransferParamsBodyOrderInformationSurcharge struct {

	// The surcharge amount is included in the total transaction amount but is passed in a separate field to the issuer and acquirer for tracking. The issuer can provide information about the surcharge amount to the customer.
	//
	// If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer.
	//
	// NOTE: This field is supported only for Visa Platform Connect
	//
	// Max Length: 8
	Amount string `json:"amount,omitempty"`
}

// Validate validates this create push funds transfer params body order information surcharge
func (o *CreatePushFundsTransferParamsBodyOrderInformationSurcharge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyOrderInformationSurcharge) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"orderInformation"+"."+"surcharge"+"."+"amount", "body", o.Amount, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body order information surcharge based on context it is used
func (o *CreatePushFundsTransferParamsBodyOrderInformationSurcharge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformationSurcharge) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyOrderInformationSurcharge) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyOrderInformationSurcharge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyPointOfServiceInformation create push funds transfer params body point of service information
swagger:model CreatePushFundsTransferParamsBodyPointOfServiceInformation
*/
type CreatePushFundsTransferParamsBodyPointOfServiceInformation struct {

	// Type of cardholder-activated terminal. Possible values:
	//
	// - `1`: Automated dispensing machine
	// - `2`: Self-service terminal
	// - `3`: Limited amount terminal
	// - `4`: In-flight commerce (IFC) terminal
	// - `5`: Radio frequency device
	// - `6`: Mobile acceptance terminal
	// - `7`: Electronic cash register
	// - `8`: E-commerce device at your location
	// - `9`: Terminal or cash register that uses a dialup connection to connect to the transaction processing network
	//
	// Chase Paymentech Solutions
	// Only values 1, 2, and 3 are supported.
	// Required if pointOfSaleInformation.terminalID is included in the request; otherwise, optional.
	//
	// Visa Platform COnnect
	// Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values.
	// Optional field.
	//
	// Nonnegative integer.
	//
	CatLevel int64 `json:"catLevel,omitempty"`

	// Method of entering payment card information into the POS terminal. Possible values:
	//
	// - `contact`: Read from direct contact with chip card.
	// - `contactless`: Read from a contactless interface using chip data.
	// - `keyed`: Manually keyed into POS terminal. This value is not supported on OmniPay Direct.
	// - `msd`: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct.
	// - `swiped`: Read from credit card magnetic stripe.
	// The contact, contactless, and msd values are supported only for EMV transactions.
	//
	// Max Length: 11
	EntryMode string `json:"entryMode,omitempty"`

	// PIN Entry Capability
	// - 0 Unknown.
	// - 1 Indicates terminal can accept and forward online PINs.
	// - 2 Indicates terminal cannot accept and forward online PINs.
	// - 8 Terminal PIN pad down.
	// - 9 Reserved for future use.
	//
	PinEntryCapability int64 `json:"pinEntryCapability,omitempty"`

	// integer [ 1 .. 5 ]
	// POS terminal's capability. Possible values:
	//
	// - `1`: Terminal has a magnetic stripe reader only.
	// - `2`: Terminal has a magnetic stripe reader and manual entry capability.
	// - `3`: Terminal has manual entry capability only.
	// - `4`: Terminal can read chip cards.
	// - `5`: Terminal can read contactless chip cards; cannot use contact to read chip cards.
	// For an EMV transaction, the value of this field must be 4 or 5.
	//
	// Used by
	// Authorization Required for the following processors:
	// Chase Paymentech Solutions
	//
	// Optional for the following processors:
	// Visa Platform Connect
	//
	TerminalCapability int64 `json:"terminalCapability,omitempty"`

	// Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.
	//
	// Visa Platform Connect
	// A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.
	//
	//
	// Used by
	// Authorization Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.
	//
	// Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include pointOfSaleInformation.catLevel.
	//
	// Max Length: 8
	TerminalID string `json:"terminalId,omitempty"`
}

// Validate validates this create push funds transfer params body point of service information
func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntryMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) validateEntryMode(formats strfmt.Registry) error {
	if swag.IsZero(o.EntryMode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"pointOfServiceInformation"+"."+"entryMode", "body", o.EntryMode, 11); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) validateTerminalID(formats strfmt.Registry) error {
	if swag.IsZero(o.TerminalID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"pointOfServiceInformation"+"."+"terminalId", "body", o.TerminalID, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body point of service information based on context it is used
func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyPointOfServiceInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyPointOfServiceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingInformation create push funds transfer params body processing information
swagger:model CreatePushFundsTransferParamsBodyProcessingInformation
*/
type CreatePushFundsTransferParamsBodyProcessingInformation struct {

	//
	// Payouts transaction type.
	// Required for Mastercard Send.
	//
	// Valid Values-
	// Visa Platform Connect:
	// - `AA`: Account to account.
	// - `CP`: Card bill payment
	// - `FD`: Funds disbursement (general)
	// - `GD`: Government disbursement
	// - `MD`: Merchant disbursement (acquirers or aggregators settling to merchants).
	// - `PP`: Person to person.
	// - `TU`: Top-up for enhanced prepaid loads.
	//
	//
	// Mastercard Send:
	// - `BB`: Business to business.
	// - `BD`: Business Disbursement
	// - `CP`: Card bill payment
	// - `GD`: Government disbursement
	// - `MD`: Merchant disbursement (acquirers or aggregators settling to merchants).
	// - `OG`: Online gambling payout.
	//
	//
	// Chase Paymentech Solutions:
	// - `AA`: Account to account.
	// - `FD`: Funds disbursement (general)
	// - `MD`: Merchant disbursement (acquirers or aggregators settling to merchants).
	// - `PP`: Person to person.
	//
	//
	// FDC Compass:
	// - `BB`: Business to business.
	// - `BI`: Bank-initiated money transfer.
	// - `FD`: Funds disbursement (general)
	// - `GD`: Government disbursement
	// - `GP`: Gambling Payment
	// - `LO`: Loyalty Offers
	// - `MD`: Merchant disbursement (acquirers or aggregators settling to merchants).
	// - `MI`: Merchant initated money transfer
	// - `OG`: Online gambling payout.
	// - `PD`: Payroll pension disbursement.
	// - `PP`: Person to person.
	// - `WT`: Wallet transfer.
	//
	// Max Length: 2
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of transaction.
	//
	// Value for an OCT transaction:
	// internet
	//
	// For details, see the e_commerce_indicator field description in Payouts Using the SCMP API.
	//
	// Required: true
	// Max Length: 13
	CommerceIndicator *string `json:"commerceIndicator"`

	// Visa Platform Connect
	// This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to get the attributes for specified networks only. The networks specified in this field must be a subset of the information provided during program enrollment. Refer to Sharing Group Code/Network Routing Order. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service.
	//
	// VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the network routing order. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer's preference. If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer's routing priorities.
	//
	// For details, see the network_order field description in BIN Lookup Service Using the SCMP API.
	//
	// Max Length: 30
	NetworkRoutingOrder string `json:"networkRoutingOrder,omitempty"`

	// payouts options
	PayoutsOptions *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions `json:"payoutsOptions,omitempty"`

	// This will send purpose of funds code for original credit transactions (OCTs).
	//
	// Visa Platform Connect (VPC)
	// This will send purpose of transaction code for original credit transactions (OCTs). Purpose of Payment codes are defined by the recipient issuer's country and vary by country.
	//
	// Mastercard Send:
	// - `00`: Family Support
	// - `01`: Regular Labor Transfers (expatriates),
	// - `02`: Travel & Tourism
	// - `03`: Education
	// - `04`: Hospitalization & Medical Treatment,
	// - `05`: Emergency Need
	// - `06`: Savings
	// - `07`: Gifts
	// - `08`: Other
	// - `09`: Salary
	// - `10`: Crowd lending
	// - `11`: Crypto currency
	// - `12`: Refund to original card
	// - `13`: Refund to new card
	//
	// Max Length: 12
	PurposeOfPayment string `json:"purposeOfPayment,omitempty"`

	// Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request.
	//
	// For Payouts: max length for FDCCompass is String (22).
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// recurring options
	RecurringOptions *CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions `json:"recurringOptions,omitempty"`

	// Transaction reason code.
	//
	// This field applies only to Visa Platform Connect
	//
	// Max Length: 4
	TransactionReason string `json:"transactionReason,omitempty"`
}

// Validate validates this create push funds transfer params body processing information
func (o *CreatePushFundsTransferParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkRoutingOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePayoutsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePurposeOfPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecurringOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateBusinessApplicationID(formats strfmt.Registry) error {
	if swag.IsZero(o.BusinessApplicationID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"businessApplicationId", "body", o.BusinessApplicationID, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {

	if err := validate.Required("pushFundsRequest"+"."+"processingInformation"+"."+"commerceIndicator", "body", o.CommerceIndicator); err != nil {
		return err
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"commerceIndicator", "body", *o.CommerceIndicator, 13); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateNetworkRoutingOrder(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkRoutingOrder) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"networkRoutingOrder", "body", o.NetworkRoutingOrder, 30); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validatePayoutsOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.PayoutsOptions) { // not required
		return nil
	}

	if o.PayoutsOptions != nil {
		if err := o.PayoutsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validatePurposeOfPayment(formats strfmt.Registry) error {
	if swag.IsZero(o.PurposeOfPayment) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"purposeOfPayment", "body", o.PurposeOfPayment, 12); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateReconciliationID(formats strfmt.Registry) error {
	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"reconciliationId", "body", o.ReconciliationID, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateRecurringOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.RecurringOptions) { // not required
		return nil
	}

	if o.RecurringOptions != nil {
		if err := o.RecurringOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "recurringOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "recurringOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) validateTransactionReason(formats strfmt.Registry) error {
	if swag.IsZero(o.TransactionReason) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"transactionReason", "body", o.TransactionReason, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body processing information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePayoutsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecurringOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) contextValidatePayoutsOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.PayoutsOptions != nil {

		if swag.IsZero(o.PayoutsOptions) { // not required
			return nil
		}

		if err := o.PayoutsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformation) contextValidateRecurringOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.RecurringOptions != nil {

		if swag.IsZero(o.RecurringOptions) { // not required
			return nil
		}

		if err := o.RecurringOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "recurringOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingInformation" + "." + "recurringOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions create push funds transfer params body processing information payouts options
swagger:model CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions
*/
type CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions struct {

	// Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.
	//
	// Applicable only for Visa Platform Connect
	//
	// Max Length: 15
	AccountFundingReferenceID string `json:"accountFundingReferenceId,omitempty"`

	// This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.
	//
	// Format: Positions 1-4: The yddd equivalent of the date, where y = 0-9 and ddd = 001 – 366. Positions 5-12: A unique identification number generated by the merchant
	//
	// Applicable only for Visa Platform Connect
	//
	// Max Length: 12
	RetrievalReferenceNumber string `json:"retrievalReferenceNumber,omitempty"`
}

// Validate validates this create push funds transfer params body processing information payouts options
func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountFundingReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetrievalReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) validateAccountFundingReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountFundingReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"accountFundingReferenceId", "body", o.AccountFundingReferenceID, 15); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) validateRetrievalReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.RetrievalReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"retrievalReferenceNumber", "body", o.RetrievalReferenceNumber, 12); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body processing information payouts options based on context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingInformationPayoutsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions create push funds transfer params body processing information recurring options
swagger:model CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions
*/
type CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions struct {

	// boolean
	// Default: false
	// Flag that indicates whether this is a payment towards an existing contractual loan.
	//
	// Possible values:
	//
	// true: Loan payment
	// false: (default) Not a loan payment
	//
	// This field applies only to FDC Compass
	//
	LoanPayment bool `json:"loanPayment,omitempty"`
}

// Validate validates this create push funds transfer params body processing information recurring options
func (o *CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create push funds transfer params body processing information recurring options based on context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingInformationRecurringOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingOptions create push funds transfer params body processing options
swagger:model CreatePushFundsTransferParamsBodyProcessingOptions
*/
type CreatePushFundsTransferParamsBodyProcessingOptions struct {

	// funding options
	FundingOptions *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions `json:"fundingOptions,omitempty"`
}

// Validate validates this create push funds transfer params body processing options
func (o *CreatePushFundsTransferParamsBodyProcessingOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFundingOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingOptions) validateFundingOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.FundingOptions) { // not required
		return nil
	}

	if o.FundingOptions != nil {
		if err := o.FundingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body processing options based on the context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFundingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingOptions) contextValidateFundingOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.FundingOptions != nil {

		if swag.IsZero(o.FundingOptions) { // not required
			return nil
		}

		if err := o.FundingOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptions) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions create push funds transfer params body processing options funding options
swagger:model CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions
*/
type CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions struct {

	// initiator
	Initiator *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create push funds transfer params body processing options funding options
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body processing options funding options based on the context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {

		if swag.IsZero(o.Initiator) { // not required
			return nil
		}

		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "processingOptions" + "." + "fundingOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator create push funds transfer params body processing options funding options initiator
swagger:model CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator
*/
type CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator struct {

	// Visa Platform Connect :
	// This API will contain a code that denotes whether the customer identification data belongs to the sender or the recipient.
	//
	// The valid values are:
	// - `S` (Payer (sender))
	// - `R` (Payee (recipient))
	//
	// This field applies only to Visa Platform Connect
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this create push funds transfer params body processing options funding options initiator
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"processingOptions"+"."+"fundingOptions"+"."+"initiator"+"."+"type", "body", o.Type, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body processing options funding options initiator based on context it is used
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyProcessingOptionsFundingOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformation create push funds transfer params body recipient information
swagger:model CreatePushFundsTransferParamsBodyRecipientInformation
*/
type CreatePushFundsTransferParamsBodyRecipientInformation struct {

	// First line of the recipient's address.
	//
	// Required for Mastercard Send. This field is not supported for Visa Platform Connect.
	//
	// Max Length: 50
	Address1 string `json:"address1,omitempty"`

	// Second line of the recipient's address
	//
	// Optional for Mastercard Send. This field is not supported for Visa Platform Connect.
	//
	// Max Length: 50
	Address2 *string `json:"address2,omitempty"`

	// The recipient's province, state or territory. Conditional, required if recipient's country is USA or CAN. Must be an ISO 3166-2 uppercase alpha 2 or 3 character country subdivision code. For example, Missouri is MO.
	//
	// Required only for FDCCompass.
	//
	// This field is not supported for Visa Platform Connect.
	//
	// Max Length: 3
	AdministrativeArea *string `json:"administrativeArea,omitempty"`

	// Recipient country code. Use the ISO Standard Alpha Country Codes.
	//
	// https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf
	//
	// Required for Mastercard Send.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Recipient date of birth in YYYYMMDD format.
	//
	// Max Length: 8
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// First name of recipient.
	//
	// Visa Platform Connect (14)
	// Chase Paymentech (30)
	// Mastercard Send (40)
	//
	// This field is required for Mastercard Send.
	//
	// Max Length: 40
	FirstName string `json:"firstName,omitempty"`

	// Last name of recipient.
	//
	// Visa Platform Connect (14)
	// Paymentech (30)
	// Mastercard Send (40)
	//
	// This field is required for Mastercard Send.
	//
	// Max Length: 40
	LastName *string `json:"lastName,omitempty"`

	// Recipient city.
	//
	// Required for Mastercard Send.
	//
	// Max Length: 25
	Locality string `json:"locality,omitempty"`

	// Middle Initial of recipient.
	//
	// This field is supported by FDC Compass.
	//
	// Max Length: 1
	MiddleInitial *string `json:"middleInitial,omitempty"`

	// Sender's middle name. This field is a passthrough, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor.
	//
	// Max Length: 40
	MiddleName *string `json:"middleName,omitempty"`

	// payment information
	PaymentInformation *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation `json:"paymentInformation,omitempty"`

	// personal identification
	PersonalIdentification *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification `json:"personalIdentification,omitempty"`

	// Recipient phone number.
	//
	// This field is supported by FDC Compass.
	//
	// Mastercard Send: Max length is 15 with no dashes or spaces.
	//
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Recipient postal code.
	//
	// For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.
	//
	// Mastercard Send: Required for recipients in Canada and Canadian issued cards.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information
func (o *CreatePushFundsTransferParamsBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"address1", "body", o.Address1, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"address2", "body", *o.Address2, 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"administrativeArea", "body", *o.AdministrativeArea, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"dateOfBirth", "body", *o.DateOfBirth, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"firstName", "body", o.FirstName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"lastName", "body", *o.LastName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"locality", "body", o.Locality, 25); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateMiddleInitial(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleInitial) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"middleInitial", "body", *o.MiddleInitial, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"middleName", "body", *o.MiddleName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	if o.PersonalIdentification != nil {
		if err := o.PersonalIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "personalIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "personalIdentification")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"phoneNumber", "body", o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body recipient information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	if o.PersonalIdentification != nil {

		if swag.IsZero(o.PersonalIdentification) { // not required
			return nil
		}

		if err := o.PersonalIdentification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "personalIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "personalIdentification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation create push funds transfer params body recipient information payment information
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation struct {

	// card
	Card *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard `json:"card,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information payment information
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body recipient information payment information based on the context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard create push funds transfer params body recipient information payment information card
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard struct {

	// customer
	Customer *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer `json:"customer,omitempty"`

	// Two-digit month in which the payment card expires.
	//
	// Format: MM.
	//
	// Valid values: 01 through 12. Leading 0 is required.
	//
	// Max Length: 2
	ExpirationMonth *string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the payment card expires.
	//
	// Format: YYYY.
	//
	// Max Length: 4
	ExpirationYear *string `json:"expirationYear,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN).
	//
	// Conditional: this field is required if not using tokens.
	//
	// Max Length: 19
	// Min Length: 13
	Number *string `json:"number,omitempty"`

	// payment instrument
	PaymentInstrument *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument `json:"paymentInstrument,omitempty"`

	// 3-digit value that indicates the cardCvv2Value. Values can be 0-9.
	//
	// Max Length: 3
	SecurityCode *string `json:"securityCode,omitempty"`

	// Three-digit value that indicates the card type. Mandatory if not present in a token.
	//
	// Possible values:
	//
	// Visa Platform Connect
	// - `001`: Visa
	// - `002`: Mastercard, Eurocard, which is a European regional brand of Mastercard.
	// - `033`: Visa Electron
	// - `024`: Maestro
	//
	// Mastercard Send:
	// - `002`: Mastercard, Eurocard, which is a European regional brand of Mastercard.
	//
	// FDC Compass:
	// - `001`: Visa
	// - `002`: Mastercard, Eurocard, which is a European regional brand of Mastercard.
	//
	// Chase Paymentech:
	// - `001`: Visa
	// - `002`: Mastercard, Eurocard, which is a European regional brand of Mastercard.
	//
	// Max Length: 3
	Type string `json:"type,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information payment information card
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", *o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", *o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateInstrumentIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", *o.Number, 13); err != nil {
		return err
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", *o.Number, 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validatePaymentInstrument(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstrument) { // not required
		return nil
	}

	if o.PaymentInstrument != nil {
		if err := o.PaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"securityCode", "body", *o.SecurityCode, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"type", "body", o.Type, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body recipient information payment information card based on the context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInstrumentIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if o.Customer != nil {

		if swag.IsZero(o.Customer) { // not required
			return nil
		}

		if err := o.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) contextValidateInstrumentIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if o.InstrumentIdentifier != nil {

		if swag.IsZero(o.InstrumentIdentifier) { // not required
			return nil
		}

		if err := o.InstrumentIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "instrumentIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) contextValidatePaymentInstrument(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstrument != nil {

		if swag.IsZero(o.PaymentInstrument) { // not required
			return nil
		}

		if err := o.PaymentInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "paymentInstrument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "recipientInformation" + "." + "paymentInformation" + "." + "card" + "." + "paymentInstrument")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer create push funds transfer params body recipient information payment information card customer
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer struct {

	// Unique identifier for the Customer token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
	//
	// Max Length: 32
	ID string `json:"id,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information payment information card customer
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"customer"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body recipient information payment information card customer based on context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier create push funds transfer params body recipient information payment information card instrument identifier
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier struct {

	// Unique identifier for the Instrument Identifier token used in the transaction. When you include this value in your request, many of the fields that can be supplied for an authorization or credit become optional.
	//
	// Max Length: 32
	ID string `json:"id,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information payment information card instrument identifier
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"instrumentIdentifier"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body recipient information payment information card instrument identifier based on context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument create push funds transfer params body recipient information payment information card payment instrument
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument struct {

	// Unique identifier for the Payment Instrument token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
	//
	// Max Length: 32
	ID string `json:"id,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information payment information card payment instrument
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"paymentInformation"+"."+"card"+"."+"paymentInstrument"+"."+"id", "body", o.ID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body recipient information payment information card payment instrument based on context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPaymentInformationCardPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification create push funds transfer params body recipient information personal identification
swagger:model CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification
*/
type CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification struct {

	// The ID number/value.
	//
	// Visa Platform Connect
	// This tag will contain an acquirer-populated value associated with the API : senderInformation.personalIdType which will identify the personal ID type of the sender.
	//
	// Mastercard Send(80)
	//
	// Max Length: 80
	ID *string `json:"id,omitempty"`

	// This tag will contain the type of sender identification. The valid values are:
	//
	// Visa Platform Connect:
	// - `BTHD`: (Date of birth)
	// - `CUID`: (Customer identification (unspecified))
	// - `NTID`: (National identification)
	// - `PASN`: (Passport number)
	// - `DRLN`: (Driver license)
	// - `TXIN`: (Tax identification)
	// - `CPNY`: (Company registration number)
	// - `PRXY`: (Proxy identification)
	// - `SSNB`: (Social security number)
	// - `ARNB`: (Alien registration number)
	// - `LAWE`: (Law enforcement identification)
	// - `MILI`: (Military identification)
	// - `TRVL`: (Travel identification (non-passport))
	// - `EMAL`: (Email)
	// - `PHON`: (Phone number)
	//
	// Mastercard Send:
	// - `CUID`: (Customer identification (unspecified))
	// - `NTID`: (National identification)
	// - `PASN`: (Passport number)
	// - `DRLN`: (Driver license)
	// - `TXIN`: (Tax identification)
	// - `SSNB`: (Social security number)
	// - `ARNB`: (Alien registration number)
	// - `EIDN`: (Employer Identification Number)
	// - `IDNB`: (Identity Card Number)
	//
	// Max Length: 4
	Type *string `json:"type,omitempty"`
}

// Validate validates this create push funds transfer params body recipient information personal identification
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"personalIdentification"+"."+"id", "body", *o.ID, 80); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"recipientInformation"+"."+"personalIdentification"+"."+"type", "body", *o.Type, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body recipient information personal identification based on context it is used
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodyRecipientInformationPersonalIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodySenderInformation create push funds transfer params body sender information
swagger:model CreatePushFundsTransferParamsBodySenderInformation
*/
type CreatePushFundsTransferParamsBodySenderInformation struct {

	// account
	Account *CreatePushFundsTransferParamsBodySenderInformationAccount `json:"account,omitempty"`

	// Street address of sender.
	//
	// Funds Disbursement
	//
	// This value is the address of the originator sending the funds disbursement.
	//
	// Visa Platform Connect
	// Required for transactions using business application id of AA, BI, PP, and WT.
	//
	// Max Length: 60
	Address1 *string `json:"address1,omitempty"`

	// Used for additional address information. For example: Attention: Accounts Payable Optional field.
	//
	// This field is supported for only Mastercard Send.
	//
	// Max Length: 60
	Address2 *string `json:"address2,omitempty"`

	// Sender's state. Use the State, Province, and Territory Codes for the United States and Canada.The sender's province, state or territory. Conditional, required if sender's country is USA or CAN. Must be uppercase alpha 2 or 3 character country subdivision code.
	//
	// See https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf
	//
	// Max Length: 3
	AdministrativeArea *string `json:"administrativeArea,omitempty"`

	// Sender's country code. Use ISO Standard Alpha Country Codes.
	//
	// https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf
	//
	// Visa Platform Connect
	// Required for transactions using business application id of AA, BI, PP, and WT.
	//
	// Required for Mastercard Send
	//
	// Max Length: 2
	Country *string `json:"country,omitempty"`

	// Sender's date of birth in YYYYMMDD format.
	//
	// Max Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// This field contains the first name of the entity funding the transaction.
	//
	// Max Length: 40
	FirstName *string `json:"firstName,omitempty"`

	// This field contains the last name of the entity funding the transaction.
	//
	// Max Length: 40
	LastName *string `json:"lastName,omitempty"`

	// The sender's city
	//
	// Visa Platform Connect
	// Required for transactions using business application id of AA, BI, PP, and WT.
	//
	// Max Length: 25
	Locality *string `json:"locality,omitempty"`

	// Supported only for Mastercard  transactions. This field contains the  middle name of the entity funding the transaction
	//
	// Max Length: 40
	MiddleName *string `json:"middleName,omitempty"`

	// Name of sender.
	//
	// Funds Disbursement
	//
	// This value is the name of the originator sending the funds disbursement.
	//
	// Max Length: 30
	Name *string `json:"name,omitempty"`

	// payment information
	PaymentInformation *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation `json:"paymentInformation,omitempty"`

	// personal identification
	PersonalIdentification *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification `json:"personalIdentification,omitempty"`

	// Sender's phone number.
	//
	// Max Length: 20
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// Sender's postal code.  For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.
	//
	// Required for FDCCompass.
	//
	// Max Length: 10
	PostalCode *string `json:"postalCode,omitempty"`

	// Reference number generated by you that uniquely identifies the sender.
	//
	// Max Length: 19
	ReferenceNumber *string `json:"referenceNumber,omitempty"`

	// Customer's government-assigned tax identification number.
	//
	// Max Length: 20
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this create push funds transfer params body sender information
func (o *CreatePushFundsTransferParamsBodySenderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"address1", "body", *o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"address2", "body", *o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"administrativeArea", "body", *o.AdministrativeArea, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"country", "body", *o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"dateOfBirth", "body", o.DateOfBirth, 8); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"firstName", "body", *o.FirstName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"lastName", "body", *o.LastName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"locality", "body", *o.Locality, 25); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateMiddleName(formats strfmt.Registry) error {
	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"middleName", "body", *o.MiddleName, 40); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"name", "body", *o.Name, 30); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validatePersonalIdentification(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	if o.PersonalIdentification != nil {
		if err := o.PersonalIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "personalIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "personalIdentification")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validatePhoneNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"phoneNumber", "body", *o.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"postalCode", "body", *o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateReferenceNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.ReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"referenceNumber", "body", *o.ReferenceNumber, 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"vatRegistrationNumber", "body", o.VatRegistrationNumber, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body sender information based on the context it is used
func (o *CreatePushFundsTransferParamsBodySenderInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePersonalIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.Account != nil {

		if swag.IsZero(o.Account) { // not required
			return nil
		}

		if err := o.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInformation != nil {

		if swag.IsZero(o.PaymentInformation) { // not required
			return nil
		}

		if err := o.PaymentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformation) contextValidatePersonalIdentification(ctx context.Context, formats strfmt.Registry) error {

	if o.PersonalIdentification != nil {

		if swag.IsZero(o.PersonalIdentification) { // not required
			return nil
		}

		if err := o.PersonalIdentification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "personalIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "personalIdentification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodySenderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodySenderInformationAccount create push funds transfer params body sender information account
swagger:model CreatePushFundsTransferParamsBodySenderInformationAccount
*/
type CreatePushFundsTransferParamsBodySenderInformationAccount struct {

	// Source of funds. Possible values:
	//
	// Chase Paymentech, FDC Compass, Visa Platform Connect:
	//
	// - `01`: Credit card
	// - `02`: Debit card
	// - `03`: Prepaid card
	//
	// Chase Paymentech, Visa Platform Connect:
	//
	// - `04`: Cash
	// - `05`: Debit or deposit account that is not linked to a Visa card. Includes checking accounts, savings accounts, and proprietary debit or ATM cards.
	// - `06`: Credit account that is not linked to a Visa card. Includes credit cards and proprietary lines of credit.
	//
	// FDC Compass:
	// - `04`: Deposit Account
	//
	// Funds Disbursement
	// This value is most likely 05 to identify that the originator used a deposit account to fund the disbursement.
	//
	// Credit Card Bill Payment
	// This value must be 02, 03, 04, or 05.
	//
	// Max Length: 2
	FundsSource string `json:"fundsSource,omitempty"`

	// The account number of the entity funding the transaction. It is the sender's account number. It can be a debit/credit card account number or bank account number.
	//
	// Funds disbursements
	//
	// This field is optional.
	//
	// All other transactions
	//
	// This field is required when the sender funds the transaction with a financial instrument, for example debit card. Length:
	//
	// FDC Compass (<= 19)
	// Chase Paymentech (<= 16)
	//
	// Max Length: 34
	Number string `json:"number,omitempty"`
}

// Validate validates this create push funds transfer params body sender information account
func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFundsSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) validateFundsSource(formats strfmt.Registry) error {
	if swag.IsZero(o.FundsSource) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"account"+"."+"fundsSource", "body", o.FundsSource, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"account"+"."+"number", "body", o.Number, 34); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body sender information account based on context it is used
func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationAccount) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodySenderInformationAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodySenderInformationPaymentInformation create push funds transfer params body sender information payment information
swagger:model CreatePushFundsTransferParamsBodySenderInformationPaymentInformation
*/
type CreatePushFundsTransferParamsBodySenderInformationPaymentInformation struct {

	// card
	Card *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard `json:"card,omitempty"`
}

// Validate validates this create push funds transfer params body sender information payment information
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create push funds transfer params body sender information payment information based on the context it is used
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {

		if swag.IsZero(o.Card) { // not required
			return nil
		}

		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pushFundsRequest" + "." + "senderInformation" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformation) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodySenderInformationPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard create push funds transfer params body sender information payment information card
swagger:model CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard
*/
type CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: MM.
	//
	// Valid values: 01 through 12. Leading 0 is required.
	//
	// This field is supported for Mastercard Send.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the payment card expires.
	//
	// This field is supported for Mastercard Send.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer's payment card number, also known as the Primary Account Number (PAN).
	//
	// This field is supported in Mastercard Send.
	//
	// Max Length: 19
	Number string `json:"number,omitempty"`

	// 3-digit value that indicates the card Cvv2Value. Values can be 0-9.
	//
	// This field is supported in Mastercard Send.
	//
	// Max Length: 3
	SecurityCode string `json:"securityCode,omitempty"`

	// Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.
	//
	// Valid values for Visa Platform Connect:
	// - `CHECKING`: Checking account
	// - `CREDIT`: Credit card account
	// - `SAVING`: Saving account
	// - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card
	// - `PREPAID`: Prepaid card account or prepaid portion of combo card
	// - `UNIVERSAL`: Universal account
	//
	// Valid values for Mastercard Send:
	// - `00`: Other,
	// - `01`: RTN + Bank Account,
	// - `02`: IBAN,
	// - `03`: Card Account,
	// - `04`: Email,
	// - `05`: Phone Number,
	// - `06`: Bank account number (BAN) + Bank Identification Сode (BIC),
	// - `07`: Wallet ID,
	// - `08`: Social Network ID. Numeric, 2 characters.
	//
	// This field is supported in Mastercard Send.
	//
	// Max Length: 20
	SourceAccountType string `json:"sourceAccountType,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// IMPORTANT It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	//
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value 001 for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	//
	// Max Length: 3
	Type string `json:"type,omitempty"`
}

// Validate validates this create push funds transfer params body sender information payment information card
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", o.Number, 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"securityCode", "body", o.SecurityCode, 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateSourceAccountType(formats strfmt.Registry) error {
	if swag.IsZero(o.SourceAccountType) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"sourceAccountType", "body", o.SourceAccountType, 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"paymentInformation"+"."+"card"+"."+"type", "body", o.Type, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body sender information payment information card based on context it is used
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodySenderInformationPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification create push funds transfer params body sender information personal identification
swagger:model CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification
*/
type CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification struct {

	// Visa Platform Connect(35)
	// This tag will contain an acquirer-populated value associated with the API : senderInformation.personalIdType which will identify the personal ID type of the sender.
	//
	// Mastercard Send(80)
	//
	// Max Length: 80
	ID string `json:"id,omitempty"`

	// Visa Platform Connect
	// This tag will denote whether the tax ID is a business or individual tax ID when personal ID Type contains the value of TXIN (Tax identification).
	//
	// The valid values are: • B (Business) • I (Individual)
	//
	// Max Length: 1
	PersonalIDType string `json:"personalIdType,omitempty"`

	// This tag will contain the type of sender identification. The valid values are:
	//
	// Visa Platform Connect:
	// - `BTHD`: (Date of birth)
	// - `CUID`: (Customer identification (unspecified))
	// - `NTID`: (National identification)
	// - `PASN`: (Passport number)
	// - `DRLN`: (Driver license)
	// - `TXIN`: (Tax identification)
	// - `CPNY`: (Company registration number)
	// - `PRXY`: (Proxy identification)
	// - `SSNB`: (Social security number)
	// - `ARNB`: (Alien registration number)
	// - `LAWE`: (Law enforcement identification)
	// - `MILI`: (Military identification)
	// - `TRVL`: (Travel identification (non-passport))
	// - `EMAL`: (Email)
	// - `PHON`: (Phone number)
	//
	// Mastercard Send:
	// - `CUID`: (Customer identification (unspecified))
	// - `NTID`: (National identification)
	// - `PASN`: (Passport number)
	// - `DRLN`: (Driver license)
	// - `TXIN`: (Tax identification)
	// - `SSNB`: (Social security number)
	// - `ARNB`: (Alien registration number)
	// - `EIDN`: (Employer Identification Number)
	// - `IDNB`: (Identity Card Number)
	//
	// Max Length: 4
	Type string `json:"type,omitempty"`
}

// Validate validates this create push funds transfer params body sender information personal identification
func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIDType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"personalIdentification"+"."+"id", "body", o.ID, 80); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) validatePersonalIDType(formats strfmt.Registry) error {
	if swag.IsZero(o.PersonalIDType) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"personalIdentification"+"."+"personalIdType", "body", o.PersonalIDType, 1); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("pushFundsRequest"+"."+"senderInformation"+"."+"personalIdentification"+"."+"type", "body", o.Type, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer params body sender information personal identification based on context it is used
func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferParamsBodySenderInformationPersonalIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreatePushFundsTransferUnauthorizedBody pushFunds401Response
swagger:model CreatePushFundsTransferUnauthorizedBody
*/
type CreatePushFundsTransferUnauthorizedBody struct {

	// A unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The detail message related to the status and reason listed above.
	//
	// Possible values:
	// - Authentication Failed
	//
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	// - UNAUTHORIZED
	//
	Reason string `json:"reason,omitempty"`

	// Time of request in UTC.
	// Format: `YYYY-MM-DDThh:mm:ssZ`
	//
	// **Example**
	// `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time.
	// The `Z` indicates UTC.
	//
	// Max Length: 20
	// Min Length: 20
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create push funds transfer unauthorized body
func (o *CreatePushFundsTransferUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePushFundsTransferUnauthorizedBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPushFundsTransferUnauthorized"+"."+"id", "body", o.ID, 26); err != nil {
		return err
	}

	return nil
}

func (o *CreatePushFundsTransferUnauthorizedBody) validateSubmitTimeUtc(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTimeUtc) { // not required
		return nil
	}

	if err := validate.MinLength("createPushFundsTransferUnauthorized"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	if err := validate.MaxLength("createPushFundsTransferUnauthorized"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create push funds transfer unauthorized body based on context it is used
func (o *CreatePushFundsTransferUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePushFundsTransferUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePushFundsTransferUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CreatePushFundsTransferUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
